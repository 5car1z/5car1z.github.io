<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C.J. Scarlett</title>
  <subtitle>The palest ink lasts longer than the most retentive memory.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tricksofthetrades.net/"/>
  <updated>2018-08-31T14:51:48.431Z</updated>
  <id>http://www.tricksofthetrades.net/</id>
  
  <author>
    <name>Scarlz</name>
    <email>count.elmsley@protonmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Switching to Exa — &quot;A modern replacement for ls.&quot;</title>
    <link href="http://www.tricksofthetrades.net/2018/08/30/exa-getting-started/"/>
    <id>http://www.tricksofthetrades.net/2018/08/30/exa-getting-started/</id>
    <published>2018-08-29T23:00:00.000Z</published>
    <updated>2018-08-31T14:51:48.431Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.gyazo.com/599eceada0e2a52d18a59b2cc3707798.png" alt="Exa Screenshot"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Everyone’s familiar with  <code>ls</code> on the commandline — aka <em>“list”</em> — but have you heard of <a href="https://github.com/ogham/exa" target="_blank" rel="external">‘Exa’</a> </p>
<p>Exa is a modern successor to the list command, designed with modernity in mind and an emphasis on better defaults, native colour support, and awareness of things like metadata, symlinking, and even Git version control. Not to mention it’s lightweight, pretty fast, and comes in one singular binary file. </p>
<p>This post shows how to install Exa on Debian/Ubuntu and Arch Linux but is primarily for the former. I’m also providing a few aliases you can use to make it more familiar and easier to transition to Exa — should you decide to do so. </p>
<a id="more"></a>
<hr>
<h1 id="What’s-on-Offer"><a href="#What’s-on-Offer" class="headerlink" title="What’s on Offer"></a>What’s on Offer</h1><p>The image at the start of this post shows what Exa looks like, even with minimal to no configuration. As long as you have colour support for your terminal/terminal emulator, all you need to do is install the program and decide which ‘ls-like’ options you want to make use of to display file-system objects. </p>
<p>The main advantages or “features” that Exa offers over the longstanding <code>ls</code> program are conferred best in these descriptions, <a href="https://the.exa.website/" target="_blank" rel="external">taken from the website</a>:</p>
<p><img src="https://i.gyazo.com/f9454f36a26d7bb1469bdff9b7d8e121.png" alt="Features Screenshot"></p>
<p>There are a fair few other plus points not encapsulated here, but hopefully this gives you an impression of how Exa works and appears visually, and hopefully even the incentive the try it out.  </p>
<hr>
<h1 id="1-—-How-to-Install-Exa"><a href="#1-—-How-to-Install-Exa" class="headerlink" title="1 — How to Install Exa"></a>1 — How to Install Exa</h1><p>There are three methods covered: Debian and Ubuntu based binary installation, Arch Linux package installation incl. a helper recommendation, and then a walk-through for the native ‘Rust/Cargo’ package manger. </p>
<p>Methods not included are <a href="https://the.exa.website/install/source" target="_blank" rel="external">compiling from source using the Git repository</a> and the various <a href="https://the.exa.website/install/linux" target="_blank" rel="external">other OS package managers in use like Fedora, Gentoo, OpenSUSE, etc.</a> </p>
<h2 id="a-—-Debian-Ubuntu"><a href="#a-—-Debian-Ubuntu" class="headerlink" title="a) — Debian/Ubuntu"></a>a) — Debian/Ubuntu</h2><blockquote>
<p><strong>Note:</strong> “Support for more package managers (including .debs and Snaps) is coming soon!”</p>
</blockquote>
<p>There’s no official package manager support in this case, so the method here in this section is mostly manual. It’s probably the easiest and quickest in the circumstance. </p>
<p>Should this option not appeal to your sensibilities try the ‘Rust/Cargo’ route lower down instead. </p>
<p>Start off by making your user’s home directory the active directory. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/ogham/exa/releases" target="_blank" rel="external">Grab the latest version of the Exa binary from GitHub</a>, the numbers in the link below may differ as newer versions are released, so you may want to update the numbers and or filename below.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/ogham/exa/releases/download/v0.8.0/exa-linux-x86_64-0.8.0.zip</span><br></pre></td></tr></table></figure>
<p>Install the <code>unzip</code> program if you don’t have it already. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install unzip</span><br></pre></td></tr></table></figure>
<p>Unzip the downloaded compressed file (remember your filename may differ in the next command).  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip exa-linux-x86_64-0.8.0.zip</span><br></pre></td></tr></table></figure>
<p>Place this new binary file into an appropriate system location e.g. <code>/usr/local/bin/</code>. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv exa-linux-x86_64 /usr/<span class="built_in">local</span>/bin/exa</span><br></pre></td></tr></table></figure>
<p>Remove the zipped archive file we downloaded as it’s from here on largely redundant. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm exa-linux-x86_64-0.8.0.zip</span><br></pre></td></tr></table></figure>
<p>Exa will run and work as intended now. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exa --long --header</span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/454cb79f601d4e187b3d2ccce2308f68.png" alt="Exa Long &amp; Header"></p>
<p>Due to the fact we’re doing this manually it’s necessary to add the <em>manpage</em> for Exa too, which is definitely worth the extra effort. </p>
<p>Acquire the manpage in question.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://raw.githubusercontent.com/ogham/exa/master/contrib/man/exa.1</span><br></pre></td></tr></table></figure>
<p>Move the manpage file into the system directory for application manpages. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv exa.1 /usr/share/man/man1/</span><br></pre></td></tr></table></figure>
<p>See the manpage and verify it’s accessible like you would normally:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man exa</span><br></pre></td></tr></table></figure>
<p>We’re all done! </p>
<p>Examine the information in this manual to your heart’s content before jumping down to section <strong>2 — Installing Exa Bash Auto-completion</strong>.</p>
<h2 id="b-—-Arch-Linux"><a href="#b-—-Arch-Linux" class="headerlink" title="b) — Arch Linux"></a>b) — Arch Linux</h2><p>This is simpler than some of the other options as it’s available through ‘Pacman’.</p>
<p>Here it is on the Arch User Repository if you want to take a look at it:</p>
<blockquote>
<p><a href="https://www.archlinux.org/packages/community/x86_64/exa/" target="_blank" rel="external">Arch User Repository (AUR) - Exa Package</a></p>
</blockquote>
<p>Ensure your package database indexes are synced and up to date.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -Syy</span><br></pre></td></tr></table></figure>
<p>Then update the actual system package repositories. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -Syu</span><br></pre></td></tr></table></figure>
<p>Now download and install the <code>exa</code> package alongside all of its required dependencies. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S exa</span><br></pre></td></tr></table></figure>
<p>Exa will run and work as intended now. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exa --long --header</span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/454cb79f601d4e187b3d2ccce2308f68.png" alt="Exa Long &amp; Header"></p>
<p>For anyone interested in using an <em>AUR helper</em> in place of the regular <code>pacman</code>. I’d recommend <a href="https://github.com/trizen/trizen" target="_blank" rel="external">Trizen</a> as a popular lightweight solution.  </p>
<p> Jump down to section <strong>“2 — Installing Exa Bash Auto-completion”</strong>.</p>
<h2 id="c-—-Cargo-Package-Installation"><a href="#c-—-Cargo-Package-Installation" class="headerlink" title="c) — Cargo Package Installation"></a>c) — Cargo Package Installation</h2><p>Start by adding <a href="https://doc.rust-lang.org/cargo/getting-started/installation.html" target="_blank" rel="external"><em>Rust</em></a> and its libraries to your system; the programming language Exa’s written in. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="_">-s</span>Sf https://static.rust-lang.org/rustup.sh | sh</span><br></pre></td></tr></table></figure>
<p>If all goes well (as it should) you’ll receive this confirmation output:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rust is ready to roll.</span><br></pre></td></tr></table></figure>
<p>Bring in the following packages if they’re not already present. </p>
<p>“Cargo” — Rust’s package manager — needs them to successfully compile and install Exa. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential cmake zlib1g-dev</span><br></pre></td></tr></table></figure>
<p>It’s now safe to actually install Exa with <code>cargo</code>. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cargo install exa</span><br></pre></td></tr></table></figure>
<p>In the event of any errors not anticipated here, check the Cargo installation output on your own setup and download/compile any missing packages before running the previous command again.</p>
<blockquote>
<p><strong>Note:</strong> Appending <code>--verbose</code> to <code>cargo install exa</code> reveals compilation issues in more detail. </p>
</blockquote>
<p>Be aware of this portion of the output messaging, after a successful installation:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: be sure to add /home/scarlz/.cargo/bin to your PATH to be able to run the installed binaries</span><br></pre></td></tr></table></figure>
<p>Let’s do this now so we can access and run Exa properly as your Linux user:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.profile</span><br></pre></td></tr></table></figure>
<p>Add this entire new block of code to the bottom of the file:</p>
<figure class="highlight bash"><figcaption><span>~/.profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set PATH so it includes user's private cargo bin if it exists</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="_">-d</span> <span class="string">"<span class="variable">$HOME</span>/.cargo/bin"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    PATH=<span class="string">"<span class="variable">$HOME</span>/.cargo/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>Save the new additions and exit out of the file. </p>
<p>Once you start a new shell session the Exa binary is now included in your system’s <code>$PATH</code> variable. Meaning Exa can be run from anywhere in the file-system as this user. </p>
<p>Do this now by running <code>source ~./profile</code> or alternatively by opening a new terminal.</p>
<p> Exa will run and work as intended from here onward: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exa --long --header</span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/454cb79f601d4e187b3d2ccce2308f68.png" alt="Exa Long &amp; Header"></p>
<p>Move straight on to the next section. </p>
<hr>
<h1 id="2-—-Installing-Exa-Bash-Auto-completion"><a href="#2-—-Installing-Exa-Bash-Auto-completion" class="headerlink" title="2 — Installing Exa Bash Auto-completion"></a>2 — Installing Exa Bash Auto-completion</h1><p>Bash completion itself should be already in place on most Linux systems but if not can be found (on Debian/Ubuntu) by installing this aptly named package.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install bash-completion</span><br></pre></td></tr></table></figure>
<p>All that’s required is to download and place the Exa auto-completion file into the global <code>/etc/bash_completion.d</code> directory:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget https://raw.githubusercontent.com/ogham/exa/master/contrib/completions.bash -O /etc/bash_completion.d/exa-completions.bash</span><br></pre></td></tr></table></figure>
<p>For other shells there’s <a href="https://the.exa.website/install/linux" target="_blank" rel="external">some terse information on where to place autocompletion on the Exa site</a> that may help (lower down on that page). </p>
<hr>
<h1 id="3-—-Adapting-Shell-Aliases-for-Exa"><a href="#3-—-Adapting-Shell-Aliases-for-Exa" class="headerlink" title="3 — Adapting Shell Aliases for Exa"></a>3 — Adapting Shell Aliases for Exa</h1><p>If like me you’re attached to <code>ls</code> then my suggestion would be the following approach. Which is to convert your existing aliases to Exa equivalents whilst retaining the use of “ls” and its combinations of shorthand alias options e.g. <code>l</code>, <code>la</code>, <code>ll</code>, etc.</p>
<p>The most basic example to use would be <code>ls</code>, except aliased to <code>exa</code>, to show a basic output of existing files in the current directory. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> ls=<span class="string">"exa"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/4e595bcee17d04ca2b576dd0e40a245d.png" alt="ls"></p>
<p>To show hidden files and <em>dotfiles</em> in the same directory — and this is where these further <code>ls</code> aliasing conventions come in — duse Exa with the <code>-a</code> switch, plus my original <code>l</code> alias.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> l=<span class="string">"exa -a"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/b75b2a5fed98d9bb6848fd95e4d0ed19.png" alt="l"></p>
<p>This one uses <code>-lgh</code> from Exa and my old <code>ll</code> alias from <code>ls</code> to show (in a longer listing format) each file’s group complete with some nice headers for the columns. As with the images from the start of this post. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> ll=<span class="string">"exa -lgh"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/49334155f7091ef0bd6bdb3217c56185.png" alt="ll"></p>
<p>The same again applies here except it includes hidden files and ‘dotfiles’. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> la=<span class="string">"exa -lagh"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/05497d6b31d001c3160e8646fb2b6a79.png" alt="la"></p>
<p><code>-T</code> produces a ‘tree’ style output of the file-system, in the same way the <code>tree</code> program does; except it’s not required as a package.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> lt=<span class="string">"exa -T"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/145c3801db79b9fe116e0a5870b18782.png" alt="lt"></p>
<p>A final example adds a column to the listing output shown earlier, which displays the file’s current version control status (see column) in a Git repository — assuming it’s tracked by Git and Git is thereby installed.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> lg=<span class="string">"exa -lagh --git"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.gyazo.com/01d9c72885202958e0fdbad6f86a42a8.png" alt="lg"></p>
<p>Consult the manual for Exa to see how the corresponding flags and options function, so you can create your own. <a href="https://the.exa.website/docs/command-line-options" target="_blank" rel="external">This page on the website is also very useful for such purpose.</a></p>
<p>Lastly, these aliases for Exa traditionally go together in your <code>.alias</code> or <code>.bashrc</code> files to make them persistent and permanent between sessions (most will already know this!). </p>
<p>Usually in a manner similar to:</p>
<figure class="highlight bash"><figcaption><span>~/.alias</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exa aliasing</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">"exa"</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">"exa -a"</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">"exa -lgh"</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">"exa -lagh"</span></span><br><span class="line"><span class="built_in">alias</span> lt=<span class="string">"exa -T"</span></span><br><span class="line"><span class="built_in">alias</span> lg=<span class="string">"exa -lagh --git"</span></span><br></pre></td></tr></table></figure>
<hr>
<p>Learning the wider range of command line options in Exa could be the next step to take, or even tweaking the colours through <a href="https://the.exa.website/docs/colour-themes" target="_blank" rel="external">global environment variables</a> might be appealing. Either way what’s covered here is enough to at least get yourself started. </p>
<p>Any and all missing information you may need is indexed on <a href="https://the.exa.website/introduction" target="_blank" rel="external">the official website’s documentation.</a></p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://the.exa.website/" target="_blank" rel="external">The Official Exa Website</a></li>
<li><a href="https://www.rust-lang.org/en-US/install.html" target="_blank" rel="external">Official Rust Website - Install Rust</a></li>
<li><a href="https://doc.rust-lang.org/cargo/getting-started/installation.html" target="_blank" rel="external">The Cargo Book - Installation</a></li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.gyazo.com/599eceada0e2a52d18a59b2cc3707798.png&quot; alt=&quot;Exa Screenshot&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Everyone’s familiar with  &lt;code&gt;ls&lt;/code&gt; on the commandline — aka &lt;em&gt;“list”&lt;/em&gt; — but have you heard of &lt;a href=&quot;https://github.com/ogham/exa&quot;&gt;‘Exa’&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Exa is a modern successor to the list command, designed with modernity in mind and an emphasis on better defaults, native colour support, and awareness of things like metadata, symlinking, and even Git version control. Not to mention it’s lightweight, pretty fast, and comes in one singular binary file. &lt;/p&gt;
&lt;p&gt;This post shows how to install Exa on Debian/Ubuntu and Arch Linux but is primarily for the former. I’m also providing a few aliases you can use to make it more familiar and easier to transition to Exa — should you decide to do so. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Shell" scheme="http://www.tricksofthetrades.net/tags/Shell/"/>
    
      <category term="Linux" scheme="http://www.tricksofthetrades.net/tags/Linux/"/>
    
      <category term="Bash" scheme="http://www.tricksofthetrades.net/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>Installing Fail2ban with an Ansible Role on Ubuntu 18.04 (Bionic Beaver)</title>
    <link href="http://www.tricksofthetrades.net/2018/05/23/ansible-fail2ban-role/"/>
    <id>http://www.tricksofthetrades.net/2018/05/23/ansible-fail2ban-role/</id>
    <published>2018-05-22T23:00:00.000Z</published>
    <updated>2018-05-23T18:30:11.282Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/klPwJ5E.png" alt="Fail2ban Logo with Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>The Ansible role in question comes from Ansible Galaxy. It’s linked here below, where you can read about it more if needs be:</p>
<blockquote>
<p><a href="https://galaxy.ansible.com/tersmitten/fail2ban/" target="_blank" rel="external">https://galaxy.ansible.com/tersmitten/fail2ban/</a></p>
</blockquote>
<p>Here’s my method for making use of the role, which is within the context of an Ansible project that already automates the other aspects of setting up a server. It’s necessary to have a provisioning playbook already in place, so you can incorporate the role shown in this post into the main project.  </p>
<blockquote>
<p><a href="https://www.tricksofthetrades.net/2017/08/21/ansible-playbook-server-provisioning/">If this idea of “context” doesn’t make much sense then check out this other post I have on provisioning a server with Ansible for Debian 8 (Jessie).</a></p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="1-–-Acquiring-the-Files"><a href="#1-–-Acquiring-the-Files" class="headerlink" title="1 – Acquiring the Files"></a>1 – Acquiring the Files</h2><p>Starting from within the <em>root</em> directory of your own Ansible server <em>“provisioning”</em> project (most likely a version controlled project). </p>
<p>Clone the <code>ansible-fail2ban</code> repo from GitHub into your project:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Oefenweb/ansible-fail2ban.git roles/fail2ban</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Alternatively you can use <code>ansible-galaxy install --roles-path roles/ tersmitten.fail2ban</code> if you don’t mind the directory name for the role being <code>tersmitten.fail2ban</code> </p>
</blockquote>
<p>Include the new role in your <strong>main</strong> playbook file’s list of roles to be performed on the host(s).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim playbook.yml</span><br></pre></td></tr></table></figure>
<p>Such as in this generic bare bones example here:</p>
<figure class="highlight yml"><figcaption><span>playbook.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">provision</span> <span class="string">ubuntu</span> <span class="number">18.04</span> <span class="string">(bionic</span> <span class="string">beaver)</span> <span class="string">servers</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">  roles:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">base</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">users</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ufw</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ntp</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> It does need to match the actual role directory name, so change this entry here to <code>tersmitten.fail2ban</code> if you instead used the Ansible galaxy install command earlier.</p>
</blockquote>
<hr>
<h2 id="2-–-Editing-the-Default-Ansible-Variables"><a href="#2-–-Editing-the-Default-Ansible-Variables" class="headerlink" title="2 – Editing the Default Ansible Variables"></a>2 – Editing the Default Ansible Variables</h2><p>Several default values for many Fail2ban configuration directives are already set in the role’s <code>defaults</code> directory. </p>
<p>Edit them as normal with your preferred fail2ban configuration values.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim roles/fail2ban/defaults/main.yml</span><br></pre></td></tr></table></figure>
<p>These are the general contents including one or two additions, removals, and changes of my own:</p>
<figure class="highlight yml"><figcaption><span>defaults/main.yml </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># defaults file for fail2ban</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">fail2ban_loglevel:</span> <span class="string">'INFO'</span> </span><br><span class="line"><span class="attr">fail2ban_logtarget:</span> <span class="string">/var/log/fail2ban.log</span></span><br><span class="line"><span class="attr">fail2ban_syslog_target:</span> <span class="string">/var/log/fail2ban.log</span></span><br><span class="line"><span class="attr">fail2ban_syslog_facility:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">fail2ban_socket:</span> <span class="string">/var/run/fail2ban/fail2ban.sock</span></span><br><span class="line"><span class="attr">fail2ban_pidfile:</span> <span class="string">/var/run/fail2ban/fail2ban.pid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fail2ban_sendername:</span> <span class="string">'Fail2ban'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fail2ban_ignoreips:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">/8</span></span><br><span class="line"><span class="attr">fail2ban_bantime:</span> <span class="number">3600</span></span><br><span class="line"><span class="attr">fail2ban_maxretry:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">fail2ban_findtime:</span> <span class="number">600</span></span><br><span class="line"><span class="attr">fail2ban_backend:</span> <span class="string">auto</span></span><br><span class="line"><span class="attr">fail2ban_destemail:</span> <span class="string">root@localhost</span></span><br><span class="line"><span class="attr">fail2ban_banaction:</span> <span class="string">ufw.conf</span></span><br><span class="line"><span class="attr">fail2ban_mta:</span> <span class="string">sendmail</span></span><br><span class="line"><span class="attr">fail2ban_protocol:</span> <span class="string">tcp</span></span><br><span class="line"><span class="attr">fail2ban_chain:</span> <span class="string">INPUT</span></span><br><span class="line"><span class="attr">fail2ban_action:</span> <span class="string">'%(action_)s'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fail2ban_services:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">sshd</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">    maxretry:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    bantime:</span> <span class="bullet">-1</span></span><br></pre></td></tr></table></figure>
<p>These Ansible variables are applied onto the target host through two Jinja templates. Variables here are split into one of these two files (see the template files themselves for specifics). New variables you wish to incorporate have to be added to <code>defaults/main.yml</code> <strong>and</strong> the relevant Jinja template file if not present.  </p>
<blockquote>
<p><a href="https://github.com/Oefenweb/ansible-fail2ban#variables" target="_blank" rel="external">Here’s the reference for the Ansible variables on offer, used by this role.</a> </p>
</blockquote>
<p>You could also override them in the <code>vars/main.yml</code> file too, if that seems more appealing, but do not define duplicate variables.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim roles/fail2ban/vars/main.yml</span><br></pre></td></tr></table></figure>
<p>This is the same common SSH daemon jail I added earlier, but in the alternative file:</p>
<figure class="highlight yml"><figcaption><span>roles/fail2ban/vars/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vars file for fail2ban</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">fail2ban_dependencies:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">fail2ban</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fail2ban_services:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">sshd</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">    maxretry:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    bantime:</span> <span class="bullet">-1</span></span><br></pre></td></tr></table></figure>
<p>Remember not to duplicate variables between these two files!</p>
<p>So regardless of the file you choose, new jails must be included as part of the one <code>fail2ban_services:</code> variable.</p>
<p>For example, adding a second Nginx jail:</p>
<figure class="highlight yml"><figcaption><span>example.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fail2ban_services:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">sshd</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">    maxretry:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    bantime:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">nginx-http-auth</span></span><br><span class="line"><span class="attr">    filter:</span> <span class="string">nginx-http-auth</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">http,https</span></span><br><span class="line"><span class="attr">    logpath:</span> <span class="string">/var/log/nginx/access.log</span></span><br></pre></td></tr></table></figure>
<p>The next section glosses over how the tasks of the role actually work. </p>
<hr>
<h2 id="3-–-Examining-the-Role’s-Tasks"><a href="#3-–-Examining-the-Role’s-Tasks" class="headerlink" title="3 – Examining the Role’s Tasks"></a>3 – Examining the Role’s Tasks</h2><p>Taking a glance at the <code>tasks/main.yml</code> is worthwhile. It explains how the variables from the previous section are implemented, alongside the Jinja file templates, that are to be processed and copied across. </p>
<p>The first block of YAML is a task that creates/copies the local version of <strong>the main Fail2ban configuration file,</strong> onto the target. </p>
<figure class="highlight yml"><figcaption><span>tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">update</span> <span class="string">configuration</span> <span class="string">file</span> <span class="bullet">-</span> <span class="string">/etc/fail2ban/fail2ban.local</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    src:</span> <span class="string">etc/fail2ban/fail2ban.local.j2</span></span><br><span class="line"><span class="attr">    dest:</span> <span class="string">/etc/fail2ban/fail2ban.local</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">configuration</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban-configuration</span></span><br></pre></td></tr></table></figure>
<p>The second block of YAML is a task that creates/copies the local version of <strong>the Fail2ban jail configuration file,</strong> again onto the target. </p>
<figure class="highlight yml"><figcaption><span>tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">update</span> <span class="string">configuration</span> <span class="string">file</span> <span class="bullet">-</span> <span class="string">/etc/fail2ban/jail.local</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    src:</span> <span class="string">etc/fail2ban/jail.local.j2</span></span><br><span class="line"><span class="attr">    dest:</span> <span class="string">/etc/fail2ban/jail.local</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">configuration</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban-configuration</span></span><br></pre></td></tr></table></figure>
<p>The third task block only runs when the <code>fail2ban_filterd_path</code> variable is set. Which assigns the path to the directory containing custom “filter” files, that you need copying across. </p>
<figure class="highlight yml"><figcaption><span>tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">copy</span> <span class="string">filters</span></span><br><span class="line"><span class="attr">  copy:</span></span><br><span class="line"><span class="attr">    src:</span> <span class="string">"<span class="template-variable">&#123;&#123; fail2ban_filterd_path &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    dest:</span> <span class="string">/etc/fail2ban/filter.d/</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">fail2ban_filterd_path</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">configuration</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban-filters</span></span><br></pre></td></tr></table></figure>
<p>The next task block only runs when the <code>fail2ban_actiond_path</code> variable is set. Which assigns the local path to the directory containing custom “actions” files, that you need copying across. </p>
<figure class="highlight yml"><figcaption><span>tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">copy</span> <span class="string">actions</span></span><br><span class="line"><span class="attr">  copy:</span></span><br><span class="line"><span class="attr">    src:</span> <span class="string">"<span class="template-variable">&#123;&#123; fail2ban_actiond_path &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    dest:</span> <span class="string">/etc/fail2ban/action.d/</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">fail2ban_actiond_path</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">configuration</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban-actions</span></span><br></pre></td></tr></table></figure>
<p>And the final task displayed here runs when the <code>fail2ban_actiond_jail</code> variable is set. Similarily this defines the local path to the directory containing custom “jail” configs. </p>
<figure class="highlight yml"><figcaption><span>tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">copy</span> <span class="string">jails</span></span><br><span class="line"><span class="attr">  copy:</span></span><br><span class="line"><span class="attr">    src:</span> <span class="string">"<span class="template-variable">&#123;&#123; fail2ban_jaild_path &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    dest:</span> <span class="string">/etc/fail2ban/jail.d/</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">fail2ban_jaild_path</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">configuration</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban-jails</span></span><br></pre></td></tr></table></figure>
<p>Hopefully this all makes sense, explaining how the role is written and used.</p>
<hr>
<h2 id="4-–-Testing-and-Running-the-Playbook-Role"><a href="#4-–-Testing-and-Running-the-Playbook-Role" class="headerlink" title="4 – Testing and Running the Playbook Role"></a>4 – Testing and Running the Playbook Role</h2><p>After all of this is in place, test the new role by running your playbook. </p>
<p>This could be either as part of a Vagrant VM, Docker container, or on a live host. </p>
<p>From a live host’s perspective, on a blank Ubuntu 18.04 Bionic server, and using the global <code>hosts</code> file with all the hosts defined beforehand, un a syntax check on the playbook to ensure it’s all legit.  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook playbook.yml --syntax-check</span><br></pre></td></tr></table></figure>
<p>No errors in terms of the written contents means you’re good to actually run the playbook. </p>
<p>But wait, in order to examine how the role’s tasks play out (yay puns), without actually implementing anything remotely, there’s the <code>--check</code> option. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook <span class="_">-l</span> <span class="built_in">test</span>-host -u root playbook.yml --check</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Some modules cannot properly complete their operations in “–check” mode so may  fail (e.g. the user module when attempting to create encrypted system passwords for users).</p>
</blockquote>
<p>This is optional but a convenient way of seeing the results before actually committing, so to speak.</p>
<p>Now we’re certain everything’s as it should be, here’s the command to directly run the playbook, and in turn the Fail2ban installation role. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook <span class="_">-l</span> <span class="built_in">test</span>-host -u root playbook.yml</span><br></pre></td></tr></table></figure>
<p>A bonus idea is to <em>“tag”</em> your roles in the main playbook using this form of syntax on line 10:</p>
<figure class="highlight yml"><figcaption><span>playbook.yml </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">provision</span> <span class="string">ubuntu</span> <span class="number">18.04</span> <span class="string">(bionic</span> <span class="string">beaver)</span> <span class="string">droplets</span> </span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">  roles:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fixes</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">base</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">users</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ufw</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;role:</span> <span class="string">'fail2ban'</span><span class="string">,</span> <span class="attr">tags:</span> <span class="string">'fail2ban'</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ntp</span></span><br></pre></td></tr></table></figure>
<p>Which allows you to run <strong>only</strong> this role at playbook runtime, excluding the other listed roles. </p>
<p>So once tagged (in regards to the above), execute the playbook and specify the “fail2ban” tagging:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook <span class="_">-l</span> <span class="built_in">test</span>-host -u root playbook.yml --tags <span class="string">"fail2ban"</span> --check</span><br></pre></td></tr></table></figure>
<p>This is once again useful for selective testing purposes.  </p>
<blockquote>
<p><strong>Note:</strong> From what I can tell there’s no inbuilt function in Ansible to run select individual roles in a playbook, other than this <code>tags:</code> directive, unfortunately.</p>
</blockquote>
<p>Check the two files in the remote server’s <code>/etc/fail2ban</code> to see the applied directives from our <code>defaults/main.yml</code> file. This is the best way of confirming the changes we wanted are now in effect; Ansible does confirm and show changes during it’s task execution though!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo less /etc/fail2ban/jail.local</span><br><span class="line">$ sudo less /etc/fail2ban/fail2ban.local</span><br></pre></td></tr></table></figure>
<p>Another brief post I may publish in the future, will go into detail on some further examples of jail configs, for various services. </p>
<p>Thanks!</p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://blog.ssdnodes.com/blog/tutorial-a-more-secure-ansible-playbook-part-2/" target="_blank" rel="external">ServerWise – Tutorial: A More Secure Ansible Playbook, Part 2</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_checkmode.html" target="_blank" rel="external">Official Ansible Documentation – Check Mode (“Dry Run”)</a></li>
<li><a href="https://stackoverflow.com/questions/38350674/ansible-can-i-execute-role-from-command-line#38384205" target="_blank" rel="external">Stack Overflow – Ansible: Can I execute a role from the command line?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/klPwJ5E.png&quot; alt=&quot;Fail2ban Logo with Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;The Ansible role in question comes from Ansible Galaxy. It’s linked here below, where you can read about it more if needs be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://galaxy.ansible.com/tersmitten/fail2ban/&quot;&gt;https://galaxy.ansible.com/tersmitten/fail2ban/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s my method for making use of the role, which is within the context of an Ansible project that already automates the other aspects of setting up a server. It’s necessary to have a provisioning playbook already in place, so you can incorporate the role shown in this post into the main project.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tricksofthetrades.net/2017/08/21/ansible-playbook-server-provisioning/&quot;&gt;If this idea of “context” doesn’t make much sense then check out this other post I have on provisioning a server with Ansible for Debian 8 (Jessie).&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="Security" scheme="http://www.tricksofthetrades.net/tags/Security/"/>
    
      <category term="Ubuntu" scheme="http://www.tricksofthetrades.net/tags/Ubuntu/"/>
    
      <category term="Bionic" scheme="http://www.tricksofthetrades.net/tags/Bionic/"/>
    
  </entry>
  
  <entry>
    <title>Installing Fail2ban with Ansible on Ubuntu 18.04 (Bionic Beaver)</title>
    <link href="http://www.tricksofthetrades.net/2018/05/19/ansible-fail2ban-playbook/"/>
    <id>http://www.tricksofthetrades.net/2018/05/19/ansible-fail2ban-playbook/</id>
    <published>2018-05-18T23:00:00.000Z</published>
    <updated>2018-05-31T12:11:25.424Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/klPwJ5E.png" alt="Fail2ban Logo with Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>This is a very short post covering a rudimentary Ansible playbook (if you can even call it one) that contains tasks for installing Fail2ban in a straightforward manner. It’s intended as a follow on from the manual set of instructions/commands most people are familiar with, which I covered in this other post: </p>
<blockquote>
<p><a href="https://www.tricksofthetrades.net/2018/05/18/fail2ban-installing-bionic/">Installing Fail2ban on Ubuntu 18.04 (Bionic Beaver)</a></p>
</blockquote>
<p>At the end I’m linking to a third and final post which goes into detail on a more extensive solution to installing Fail2ban, as part of an Ansible <em>provisioning</em> project. It uses an Ansible role rather than a standalone playbook. </p>
<a id="more"></a>
<hr>
<h1 id="Installing-Fail2ban-with-Ansible"><a href="#Installing-Fail2ban-with-Ansible" class="headerlink" title="Installing Fail2ban with Ansible"></a>Installing Fail2ban with Ansible</h1><p>This is probably the most simple and obvious solution outside of manually installing. It exists in the form of a single playbook and template file. </p>
<p>Somewhere suitable (e.g. in version control) create the main playbook file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim fail2ban-playbook.yml</span><br></pre></td></tr></table></figure>
<p>Enter in the following playbook contents:</p>
<figure class="highlight yml"><figcaption><span>fail2ban-playbook.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">--</span> </span><br><span class="line"><span class="attr">- name:</span> <span class="string">installs</span> <span class="string">fail2ban</span> <span class="string">on</span> <span class="string">ansible</span> <span class="string">hosts</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">fail2ban-hosts</span></span><br><span class="line"><span class="attr">  become:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">install</span> <span class="string">apt</span> <span class="string">fail2ban</span> <span class="string">packages</span></span><br><span class="line"><span class="attr">    apt:</span> </span><br><span class="line"><span class="attr">      name:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span>   </span><br><span class="line"><span class="attr">      state:</span> <span class="string">latest</span></span><br><span class="line"><span class="attr">      update_cache:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">      cache_valid_time:</span> <span class="number">3600</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">sendmail</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">override</span> <span class="string">the</span> <span class="string">basic</span> <span class="string">fail2ban</span> <span class="string">configuration</span> <span class="string">with</span> <span class="string">.local</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    copy:</span></span><br><span class="line"><span class="attr">      src:</span> <span class="string">jail.local.j2</span></span><br><span class="line"><span class="attr">      dest:</span> <span class="string">/etc/fail2ban/jail.local</span></span><br><span class="line"><span class="attr">      owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      mode:</span> <span class="number">0644</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> <a href="https://gist.github.com/5car1z/76dd1e48f9b16dbd2fb370bba1e2d393" target="_blank" rel="external">Here’s the same contents as a Gist.</a></p>
</blockquote>
<p>The first task updates the package manager cache (if it has not been updated within a set time period) and then installs the <code>fail2ban</code> plus <code>sendmail</code> packages. </p>
<p>The second copies across a local configuration file for Fail2ban, whilst giving it the necessary permissions and ownership’s. </p>
<p>Next create the previously mentioned template file (locally still of course).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim jail.local</span><br></pre></td></tr></table></figure>
<p>Add in your own Fail2ban configuration settings; these are mine for example purposes, but can be used:</p>
<figure class="highlight bash"><figcaption><span>jail.local</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line"></span><br><span class="line"><span class="comment"># email address to receive notifications.</span></span><br><span class="line">destemail = root@localhost    </span><br><span class="line"><span class="comment"># the email address from which to send emails.</span></span><br><span class="line">sender = root@&lt;fq-hostname&gt;    </span><br><span class="line"><span class="comment"># name on the notification emails.</span></span><br><span class="line">sendername = Fail2Ban    </span><br><span class="line"><span class="comment"># email transfer agent to use. </span></span><br><span class="line">mta = sendmail   </span><br><span class="line"></span><br><span class="line"><span class="comment"># see action.d/ufw.conf</span></span><br><span class="line">actionban = ufw.conf</span><br><span class="line"><span class="comment"># see action.d/ufw.conf </span></span><br><span class="line">actionunban = ufw.conf   </span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">port = ssh</span><br><span class="line">filter = sshd</span><br><span class="line"><span class="comment"># the length of time between login attempts for maxretry. </span></span><br><span class="line">findtime = 600</span><br><span class="line"><span class="comment"># attempts from a single ip before a ban is imposed.</span></span><br><span class="line">maxretry = 5</span><br><span class="line"><span class="comment"># the number of seconds that a host is banned for.</span></span><br><span class="line">bantime = 3600</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> <a href="https://gist.github.com/5car1z/9c143fd17e61d074ec95207380ba9969" target="_blank" rel="external">Here’s the same contents as a Gist.</a></p>
</blockquote>
<p>These settings assume accompanied <a href="https://www.tricksofthetrades.net/2017/02/14/installing-using-ufw/">use of UFW as a firewall on the host</a> - hence the <code>actionban</code> lines. </p>
<p>It would make sense to create a local Ansible config and local hosts file to keep everything contained to the current repo/directory. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ansible.cfg</span><br></pre></td></tr></table></figure>
<p>Point Ansible commands to use a local <code>hostfile</code> named <code>hosts</code>. </p>
<figure class="highlight yml"><figcaption><span>ansible.cfg </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[defaults]</span></span><br><span class="line"><span class="string">hostfile</span> <span class="string">=</span> <span class="string">hosts</span></span><br></pre></td></tr></table></figure>
<p>Create the local “hosts” file in turn. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim hosts</span><br></pre></td></tr></table></figure>
<p>The <code>hosts</code> file needs to then contain your target host’s details, using Ansible YAML syntax such as:</p>
<figure class="highlight yml"><figcaption><span>hosts </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[fail2ban-hosts]</span></span><br><span class="line"><span class="string">host-one</span> <span class="string">ansible_host=your.vps.ip.address</span> <span class="string">ansible_python_interpreter=/usr/bin/python3</span></span><br><span class="line"><span class="string">host-two</span> <span class="string">ansible_host=your.vps.ip.address</span> <span class="string">ansible_python_interpreter=/usr/bin/python3</span></span><br><span class="line"><span class="string">host-three</span> <span class="string">ansible_host=your.vps.ip.address</span> <span class="string">ansible_python_interpreter=/usr/bin/python3</span></span><br><span class="line"><span class="comment"># Add more hosts here as needed.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Currently Ansible uses Python 2.7 system libraries, and most Ubuntu images have Python 3.0+ installed. So this “interpreter” variable is usually necessary to access the correct libraries with Ansible.  </p>
</blockquote>
<p>Running the playbook on the remote host (or set of remote hosts) is then rather easy. </p>
<p>Make sure to include <code>-K</code> for the playbook’s <code>become:</code> password. Substitution for your own username (<code>scarlz</code> in my case) is also necessary - the user must have <em>sudo</em> privileges. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -u scarlz -K fail2ban-playbook.yml</span><br></pre></td></tr></table></figure>
<p>These few steps are for all intents and purposes everything that’s needed in a basic working install. For a less simplistic approach to installing Fail2ban, take a look at it again through the perspective of a more complex Ansible role instead:</p>
<blockquote>
<p><a href="https://www.tricksofthetrades.net/2018/05/23/ansible-fail2ban-role/">Installing Fail2ban with an Ansible Role on Ubuntu 18.04 (Bionic Beaver)</a> </p>
</blockquote>
<p>This was very short and terse due to its simplicity, but thanks for reading. </p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/26469896/how-to-install-fail2ban-using-ansible" target="_blank" rel="external">Stack Overflow – How to Install Fail2ban using Ansible</a></li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/klPwJ5E.png&quot; alt=&quot;Fail2ban Logo with Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;This is a very short post covering a rudimentary Ansible playbook (if you can even call it one) that contains tasks for installing Fail2ban in a straightforward manner. It’s intended as a follow on from the manual set of instructions/commands most people are familiar with, which I covered in this other post: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tricksofthetrades.net/2018/05/18/fail2ban-installing-bionic/&quot;&gt;Installing Fail2ban on Ubuntu 18.04 (Bionic Beaver)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the end I’m linking to a third and final post which goes into detail on a more extensive solution to installing Fail2ban, as part of an Ansible &lt;em&gt;provisioning&lt;/em&gt; project. It uses an Ansible role rather than a standalone playbook. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="Security" scheme="http://www.tricksofthetrades.net/tags/Security/"/>
    
      <category term="Ubuntu" scheme="http://www.tricksofthetrades.net/tags/Ubuntu/"/>
    
      <category term="Bionic" scheme="http://www.tricksofthetrades.net/tags/Bionic/"/>
    
  </entry>
  
  <entry>
    <title>Installing Fail2ban on Ubuntu 18.04 (Bionic Beaver)</title>
    <link href="http://www.tricksofthetrades.net/2018/05/18/fail2ban-installing-bionic/"/>
    <id>http://www.tricksofthetrades.net/2018/05/18/fail2ban-installing-bionic/</id>
    <published>2018-05-17T23:00:00.000Z</published>
    <updated>2018-05-18T16:07:34.068Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/RdP4s4d.jpg" alt="Fail2ban Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>A highly condensed set of basic commands to install Fail2ban the traditional way. These can be executed on any remote server/VPS running recent versions of Ubuntu; although the process was carried out by myself on 18.04. If you’re not familiar with Fail2ban, the start of this brief guide refers to two good resources you can read up on. One more up to date than the other.  </p>
<p>The purpose of this post is to serve as background for a follow up post which uses Ansible to install the Fail2ban package and configuration more efficiently (linked at the end). </p>
<a id="more"></a>
<hr>
<h2 id="Installing-Fail2ban"><a href="#Installing-Fail2ban" class="headerlink" title="Installing Fail2ban"></a>Installing Fail2ban</h2><p>Several of the instructions for this process are taken and adapted from an older article on DigitalOcean. They’re intended for Ubuntu 14.04 but are still overall suitable on Bionic: </p>
<blockquote>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-14-04" target="_blank" rel="external">DigitalOcean – “How To Protect SSH with Fail2Ban on Ubuntu 14.04”</a></p>
</blockquote>
<p>It might be better to read through this more up to date Linode article instead however to understand what Fail2ban is, how it works, and most importantly what different values to place into the configuration files. Otherwise this may not make complete sense before doing so. </p>
<p>It may even be more preferable to follow the Linode guide in its entirety, but that’s up to you! </p>
<p>See below: </p>
<blockquote>
<p><a href="https://www.linode.com/docs/security/using-fail2ban-for-security/" target="_blank" rel="external">Linode – “Use Fail2ban to Secure Your Server”</a></p>
</blockquote>
<p>On the remote Ubuntu server in question, update the system package index. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update -y</span><br></pre></td></tr></table></figure>
<p>Download and acquire the <code>fail2ban</code> plus <code>sendmail</code> packages. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install fail2ban sendmail</span><br></pre></td></tr></table></figure>
<p>Sendmail (if not present by default) is required for Fail2ban to generate notification emails. </p>
<p>Copy the base Fail2ban config into a new <code>jail.local</code> file, in order to begin adding in the config options we want overridden and applied:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> “Fail2ban reads <code>.conf</code> configuration files first, then <code>.local</code> files overriding any settings. Because of this, all changes to the configuration are generally done in <code>.local</code> files, leaving the <code>.conf</code> files untouched.”</p>
</blockquote>
<p>Here’s where an understanding of the configuration is very much necessary. </p>
<p>Having <a href="https://www.tricksofthetrades.net/2017/02/14/installing-using-ufw/">a working firewall such as UFW on Ubuntu</a> is also a background assumption I’m working with here, as the two can work together, and a firewall’s kinda mandatory anyway of course.</p>
<p>Open the newly copied <code>jail.local</code> file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/fail2ban/jail.local</span><br></pre></td></tr></table></figure>
<p>Add in your sensible Fail2ban configuration blocks and values now; this is my example file contents, should you want to make use of them:</p>
<figure class="highlight bash"><figcaption><span>/etc/fail2ban/jail.local</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line"></span><br><span class="line"><span class="comment"># email address to receive notifications.</span></span><br><span class="line">destemail = root@localhost    </span><br><span class="line"><span class="comment"># the email address from which to send emails.</span></span><br><span class="line">sender = root@&lt;fq-hostname&gt;    </span><br><span class="line"><span class="comment"># name on the notification emails.</span></span><br><span class="line">sendername = Fail2Ban    </span><br><span class="line"><span class="comment"># email transfer agent to use. </span></span><br><span class="line">mta = sendmail   </span><br><span class="line"></span><br><span class="line"><span class="comment"># see action.d/ufw.conf</span></span><br><span class="line">actionban = ufw.conf</span><br><span class="line"><span class="comment"># see action.d/ufw.conf </span></span><br><span class="line">actionunban = ufw.conf   </span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">port = ssh</span><br><span class="line">filter = sshd</span><br><span class="line"><span class="comment"># the length of time between login attempts for maxretry. </span></span><br><span class="line">findtime = 600</span><br><span class="line"><span class="comment"># attempts from a single ip before a ban is imposed.</span></span><br><span class="line">maxretry = 5</span><br><span class="line"><span class="comment"># the number of seconds that a host is banned for.</span></span><br><span class="line">bantime = 3600</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> “A host is banned if it has generated “maxretry” during the last “findtime”.”</p>
</blockquote>
<p>Lastly here <code>enable</code> the Fail2ban service on system startup.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl service <span class="built_in">enable</span> fail2ban</span><br></pre></td></tr></table></figure>
<p>Then <code>start</code> the service so it’s currently active.   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl service start fail2ban</span><br></pre></td></tr></table></figure>
<p>Fail2ban is now up and running - assuming you entered proper configuration options and have no syntax errors.  </p>
<p>As an alternate to using Systemd, restarting the entire Fail2ban server reports any runtime errors, should there be any issue, so…</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fail2ban-client restart</span><br></pre></td></tr></table></figure>
<p>Fix any reported problems in the output, and then restart again. </p>
<p>There’s also a command to confirm the status of the server/jails. </p>
<p>Try it out: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fail2ban-client status</span><br></pre></td></tr></table></figure>
<p>More specific information about the <code>sshd</code> jail we created in the config file is retrievable with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fail2ban-client status sshd</span><br></pre></td></tr></table></figure>
<p>Many more useful commands for you to explore are available, indexed at the following wiki:</p>
<blockquote>
<p><a href="https://www.fail2ban.org/wiki/index.php/Commands" target="_blank" rel="external">Fail2ban Client CLI Commands</a></p>
</blockquote>
<p>Fail2ban is now installed, running, and working! </p>
<p>Add more jails and actions for other services to expand upon it.  </p>
<p>The post leading on from this one achieves the same end result but using Ansible configuration management to do the job:</p>
<blockquote>
<p><a href="https://www.tricksofthetrades.net/2018/05/19/ansible-fail2ban-playbook/">“Installing Fail2ban with Ansible on Ubuntu 18.04 (Bionic Beaver)”</a> </p>
</blockquote>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://www.fail2ban.org/wiki/index.php/Main_Page" target="_blank" rel="external">Fail2ban Wiki</a></li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RdP4s4d.jpg&quot; alt=&quot;Fail2ban Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;A highly condensed set of basic commands to install Fail2ban the traditional way. These can be executed on any remote server/VPS running recent versions of Ubuntu; although the process was carried out by myself on 18.04. If you’re not familiar with Fail2ban, the start of this brief guide refers to two good resources you can read up on. One more up to date than the other.  &lt;/p&gt;
&lt;p&gt;The purpose of this post is to serve as background for a follow up post which uses Ansible to install the Fail2ban package and configuration more efficiently (linked at the end). &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Security" scheme="http://www.tricksofthetrades.net/tags/Security/"/>
    
      <category term="Ubuntu" scheme="http://www.tricksofthetrades.net/tags/Ubuntu/"/>
    
      <category term="Bionic" scheme="http://www.tricksofthetrades.net/tags/Bionic/"/>
    
  </entry>
  
  <entry>
    <title>Deploying Meltdown and Spectre Fixes with Ansible on Linux Hosts</title>
    <link href="http://www.tricksofthetrades.net/2018/02/03/spectre-meltdown-ansible/"/>
    <id>http://www.tricksofthetrades.net/2018/02/03/spectre-meltdown-ansible/</id>
    <published>2018-02-03T00:00:00.000Z</published>
    <updated>2018-02-04T16:19:11.165Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/TEnht2h.jpg" alt="Spectre &amp; Meltdown Logos"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>As it stands the current “fixes” for <a href="https://meltdownattack.com/" target="_blank" rel="external">Meltdown and Spectre</a> mainly involve updating and upgrading hosts to include their patched kernel upgrades. When it comes to applying the updates to multiple Linux servers, one approach is to use the playbook/plays in this “lockdown” repo from Ansible. </p>
<blockquote>
<p><a href="https://github.com/ansible/ansible-lockdown/blob/master/meltdown-spectre-linux.yml" target="_blank" rel="external">https://github.com/ansible/ansible-lockdown/blob/master/meltdown-spectre-linux.yml</a></p>
</blockquote>
<p>This is how the YAML works to patch the aforementioned exploits. </p>
<a id="more"></a>
<hr>
<p>First off for the hosts directive, either the default <code>all</code> hosts is used or any hosts provided <code>-i</code> when running <code>ansible-playbook</code> take precedence. The tasks are to be carried out with <code>become:</code> and thereby super user privileges. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://meltdownattack.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Patch</span> <span class="string">Linux</span> <span class="string">systems</span> <span class="string">against</span> <span class="string">Meltdown</span> <span class="string">and</span> <span class="string">Spectre</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">"<span class="template-variable">&#123;&#123; target_hosts | default('all') &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  become:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>Variables are defined ready for use later on in the tasks section. </p>
<p><code>reboot_after_update:</code> is set to <code>no</code> but should be set to “yes” where possible by yourself. The reason for this is covered properly towards the end of these explanations. </p>
<p><code>packages:</code> contains the required kernel package versions for each respective Linux distro. Most of the Debian/Ubuntu entries are empty with the exception of Debian 9 (the latest stable version) which contains the specific kernel package.  </p>
<p>The empty values may be updated by the maintainers at some point, but you can add in the kernel packages yourself for the empty ones. I’ve done this in the next code snippet, from the information given at these two links:</p>
<blockquote>
<p><a href="https://www.debian.org/security/2018/dsa-4078" target="_blank" rel="external">https://www.debian.org/security/2018/dsa-4078</a><br><a href="https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown" target="_blank" rel="external">https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown</a></p>
</blockquote>
<p>These kernel packages are in essence the only Meltdown and or Spectre <em>“fixes”</em> currently available. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vars:</span></span><br><span class="line"><span class="attr">  reboot_after_update:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  packages:</span></span><br><span class="line">    <span class="comment"># https://access.redhat.com/security/vulnerabilities/speculativeexecution</span></span><br><span class="line"><span class="attr">    RedHat7:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">kernel-3.10.0-693.11.6.el7</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">microcode_ctl-2.1-22.2.el7</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">perf-3.10.0-693.11.6.el7</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">python-perf-3.10.0-693.11.6.el7</span></span><br><span class="line"><span class="attr">    RedHat6:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">kernel-2.6.32-696.18.7.el6</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">kernel-firmware-2.6.32-696.18.7.el6</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">perf-2.6.32-696.18.7.el6</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">python-perf-2.6.32-696.18.7.el6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://www.debian.org/security/2018/dsa-4078</span></span><br><span class="line"><span class="attr">    Debian7:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">linux-image-3.2.0-5-amd64</span></span><br><span class="line"><span class="attr">    Debian8:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">linux-image-3.16.0-5-amd64</span></span><br><span class="line"><span class="attr">    Debian9:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">linux-image-4.9.0-5-amd64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown</span></span><br><span class="line"><span class="attr">    Ubuntu14:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">linux-image-3.13.0-141-generic</span></span><br><span class="line"><span class="attr">    Ubuntu16:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">linux-image-4.4.0-112-generic</span> </span><br><span class="line"><span class="attr">    Ubuntu17:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">linux-image-4.13.0-31-generic</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Please remember that this is as things stand right now with the kernel patching in late January, so these version numbers are always subject to change as new fixes are released. </p>
</blockquote>
<p>There are two tasks in total. One for each type of package manager in use on the various distros. </p>
<p>When Yum is detected on the host by Ansible, the first task is executed and the distro packages defined previously are referenced for installation. This is done using the <code>ansible_os_family</code> and <code>ansible_distribution_major_version</code> system fact variables - the distro name and version number respectively.  </p>
<p>A handler is then called to reboot the host (explained later on).</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">RHEL</span> <span class="string">| Install kernel updates</span><br><span class="line"></span><span class="attr">    yum:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">"<span class="template-variable">&#123;&#123; packages[ansible_os_family ~ ansible_distribution_major_version] &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">present</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">ansible_pkg_mgr</span> <span class="string">==</span> <span class="string">'yum'</span></span><br><span class="line"><span class="attr">    notify:</span> <span class="string">reboot</span> <span class="string">system</span></span><br></pre></td></tr></table></figure>
<p>If Aptitude (<code>apt</code>) is detected on the host in place of Yum, the second task is run instead. Which uses a similar process. The distro type and version number are sourced from the start in order to install the correct packages (like in the other task), whilst the package index is updated via <code>update_cache:</code>.  </p>
<p>As before the host is then rebooted via the handler (more on that now, as promised). </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">DEBIAN</span> <span class="string">| Install kernel updates</span><br><span class="line"></span><span class="attr">  apt:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    state:</span> <span class="string">present</span></span><br><span class="line"><span class="attr">    update_cache:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">    cache_valid_time:</span> <span class="number">3600</span></span><br><span class="line"><span class="attr">  with_items:</span> <span class="string">"<span class="template-variable">&#123;&#123; packages[ansible_distribution ~ ansible_distribution_major_version] &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">ansible_pkg_mgr</span> <span class="string">==</span> <span class="string">'apt'</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">reboot</span> <span class="string">system</span></span><br></pre></td></tr></table></figure>
<p>If the variable <code>reboot_after_update</code> from the start is set to <code>yes</code> or true. The host(s) will reboot at the end of each task run, as the handler is called. </p>
<p>This is here as it’s necessary to reboot the system to begin using the new kernel changes brought in for the Spectre/Meltdown exploits. So you should set <code>reboot_after_update</code> to “yes” at the start of the file, as long as it’s safe to do so in terms of node availability and uptime. </p>
<p>Lastly <code>async:</code> allows the shutdown command to run for a maximum of <code>15</code> seconds, but also <code>poll:</code> tells Ansible to check constantly for its completion. This is all so Ansible moves on and doesn’t idle from the node’s system shutdown.  </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">handlers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">reboot</span> <span class="string">system</span></span><br><span class="line"><span class="attr">    shell:</span> <span class="string">sleep</span> <span class="number">3</span><span class="string">;</span> <span class="string">reboot</span></span><br><span class="line"><span class="attr">    async:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">    poll:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">reboot_after_update</span></span><br></pre></td></tr></table></figure>
<p>It might be better to download the repository itself but if you want the <code>meltdown-spectre-linux.yml</code> file I showed here (with all the kernel package versions added in) use this Gist instead:</p>
<script src="https://gist.github.com/5car1z/ddbb17cb763d5aedf129732213febac4.js"></script>

<blockquote>
<p><strong>Warning:</strong> Be aware that the “reboot” variable is set to yes in this Gist. </p>
</blockquote>
<p>Run the file against your desired host groups or host patterns as normal, adding a <code>-K</code> sudo password or <code>-u</code> user switch if relevant e.g. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook <span class="_">-l</span> webservers meltdown-spectre-linux.yml -K</span><br></pre></td></tr></table></figure>
<p>Then watch Ansible check and update the kernel packages on each host. Oh and <code>uname -r</code> reveals the kernel package in use by your current node. </p>
<p>Thanks to <a href="https://www.ansible.com/blog/author/sam-doran" target="_blank" rel="external">Sam Doran</a> for the plays and the Ansible repository this is taken from. </p>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TEnht2h.jpg&quot; alt=&quot;Spectre &amp;amp; Meltdown Logos&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;As it stands the current “fixes” for &lt;a href=&quot;https://meltdownattack.com/&quot;&gt;Meltdown and Spectre&lt;/a&gt; mainly involve updating and upgrading hosts to include their patched kernel upgrades. When it comes to applying the updates to multiple Linux servers, one approach is to use the playbook/plays in this “lockdown” repo from Ansible. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ansible/ansible-lockdown/blob/master/meltdown-spectre-linux.yml&quot;&gt;https://github.com/ansible/ansible-lockdown/blob/master/meltdown-spectre-linux.yml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is how the YAML works to patch the aforementioned exploits. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="CM" scheme="http://www.tricksofthetrades.net/tags/CM/"/>
    
      <category term="Meltdown" scheme="http://www.tricksofthetrades.net/tags/Meltdown/"/>
    
      <category term="Spectre" scheme="http://www.tricksofthetrades.net/tags/Spectre/"/>
    
  </entry>
  
  <entry>
    <title>Kernel Updates for Meltdown and Spectre CPU Exploits</title>
    <link href="http://www.tricksofthetrades.net/2018/01/11/kernel-update-for-meltdown-spectre/"/>
    <id>http://www.tricksofthetrades.net/2018/01/11/kernel-update-for-meltdown-spectre/</id>
    <published>2018-01-11T00:00:00.000Z</published>
    <updated>2018-05-10T17:03:41.813Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/TEnht2h.jpg" alt="Meltdown and Spectre Logos"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>As updating the target hosts system packages to their latest versions includes the kernel updates, this is in general the easiest way to bring in any <a href="https://meltdownattack.com/" target="_blank" rel="external">Meltdown and Spectre</a> fixes. A reboot is required after the updates for kernel changes to take effect. </p>
<p>Without configuration management or any automation tools it’s pretty simple.</p>
<a id="more"></a>
<hr>
<p>On Debian and Ubuntu:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get dist-upgrade</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>
<p>On RPM based distros like Redhat and CentOS this would be:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>
<p>On Fedora it’s <code>dnf</code> instead:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf update</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>
<hr>
<p>Further updates, more information, and perhaps even a targeted approach to circumventing these exploits could be available in the future. So keep up to date with both of the two issues as best as possible.</p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-protect-your-server-against-the-meltdown-and-spectre-vulnerabilities" target="_blank" rel="external">DigitalOcean - How To Protect Your Server Against the Meltdown and Spectre Vulnerabilities</a></li>
<li><a href="https://www.cyberciti.biz/faq/patch-meltdown-cpu-vulnerability-cve-2017-5754-linux/" target="_blank" rel="external">Nixcraft: How to patch Meltdown CPU Vulnerability CVE-2017-5754 on Linux</a></li>
<li><a href="https://www.cyberciti.biz/faq/patch-spectre-vulnerability-cve-2017-5753-cve-2017-5715-linux/" target="_blank" rel="external">Nixcraft: How to patch Spectre Vulnerability CVE-2017-5753/CVE-2017-5715 on Linux</a></li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TEnht2h.jpg&quot; alt=&quot;Meltdown and Spectre Logos&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;As updating the target hosts system packages to their latest versions includes the kernel updates, this is in general the easiest way to bring in any &lt;a href=&quot;https://meltdownattack.com/&quot;&gt;Meltdown and Spectre&lt;/a&gt; fixes. A reboot is required after the updates for kernel changes to take effect. &lt;/p&gt;
&lt;p&gt;Without configuration management or any automation tools it’s pretty simple.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Security" scheme="http://www.tricksofthetrades.net/tags/Security/"/>
    
      <category term="Meltdown" scheme="http://www.tricksofthetrades.net/tags/Meltdown/"/>
    
      <category term="Spectre" scheme="http://www.tricksofthetrades.net/tags/Spectre/"/>
    
  </entry>
  
  <entry>
    <title>Ansible - Local Playbook Execution</title>
    <link href="http://www.tricksofthetrades.net/2017/10/02/ansible-local-playbooks/"/>
    <id>http://www.tricksofthetrades.net/2017/10/02/ansible-local-playbooks/</id>
    <published>2017-10-01T23:00:00.000Z</published>
    <updated>2018-05-05T13:11:01.157Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/0YogZaW.png" alt="Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>There are a several ways to run Ansible on a local system that I could find whilst searching the net. In this I’m covering three of the ones that were the most popular or the most prevalent. The first two seem great for their different contexts, and the third is not as necessary but worth considering perhaps.  </p>
<p>Being able to do this can be very useful for setting up your own machines or workstations (dotfiles anyone?) at least in the event that you don’t want to use traditional scripting. Also when creating playbooks that involve interacting with developer API’s this is an important component - see the “more information” section at the end, for a link to an example of this. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Local-Play-Directives"><a href="#1-–-Local-Play-Directives" class="headerlink" title="1 – Local Play Directives"></a>1 – Local Play Directives</h1><p>This is the easiest way I found and probably most suited for when writing one or two individual playbooks. </p>
<p>Simply put, using both <code>127.0.0.1</code> for the <code>hosts:</code> directive and setting <code>connection:</code> to <code>local</code>  in a playbook ensures any tasks carried out are executed on your local machine. </p>
<p>This is an example playbook that prints “localhost” during execution to show local playback, then updates and upgrades Apt system packages; so it’s intended for Debian and or Ubuntu. </p>
<figure class="highlight bash"><figcaption><span>playbook.yml </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">- name: run the playbook tasks on the localhost</span><br><span class="line">  hosts: 127.0.0.1</span><br><span class="line">  connection: <span class="built_in">local</span></span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: <span class="built_in">print</span> out the hostname of target</span><br><span class="line">    <span class="built_in">command</span>: hostname</span><br><span class="line">  </span><br><span class="line">  - name: ensure aptitude is installed</span><br><span class="line">    <span class="built_in">command</span>: apt-get -y install aptitude</span><br><span class="line">  </span><br><span class="line">  - name: update the apt package index i.e. apt-get update</span><br><span class="line">    apt: update_cache=yes</span><br><span class="line"></span><br><span class="line">  - name: upgrade system packages i.e. apt-get upgrade</span><br><span class="line">    apt: upgrade=yes</span><br></pre></td></tr></table></figure>
<p>Run it as usual like any standard playbook - inclusive of  <code>-K</code> as it’ll need <code>sudo</code> privileges to complete. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -K playbook.yml</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="2-–-Repository-Config-and-Hosts-File"><a href="#2-–-Repository-Config-and-Hosts-File" class="headerlink" title="2 – Repository Config and Hosts File"></a>2 – Repository Config and Hosts File</h1><p>This second method works best in the context of a version control repository, which features multiple local playbook files and is intended to be passed around from person to person or host to host. It works by forcing Ansible to use a custom config file and in turn local hosts file.  </p>
<p>Here are the step you’d need to carry out in order to set this up in a Git repository, after setting up the repo itself. There’s also no commands for checking in, writing, and pushing files to the remote.</p>
<p>In the Git repository, create the custom <code>ansible.cfg</code> file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ansible.cfg</span><br></pre></td></tr></table></figure>
<p>Add these contents to the file as they’re shown:</p>
<figure class="highlight bash"><figcaption><span>ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">hostfile = hosts</span><br></pre></td></tr></table></figure>
<p>Save and exit the new file. </p>
<p>Then create another file, this time the custom <code>hosts</code> one.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim hosts</span><br></pre></td></tr></table></figure>
<p>The contents here consist of a group named <code>[local]</code> and a host entry listed as <code>localhost</code>. The host variable for local host <code>ansible_connection=local</code> as expected forces a local connection whenever it is targeted in a playbook. </p>
<figure class="highlight bash"><figcaption><span>hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">local</span>]</span><br><span class="line">localhost ansible_connection=<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<p>Again on a Debian/Ubuntu host you could use an adapted version of the earlier playbook as a test example, to ensure everything is working as intended. The difference here is the <code>localhost</code> value for <code>hosts:</code> and no requirement to mention the <code>connection: local</code> directive. </p>
<figure class="highlight bash"><figcaption><span>playbook.yml </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">- name: run the playbook tasks on the localhost</span><br><span class="line">  hosts: localhost</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: <span class="built_in">print</span> out the hostname of target</span><br><span class="line">    <span class="built_in">command</span>: hostname</span><br><span class="line">  </span><br><span class="line">  - name: ensure aptitude is installed</span><br><span class="line">    <span class="built_in">command</span>: apt-get -y install aptitude</span><br><span class="line">  </span><br><span class="line">  - name: update the apt package index i.e. apt-get update</span><br><span class="line">    apt: update_cache=yes</span><br><span class="line"></span><br><span class="line">  - name: upgrade system packages i.e. apt-get upgrade</span><br><span class="line">    apt: upgrade=yes</span><br></pre></td></tr></table></figure>
<p>You’ll need to provide your <code>sudo</code> password with this again, to run the playbook.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -K playbook.yml</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="3-–-Global-Inventory-Hosts-Group"><a href="#3-–-Global-Inventory-Hosts-Group" class="headerlink" title="3 – Global Inventory Hosts Group"></a>3 – Global Inventory Hosts Group</h1><p>One further alternative solution (in a non version control scenario where there’s no need for portability) is to instead add the <code>[local]</code> host group to your global <code>/etc/ansible/hosts</code> file. </p>
<p>These would be the commands:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<p>Append this new host group to the file. </p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">local</span>]</span><br><span class="line">localhost ansible_connection=<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<p>Write your opening lines of playbooks with the <code>hosts: all</code> definition. Here’s the example from before, adapted to this:</p>
<figure class="highlight bash"><figcaption><span>playbook.yml </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">- name: run the playbook tasks on the localhost</span><br><span class="line">  hosts: all</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: <span class="built_in">print</span> out the hostname of target</span><br><span class="line">    <span class="built_in">command</span>: hostname</span><br><span class="line">  </span><br><span class="line">  - name: ensure aptitude is installed</span><br><span class="line">    <span class="built_in">command</span>: apt-get -y install aptitude</span><br><span class="line">  </span><br><span class="line">  - name: update the apt package index i.e. apt-get update</span><br><span class="line">    apt: update_cache=yes</span><br><span class="line"></span><br><span class="line">  - name: upgrade system packages i.e. apt-get upgrade</span><br><span class="line">    apt: upgrade=yes</span><br></pre></td></tr></table></figure>
<p>Then afterwards when you want to run a playbook locally, use the <code>-l</code> switch and provide the <code>local</code> group or  <code>localhost</code> as the target host. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -K <span class="_">-l</span> localhost playbook.yml</span><br></pre></td></tr></table></figure>
<p>It’s still wise and maybe more convenient to keep local playbook execution isolated to one directory or Git repository however (using the method in the former step). I would probably not recommend this method over the other two, but whatever works best for your particular needs I guess. </p>
<p>Thanks for reading, and I hope this has helped you out with local playbook execution in some way or another.  </p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://docs.ansible.com/ansible/latest/playbooks_delegation.html#local-playbooks" target="_blank" rel="external">Ansible Official Documentation - Local Playbooks</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2-with-ansible-2-0-on-ubuntu-14-04" target="_blank" rel="external">How To Use the DigitalOcean API v2 with Ansible 2.0 on Ubuntu 14.04</a></li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0YogZaW.png&quot; alt=&quot;Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;There are a several ways to run Ansible on a local system that I could find whilst searching the net. In this I’m covering three of the ones that were the most popular or the most prevalent. The first two seem great for their different contexts, and the third is not as necessary but worth considering perhaps.  &lt;/p&gt;
&lt;p&gt;Being able to do this can be very useful for setting up your own machines or workstations (dotfiles anyone?) at least in the event that you don’t want to use traditional scripting. Also when creating playbooks that involve interacting with developer API’s this is an important component - see the “more information” section at the end, for a link to an example of this. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="CM" scheme="http://www.tricksofthetrades.net/tags/CM/"/>
    
      <category term="Python" scheme="http://www.tricksofthetrades.net/tags/Python/"/>
    
      <category term="Ubuntu" scheme="http://www.tricksofthetrades.net/tags/Ubuntu/"/>
    
      <category term="Debian" scheme="http://www.tricksofthetrades.net/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Ansible - Playbook Server Provisioning (5)</title>
    <link href="http://www.tricksofthetrades.net/2017/08/21/ansible-playbook-server-provisioning/"/>
    <id>http://www.tricksofthetrades.net/2017/08/21/ansible-playbook-server-provisioning/</id>
    <published>2017-08-20T23:00:00.000Z</published>
    <updated>2018-05-05T13:11:50.314Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/0YogZaW.png" alt="Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>One of the many purposes of Ansible is to easily, quickly, and efficiently <em>provision</em> new server infrastructure. The use of configuration management tools in server provisioning can be quite essential, as it provides a very flexible solution in regards to deploying and managing new hosts. This post goes through a very simple example playbook that uses Ansible roles to break up and organise the provisioning process. If you haven’t used Ansible to setup a server before this is a good place to start. The idea can then be expanded upon to add more individual components or specific ideas. </p>
<p>The Playbook is intended for Linux hosts running Debian 8 (Jessie) and is tested using a suitable <a href="https://www.vagrantup.com/" target="_blank" rel="external">Vagrant VM</a>. After the testing, towards the end of the post, the playbook is then deployed to several newly created Debian 8 droplets on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a>. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Playbook-Repository"><a href="#1-–-Playbook-Repository" class="headerlink" title="1 – Playbook Repository"></a>1 – Playbook Repository</h1><p>The entirety of this post was tested on a Xubuntu 16.04 VM using the below version of Ansible and Python:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible 2.3.1.0</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = Default w/o overrides</span><br><span class="line">  python version = 2.7.12 (default, Nov 19 2016, 06:48:10) [GCC 5.4.0 20160609]</span><br></pre></td></tr></table></figure>
<p>The layout of the files for this playbook look like this: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">├── playbook.yml</span><br><span class="line">├── README.md</span><br><span class="line">├── roles</span><br><span class="line">│   ├── base</span><br><span class="line">│   │   ├── files</span><br><span class="line">│   │   │   └── motd</span><br><span class="line">│   │   ├── handlers</span><br><span class="line">│   │   │   └── main.yml</span><br><span class="line">│   │   └── tasks</span><br><span class="line">│   │       └── main.yml</span><br><span class="line">│   ├── ntp</span><br><span class="line">│   │   ├── defaults</span><br><span class="line">│   │   │   └── main.yml</span><br><span class="line">│   │   ├── handlers</span><br><span class="line">│   │   │   └── main.yml</span><br><span class="line">│   │   ├── tasks</span><br><span class="line">│   │   │   └── main.yml</span><br><span class="line">│   │   └── templates</span><br><span class="line">│   │       └── timezone</span><br><span class="line">│   ├── ufw</span><br><span class="line">│   │   ├── defaults</span><br><span class="line">│   │   │   └── main.yml</span><br><span class="line">│   │   └── tasks</span><br><span class="line">│   │       └── main.yml</span><br><span class="line">│   └── users</span><br><span class="line">│       ├── defaults</span><br><span class="line">│       │   └── main.yml</span><br><span class="line">│       └── tasks</span><br><span class="line">│           └── main.yml</span><br><span class="line">└── vagrant</span><br><span class="line">    ├── group_vars</span><br><span class="line">    │   └── vagrant.yml</span><br><span class="line">    ├── inventory.yml</span><br><span class="line">    ├── README.md</span><br><span class="line">    └── Vagrantfile</span><br><span class="line"></span><br><span class="line">18 directories, 17 files</span><br></pre></td></tr></table></figure>
<p>All stored here on GitHub within this repository:</p>
<blockquote>
<p><a href="https://github.com/5car1z/ansible-debian-provisioning" target="_blank" rel="external">https://github.com/5car1z/ansible-debian-provisioning</a></p>
</blockquote>
<hr>
<h1 id="2-–-Main-Playbook-File"><a href="#2-–-Main-Playbook-File" class="headerlink" title="2 – Main Playbook File"></a>2 – Main Playbook File</h1><p>At the root level of the <a href="https://github.com/5car1z/ansible-debian-provisioning" target="_blank" rel="external">ansible-debian-provisioning</a> repo is the main <code>playbook.yml</code> file, which calls and runs the subsequent roles and their tasks. </p>
<figure class="highlight yaml"><figcaption><span>playbook.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">provision</span> <span class="string">debian</span> <span class="number">8</span> <span class="string">(jessie)</span> <span class="string">droplets</span> </span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">  roles:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">base</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">users</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ufw</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ntp</span></span><br></pre></td></tr></table></figure>
<p>There are several variables defined here in this core playbook file. </p>
<ul>
<li><code>hosts</code> - set to target <code>all</code> the hosts in the Ansible inventory file <code>/etc/ansible/hosts</code>. </li>
<li><code>gather_facts</code> - when the playbook is run, it will gather tasks about the operating system first before executing tasks. </li>
<li><code>roles</code> - here are the four role names to be included when running the Ansible playbook (listed in order of execution).  </li>
</ul>
<p>From here on the plays (tasks) inside each of the roles directories are processed by Ansible - once the user runs the playbook. </p>
<hr>
<h1 id="3-–-Roles-Base"><a href="#3-–-Roles-Base" class="headerlink" title="3 – Roles: Base"></a>3 – Roles: Base</h1><p>The “base” role puts in place some sensible server defaults/groundwork, and holds three directories containing their relevant Ansible configuration files: </p>
<ul>
<li><code>roles/base/files/motd</code></li>
<li><code>roles/base/handlers/main.yml</code></li>
<li><code>roles/base/tasks/main.yml</code></li>
</ul>
<p>The “files” directory contains an ASCII style message of the day (MOTD) file, that once in place is shown to user’s upon connecting to the server. This can be changed freely to whatever message is suitable by altering the <code>motd</code> file contents.  </p>
<figure class="highlight bash"><figcaption><span>roles/base/files/motd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****************************************************************</span><br><span class="line">*           This server is configured by Ansible.               *</span><br><span class="line">*                                                               *</span><br><span class="line">*   See https://github.com/5car1z/ansible-debian-provisioning   *</span><br><span class="line">*****************************************************************</span><br></pre></td></tr></table></figure>
<p>The play (or tasks) for this role to be carried out by Ansible on each target host, are found in the “tasks” directory’s configuration file. In here there are multiple tasks that together form the play. The description for each task explains its individual purpose. </p>
<figure class="highlight yaml"><figcaption><span>roles/base/tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">install</span> <span class="string">some</span> <span class="string">commonly</span> <span class="string">used</span> <span class="string">packages</span></span><br><span class="line"><span class="attr">  apt:</span> <span class="string">pkg=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span></span><br><span class="line"><span class="attr">  with_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">fail2ban</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">htop</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tmux</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">vim</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">unattended-upgrades</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cowsay</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">set</span> <span class="string">the</span> <span class="string">server</span> <span class="string">message</span> <span class="string">of</span> <span class="string">the</span> <span class="string">day</span> <span class="string">explaining</span> <span class="string">ansible</span> <span class="string">was</span> <span class="string">the</span> <span class="string">configuration</span> <span class="string">management</span> <span class="string">tool</span></span><br><span class="line"><span class="attr">  copy:</span> <span class="string">src=motd</span></span><br><span class="line">        <span class="string">dest=/etc/motd</span></span><br><span class="line">        <span class="string">mode=644</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">disable</span> <span class="string">ssh</span> <span class="string">root</span> <span class="string">logins</span> <span class="string">without</span> <span class="string">the</span> <span class="string">use</span> <span class="string">of</span> <span class="string">a</span> <span class="string">valid</span> <span class="string">ssh</span> <span class="string">key</span></span><br><span class="line"><span class="attr">  lineinfile:</span> <span class="string">dest=/etc/ssh/sshd_config</span> <span class="string">state=present</span> <span class="string">regexp='^PermitRootLogin</span> <span class="string">' line='</span><span class="string">PermitRootLogin</span> <span class="string">without-password'</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">sshd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">disable</span> <span class="string">ssh</span> <span class="string">password</span> <span class="string">logins</span> <span class="string">for</span> <span class="string">regular</span> <span class="string">users</span></span><br><span class="line"><span class="attr">  lineinfile:</span> <span class="string">dest=/etc/ssh/sshd_config</span> <span class="string">state=present</span> <span class="string">regexp='^PasswordAuthentication</span> <span class="string">' line='</span><span class="string">PasswordAuthentication</span> <span class="literal">no</span><span class="string">'</span><br><span class="line">  notify: restart sshd</span><br><span class="line"></span><br><span class="line">- name: enable unattended security updates option</span><br><span class="line">  debconf: name=unattended-upgrades</span><br><span class="line">           question='</span><span class="string">unattended-upgrades/enable_auto_updates'</span></span><br><span class="line">           <span class="string">value='true'</span></span><br><span class="line">           <span class="string">vtype='boolean'</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">reconfigure</span> <span class="string">unattended-upgrades</span></span><br></pre></td></tr></table></figure>
<p>This is where the bulk of changes are actually made to the target hosts when running the playbook. Each change is described roughly in the <em>name</em>  directives. </p>
<p>In this base role, several packages are to be installed, the message of the day is changed, SSH key usage is enforced and made mandatory, whilst automatic security updates are enabled. </p>
<p>Notice in the last code snippet the triggering of the two handlers when required via the usage of <code>notify:</code>. </p>
<p>Here’s how the handlers work.</p>
<p>The “handler” directory’s configuration file lists two handlers. The first handler for this role ensures the SSH system daemon is restarted. The second handler runs the <code>dpkg-reconfigure</code> command for the <code>unattended-upgrades</code> package. </p>
<figure class="highlight yaml"><figcaption><span>roles/base/handlers/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">restart</span> <span class="string">sshd</span></span><br><span class="line"><span class="attr">  service:</span> <span class="string">name=ssh</span> <span class="string">state=restarted</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">reconfigure</span> <span class="string">unattended-upgrades</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">dpkg-reconfigure</span> <span class="bullet">-f</span> <span class="string">noninteractive</span> <span class="string">unattended-upgrades</span></span><br></pre></td></tr></table></figure>
<p>These handlers are both triggered when appended to tasks found elsewhere in this role’s playbook files - like we saw earlier. </p>
<hr>
<h1 id="4-–-Roles-Users"><a href="#4-–-Roles-Users" class="headerlink" title="4 – Roles: Users"></a>4 – Roles: Users</h1><p>The “users” role houses two Ansible directories.</p>
<ul>
<li><code>roles/users/defaults/main.yml</code></li>
<li><code>roles/users/tasks/main.yml</code></li>
</ul>
<p>The <code>main.yml</code> file in the defaults directory contains credentials for the Linux user accounts to be generated on the target host(s). The YAML used here begins as a list of dictionaries. Each user and their associated credentials make up one entry in this initial list of dictionaries. The keys in every dictionary here contain the literal user values. </p>
<p>If you’re unsure on the YAML syntax and its usage, see Ansible’s explanations on <a href="https://docs.ansible.com/ansible/YAMLSyntax.html" target="_blank" rel="external">YAML in Ansible</a>.</p>
<figure class="highlight yaml"><figcaption><span>roles/users/defaults/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">--</span> </span><br><span class="line"><span class="attr">provisioned_users:</span> </span><br><span class="line">   </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">user-one</span></span><br><span class="line"><span class="attr">    encrypted_password:</span> <span class="string">$1$@YMgS-5Y$2lH.vkVmawJ810djjkGp70</span></span><br><span class="line"><span class="attr">    public_keys:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="attr">    sudo:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    adm:</span> <span class="literal">true</span></span><br><span class="line">   </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">user-two</span> </span><br><span class="line"><span class="attr">    encrypted_password:</span> <span class="string">$1$@YMgS-5Y$2lH.vkVmawJ810djjkGp70</span></span><br><span class="line"><span class="attr">    public_keys:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="attr">    sudo:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    adm:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">user-three</span></span><br><span class="line"><span class="attr">    encrypted_password:</span> <span class="string">$1$@YMgS-5Y$2lH.vkVmawJ810djjkGp70</span></span><br><span class="line"><span class="attr">    public_keys:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="attr">    sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    adm:</span> <span class="literal">false</span></span><br><span class="line">   </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">user-four</span></span><br><span class="line"><span class="attr">    encrypted_password:</span> <span class="string">$1$@YMgS-5Y$2lH.vkVmawJ810djjkGp70</span></span><br><span class="line"><span class="attr">    public_keys:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/$USER/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="attr">    sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    adm:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> It’s important to remember that the provided key values in the previous code snippet are mainly placeholders and imagined examples. They need replacing with real values.</p>
</blockquote>
<p>The first key in the user dictionary is <code>name:</code> and defines the Linux account username.</p>
<p>The second is <code>encrypted_password:</code> which must be set to a <em>hashed</em> value and should not be plain-text. Later on in this section we’ll explain how to go about generating a hash for your own passwords. </p>
<p>The third is <code>public_keys:</code> which you’ll notice is plural. This is in case you want to add multiple SSH keys (from your localhost) to your remote new user account, to give multiple people/keys access when needed. Importantly here, a “nested” list is used to add these multiple entries when they’re required.</p>
<p>The next key <code>sudo:</code> is a Boolean and adds the user account to the <code>sudo</code> group when set to “true”.</p>
<p>The last key <code>adm:</code> is the same as the previous key. It’s also a Boolean and adds the user account to the <code>adm</code> or “admin` group when set to “true”.</p>
<p>Moving over to the second configuration file in the “tasks” directory, you can see the play/tasks that make use of the definitions in the previous file.</p>
<figure class="highlight yaml"><figcaption><span>roles/users/tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">add</span> <span class="string">provisioned</span> <span class="string">user</span> <span class="string">accounts</span> <span class="string">defined</span> <span class="string">in</span> <span class="string">defaults</span> <span class="string">config</span> </span><br><span class="line"><span class="attr">  user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">home=/home/&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">shell=/bin/bash</span> <span class="string">state=present</span> <span class="string">password=&#123;&#123;</span> <span class="string">item.encrypted_password</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  with_items:</span> <span class="string">"<span class="template-variable">&#123;&#123; provisioned_users &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">add</span> <span class="string">public</span> <span class="string">keys</span> <span class="string">to</span> <span class="string">authorized</span> <span class="string">keys</span> <span class="string">files</span></span><br><span class="line"><span class="attr">  authorized_key:</span> <span class="string">user=&#123;&#123;</span> <span class="string">item[0].name</span> <span class="string">&#125;&#125;</span> <span class="string">key="&#123;&#123;</span> <span class="string">lookup('file',</span> <span class="string">item[1])</span> <span class="string">&#125;&#125;"</span> <span class="string">state=present</span></span><br><span class="line"><span class="attr">  with_subelements:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"<span class="template-variable">&#123;&#123; provisioned_users &#125;&#125;</span>"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">public_keys</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">add</span> <span class="string">provisioned</span> <span class="string">users</span> <span class="string">to</span> <span class="string">sudo</span> <span class="string">group</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">groups=sudo</span> <span class="string">append=yes</span></span><br><span class="line"><span class="attr">  with_items:</span> <span class="string">"<span class="template-variable">&#123;&#123; provisioned_users &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">item.sudo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">add</span> <span class="string">provisioned</span> <span class="string">users</span> <span class="string">to</span> <span class="string">admin</span> <span class="string">group</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">groups=adm</span> <span class="string">append=yes</span></span><br><span class="line"><span class="attr">  with_items:</span> <span class="string">"<span class="template-variable">&#123;&#123; provisioned_users &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">item.adm</span></span><br></pre></td></tr></table></figure>
<p>The descriptions of the tasks explain how things work here. The modules used for this are the <a href="https://docs.ansible.com/ansible/latest/user_module.html" target="_blank" rel="external">user</a> and <a href="https://docs.ansible.com/ansible/latest/authorized_key_module.html" target="_blank" rel="external">authorized key</a> modules.  </p>
<hr>
<h3 id="Generating-Crypted-Passwords"><a href="#Generating-Crypted-Passwords" class="headerlink" title="Generating Crypted Passwords"></a>Generating Crypted Passwords</h3><p>When it comes to generating the hashes (crypted values) for your username key passwords, there are a several different methods on offer. </p>
<p>The first involves using <code>mkpasswd</code> a utility that is available on most Linux systems. If it’s not on your system look for it in your package manager’s index - which in Debian and Ubuntu comes bundled inside the <code>whois</code> package. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install whois</span><br></pre></td></tr></table></figure>
<p>Generating a hashed password is as simple as running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkpasswd --method=sha-512</span><br></pre></td></tr></table></figure>
<p>A separate way of doing this is to use Python’s crypt module/library:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">'import crypt; print crypt.crypt("EnterPasswordHere", "SomeSalt")'</span></span><br></pre></td></tr></table></figure>
<p><code>Enter Password Here</code> is of course replaced by the plain-text password you want to use. Whilst <code>SomeSalt</code> needs to be replaced by a salt - a random string of characters. </p>
<p>You could use <code>pwgen</code> to generate salts, should you want to:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install pwgen</span><br><span class="line">$ pwgen</span><br></pre></td></tr></table></figure>
<p>A final alternative is via the <code>openssl</code> package.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl passwd -salt SomeSalt -1 EnterPasswordHere</span><br></pre></td></tr></table></figure>
<p>Pick one of the values from the output to use for your <code>encrypted_password:</code> keys. </p>
<hr>
<h1 id="5-–-Roles-UFW"><a href="#5-–-Roles-UFW" class="headerlink" title="5 – Roles: UFW"></a>5 – Roles: UFW</h1><p>The “UFW” role configures the firewall settings for servers. There are only two configuration files to be aware of. </p>
<ul>
<li><code>roles/ufw/defaults/main.yml</code></li>
<li><code>roles/ufw/tasks/main.yml</code></li>
</ul>
<p>The first config file in the “defaults” directory defines which custom firewall ports you wish to remain open and accessible to outside connections. They are defined in a list format that can be added to as necessary. </p>
<figure class="highlight yaml"><figcaption><span>roles/ufw/defaults/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ufw_open_ports:</span> <span class="string">['80',</span> <span class="string">'43'</span><span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>Only two ports are set to open currently in this file - HTTP port <code>80</code> and HTTPS port <code>43</code>. </p>
<p>More tinkering with the firewall is carried out in the other config file, which resides in the “tasks” directory:</p>
<figure class="highlight yaml"><figcaption><span>roles/ufw/tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">install</span> <span class="string">ufw</span></span><br><span class="line"><span class="attr">  apt:</span> <span class="string">pkg=ufw</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">disable</span> <span class="string">and</span> <span class="string">reset</span> <span class="string">firewall</span></span><br><span class="line"><span class="attr">  ufw:</span> <span class="string">state=reset</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">open</span> <span class="string">firewall</span> <span class="string">for</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">  ufw:</span> <span class="string">rule=allow</span> <span class="string">name=OpenSSH</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">open</span> <span class="string">firewall</span> <span class="string">on</span> <span class="string">specific</span> <span class="string">ports</span></span><br><span class="line"><span class="attr">  ufw:</span> <span class="string">rule=allow</span> <span class="string">port=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  with_items:</span> <span class="string">"<span class="template-variable">&#123;&#123; ufw_open_ports &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">reload</span> <span class="string">and</span> <span class="string">enable</span> <span class="string">firewall</span></span><br><span class="line"><span class="attr">  ufw:</span> <span class="string">state=enabled</span> <span class="string">policy=deny</span></span><br></pre></td></tr></table></figure>
<p>As you can see above in the last code snippet, Ansible is instructed to install the UFW package, reset the firewall, open port <code>22</code> for SSH access, then reload and enable the firewall to make it active. Our previous ports defined in the other file are also opened.</p>
<p>It’s worth noting that all of this is done via the inbuilt <code>ufw:</code> Ansible module, and not at any point manually through the shell.</p>
<hr>
<h1 id="6-–-Roles-NTP"><a href="#6-–-Roles-NTP" class="headerlink" title="6 – Roles: NTP"></a>6 – Roles: NTP</h1><p>The NTP role handles timezone settings for target hosts and has four directories with configuration files inside of them:</p>
<ul>
<li><code>roles/ntp/defaults/main.yml</code></li>
<li><code>roles/ntp/handlers/main.yml</code></li>
<li><code>roles/ntp/tasks/main.yml</code></li>
<li><code>roles/ntp/templates/main.yml</code></li>
</ul>
<p>The “defaults” config file is where you set the timezone you wish to use for your server(s). Alter the <code>Europe/London</code> text to <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="external">your own choice</a> here.</p>
<figure class="highlight yaml"><figcaption><span>roles/ntp/defaults/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Europe/London</span></span><br><span class="line"><span class="attr">ntp_server:</span> <span class="number">0.</span><span class="string">debian.pool.ntp.org</span></span><br></pre></td></tr></table></figure>
<p>There is no requirement to change the <code>ntp_server:</code> definition and this can be left as it is written.</p>
<p>Two handlers are required (all set in the “handlers” file) to ensure the NTP config is running once setup/updated. They are triggered as normal in the other “tasks” section file. </p>
<figure class="highlight yaml"><figcaption><span>roles/ntp/handlers/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">reconfigure</span> <span class="string">tzdata</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">dpkg-reconfigure</span> <span class="bullet">-f</span> <span class="string">noninteractive</span> <span class="string">tzdata</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">restart</span> <span class="string">ntp</span></span><br><span class="line"><span class="attr">  service:</span> <span class="string">name=ntp</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure>
<p>The NTP “tasks” carry out several actions. A template file containing the chosen timezone is copied into the remote hosts’s <code>/etc/timezone</code> directory, and given root user based permissions. The <code>tzdata</code> and <code>ntp</code> package is then downloaded and installed. The <code>ntp</code> service gets enabled as well as started using the <code>service:</code> module. Two lines in the <code>ntp.conf</code> are altered to match the OS type (Debian in this case), which has been set in the “defaults” <code>ntp_server:</code> directive. </p>
<figure class="highlight yaml"><figcaption><span>roles/ntp/tasks/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">configure</span> <span class="string">timezone</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    src:</span> <span class="string">timezone</span></span><br><span class="line"><span class="attr">    dest:</span> <span class="string">/etc/timezone</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">reconfigure</span> <span class="string">tzdata</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">install</span> <span class="string">tzdata</span></span><br><span class="line"><span class="attr">  apt:</span> <span class="string">pkg=tzdata</span> <span class="string">state=installed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">install</span> <span class="string">ntp</span></span><br><span class="line"><span class="attr">  apt:</span> <span class="string">pkg=ntp</span> <span class="string">state=installed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">start</span> <span class="string">ntp</span></span><br><span class="line"><span class="attr">  service:</span> <span class="string">name=ntp</span> <span class="string">state=started</span> <span class="string">enabled=true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">set</span> <span class="string">ntp</span> <span class="string">server</span></span><br><span class="line"><span class="attr">  lineinfile:</span> <span class="string">dest=/etc/ntp.conf</span> <span class="string">state=present</span> <span class="string">regexp='^server</span> <span class="string">' line='</span><span class="string">server</span> <span class="string">&#123;&#123;</span> <span class="string">ntp_server</span> <span class="string">&#125;&#125;</span> <span class="string">iburst'</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">ntp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that there may be more than one 'server' line in this file (hence we</span></span><br><span class="line"><span class="comment"># cannot do this with just one regexp rule).</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">remove</span> <span class="string">all</span> <span class="string">other</span> <span class="string">ntp</span> <span class="string">servers</span></span><br><span class="line"><span class="attr">  lineinfile:</span> <span class="string">dest=/etc/ntp.conf</span> <span class="string">state=absent</span> <span class="string">regexp="^server\s+(?!&#123;&#123;</span> <span class="string">ntp_server</span> <span class="string">&#125;&#125;)"</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="string">restart</span> <span class="string">ntp</span></span><br></pre></td></tr></table></figure>
<p>Like previously, note the use of the handlers to trigger the desired actions in this above NTP snippet. </p>
<p>Lastly in this section/role, you can see the very short one line template file. Which takes your timezone choice e.g. <code>timezone: Europe/London</code> from the defaults config file. </p>
<figure class="highlight yaml"><figcaption><span>roles/ntp/templates/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;&#123;</span> <span class="string">timezone</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>This is all the roles of the playbook covered, here’s one method of testing it before deploying and utilising it on real hosts. </p>
<hr>
<h1 id="7-–-Vagrant-Local-Testing"><a href="#7-–-Vagrant-Local-Testing" class="headerlink" title="7 – Vagrant Local Testing"></a>7 – Vagrant Local Testing</h1><p>You can run through the playbook in a test environment to ensure it works as intended, before applying it to real servers. A containerisation/virtualisation tool like Vagrant or Docker is great for this purpose. In my example testing I’m going with Vagrant, but Docker is probably a more modern choice and certainly worth pursing instead if preferred. Be aware that container’s are meant to be abstracted stripped down layers of a full OS image however, so may in fact not be better suited than a Vagrant VM.  </p>
<blockquote>
<p><a href="http://www.tricksofthetrades.net/2017/05/17/vagrant-started/">How to Install and Get Started with Vagrant in 2017</a></p>
</blockquote>
<p>If you haven’t already you’ll need to clone the GitHub repository to carry out the testing in this step:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/5car1z/ansible-debian-provisioning.git</span><br></pre></td></tr></table></figure>
<p>Once you have the repo cloned and Vagrant up and running on your local system, change into the <code>vagrant</code> directory to begin the testing. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> vagrant</span><br></pre></td></tr></table></figure>
<p>In this directory you’ll see several Vagrant files. The main file that does most of the work here is the <code>Vagrantfile</code>. </p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── Vagrantfile</span><br><span class="line">├── group_vars</span><br><span class="line">│  └── vagrant.yml</span><br><span class="line">└── inventory.yml</span><br></pre></td></tr></table></figure>
<p>The only portion of the <code>Vagrantfile</code> file we’ll take a look at here is the “provision” code block, so open up the file with an editor and find it, or just read it here:</p>
<figure class="highlight bash"><figcaption><span>Vagrantfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Provision using our Ansible playbook.</span></span><br><span class="line">  config.vm.provision <span class="string">"ansible"</span> <span class="keyword">do</span> |ansible|</span><br><span class="line">    ansible.playbook = <span class="string">"../playbook.yml"</span></span><br><span class="line">    ansible.inventory_path = <span class="string">"inventory.yml"</span></span><br><span class="line">    ansible.host_key_checking = <span class="literal">false</span></span><br><span class="line">  end</span><br><span class="line">  </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>This piece of configuration sets up Ansible as the provisioning agent Vagrant should use when provisioning a Vagrant VM. It also identifies where the target playbook to make use of is stored, alongside which Ansible inventory file to use. <a href="https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.2.0/com.ibm.zos.v2r2.foto100/hostch.htm" target="_blank" rel="external">Host key checking</a> for SSH with Ansible is also disabled. All of this is in the context of the Vagrant test VM. </p>
<p>So the <em>provisioner</em> is the entity that works through some pre-set tasks using the VM instance provided by Vagrant. The most common provisioners are: Puppet, Chef and Ansible. Shell Scripting is also still a very prevalent option. </p>
<p>The rest of the <code>Vagrantfile</code> is important but not crucial to aware of, as it can be understood another time when learning how Vagrant itself works.</p>
<p>Exit this file and type in the next command to begin the testing process:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure>
<p>This downloads the <code>debian/jessie64</code> box (<a href="https://app.vagrantup.com/debian/boxes/jessie64" target="_blank" rel="external">seen here</a>) specified in the <code>Vagrantfile</code> and creates an instance of that box as a Vagrant virtual machine (to test the Ansible playbook on).  </p>
<blockquote>
<p><strong>Note: </strong> If your host is already a Linux VM (nested virtualisation) set your hypervisor network state to Bridged instead of NAT, to remove networking problems such as slow downloads, networking auth errors, proxy errors, etc inside of Vagrant boxes. </p>
</blockquote>
<p>As the Ansible provision settings are already in place within the <code>Vagrantfile</code>, there’s no need to tell Vagrant to use Ansible with the new VM for us. </p>
<p>So just watch as the output messages show the playbook execution progress, until the final display reads:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt; PLAY RECAP &gt;</span><br><span class="line"> ------------</span><br><span class="line">        \   ^__^</span><br><span class="line">         \  (oo)\_______</span><br><span class="line">            (__)\       )\/\</span><br><span class="line">                ||----w |</span><br><span class="line">                ||     ||</span><br><span class="line"></span><br><span class="line">default                    : ok=24   changed=16   unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
<p>To further verify the changes have been made, or explore individual parts of the Vagrant test VM, SSH into it by typing:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure>
<p>Exit from the Vagrant VM as you would any other remote host e.g. <code>exit</code> or <code>CTRL</code> + <code>D</code></p>
<p>When you make changes to the playbook content and its actions in the future, to further test the changes you must re-run the playbook on the Vagrant VM. </p>
<p>To do this use this command: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant provision</span><br></pre></td></tr></table></figure>
<p>Manually running Ansible against Vagrant to achieve something like a a dry test run i.e.  <code>--check</code> or any other options you might want to incorporate, is possible too. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook --private-key=~/.vagrant.d/insecure_private_key -u vagrant -i inventory.yml --check ../playbook.yml</span><br></pre></td></tr></table></figure>
<p>To actually implement changes again, remove the <code>--check</code> flag or use the provision command as normal. </p>
<p>Finally here, let’s look at some housekeeping in terms of Vagrant usage.  </p>
<p>Update your Vagrant Debian box to the latest version from the maintainer with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box update debian/jessie64</span><br></pre></td></tr></table></figure>
<p>Destroy your test environment (Vagrant VM instance) using the next command, where <code>default</code> is the name of the environment.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant destroy ansible_server_provisioning</span><br></pre></td></tr></table></figure>
<p>ID’s for Vagrant virtual machines work instead of the environment name too. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant global-status</span><br></pre></td></tr></table></figure>
<p>Finally to remove your Vagrant Debian box download completely, and all of the different updated versions, run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box remove debian/jessie64 --all</span><br></pre></td></tr></table></figure>
<p>Now onto the real thing!</p>
<hr>
<h1 id="8-–-Digital-Ocean-Droplet-s"><a href="#8-–-Digital-Ocean-Droplet-s" class="headerlink" title="8 – Digital Ocean Droplet(s)"></a>8 – Digital Ocean Droplet(s)</h1><p><a href="https://cloud.digitalocean.com/droplets/new?i=cda637&amp;size=512mb&amp;region=lon1&amp;distro=debian&amp;distroImage=debian-8-x64" target="_blank" rel="external">Create several new Debian droplets using the Digital Ocean control panel</a> - copying your Ansible SSH key across to the new droplets during creation.</p>
<blockquote>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server" target="_blank" rel="external">How To Configure SSH Key-Based Authentication on a Linux Server</a></p>
</blockquote>
<p>Add the multiple new droplet IP addresses to your Ansible inventory file (default in <code>/etc/ansible/hosts</code>). </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<p>Here’s a bare minimum example of the contents, for if you created three droplets in total. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[testing]</span><br><span class="line">ansible-test-1 ansible_host=your.droplet.ip.address </span><br><span class="line">ansible-test-2 ansible_host=your.droplet.ip.address </span><br><span class="line">ansible-test-3 ansible_host=your.droplet.ip.address</span><br></pre></td></tr></table></figure>
<p>Create this directory, and begin writing to a new file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /etc/ansible/group_vars/</span><br><span class="line">$ sudo vim /etc/ansible/group_vars/testing</span><br></pre></td></tr></table></figure>
<p>Setup a group variable for the <code>testing</code> group, so they use the <code>root</code> user with Ansible’s SSH operations. </p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/group_vars/testing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">ansible_user=root</span><br></pre></td></tr></table></figure>
<p>In the root level of the repository, run our provisioning Ansible playbook at your <code>testing</code> group’s live Digital Ocean droplets.  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook <span class="_">-l</span> testing playbook.yml</span><br></pre></td></tr></table></figure>
<p>Watch the output once again to confirm the playbook’s success. </p>
<hr>
<p>That’s about it. You could check your droplet manually and take a look at what’s actually changed if you really like, but the earlier output from running the Ansible playbook is of course your verification, on what’s been carried out. </p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Ansible posts can be found on the Trades page.</a></p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://docs.ansible.com/ansible/latest/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module" target="_blank" rel="external">How do I generate crypted passwords for the user module?</a></li>
<li><a href="https://stackoverflow.com/questions/19292899/creating-a-new-user-and-password-with-ansible" target="_blank" rel="external">Stack Overflow - Creating a new user and password with Ansible</a></li>
<li><a href="https://github.com/ansible/ansible-examples/blob/master/language_features/user_commands.yml" target="_blank" rel="external">GitHub Repository - ansible-examples/language_features/user_commands.yml</a></li>
<li><a href="https://ejosh.co/de/2015/05/ansible-for-server-provisioning/" target="_blank" rel="external">Ansible for Server Provisioning - Docker Involvement</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-ansible-roles-to-abstract-your-infrastructure-environment" target="_blank" rel="external">Digital Ocean - How to Use Ansible Roles to Abstract your Infrastructure Environment</a></li>
<li><a href="https://git.lumc.nl/humgen/server-provisioning/tree/debian-jessie" target="_blank" rel="external">GitLab Server - Human Genetics/Server Provisioning Repo (Old Version)</a></li>
<li><a href="https://git.lumc.nl/humgen-devops/ansible-role-base-server/tree/master" target="_blank" rel="external">GitLab Server - Human Genetics Devops / ansible-role-base-server (New Version)</a></li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0YogZaW.png&quot; alt=&quot;Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;One of the many purposes of Ansible is to easily, quickly, and efficiently &lt;em&gt;provision&lt;/em&gt; new server infrastructure. The use of configuration management tools in server provisioning can be quite essential, as it provides a very flexible solution in regards to deploying and managing new hosts. This post goes through a very simple example playbook that uses Ansible roles to break up and organise the provisioning process. If you haven’t used Ansible to setup a server before this is a good place to start. The idea can then be expanded upon to add more individual components or specific ideas. &lt;/p&gt;
&lt;p&gt;The Playbook is intended for Linux hosts running Debian 8 (Jessie) and is tested using a suitable &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant VM&lt;/a&gt;. After the testing, towards the end of the post, the playbook is then deployed to several newly created Debian 8 droplets on &lt;a href=&quot;https://www.digitalocean.com/?refcode=e91058dbfc7b&quot;&gt;Digital Ocean&lt;/a&gt;. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="CM" scheme="http://www.tricksofthetrades.net/tags/CM/"/>
    
      <category term="Python" scheme="http://www.tricksofthetrades.net/tags/Python/"/>
    
      <category term="Jessie" scheme="http://www.tricksofthetrades.net/tags/Jessie/"/>
    
  </entry>
  
  <entry>
    <title>How to Install and Get Started with Vagrant in 2017</title>
    <link href="http://www.tricksofthetrades.net/2017/05/17/vagrant-started/"/>
    <id>http://www.tricksofthetrades.net/2017/05/17/vagrant-started/</id>
    <published>2017-05-16T23:00:00.000Z</published>
    <updated>2018-05-14T16:11:15.408Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/mw4s7ic.png" alt="Vagrant Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Despite its age and familiarity to most nowadays I couldn’t find a straight forward post on how to install and get started using Vagrant. So here’s my notes on doing so in blog post format. Be aware that this is well trodden ground and the Vagrant documentation on their website has a similar set of steps and content. The official site, if not this will get you where you need to be when it comes to getting started with Vagrant. </p>
<blockquote>
<p><a href="https://www.vagrantup.com/intro/getting-started/index.html" target="_blank" rel="external">Official Vagrant Website - Getting Started</a></p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="1-–-Install-VirtualBox"><a href="#1-–-Install-VirtualBox" class="headerlink" title="1 – Install VirtualBox"></a>1 – Install VirtualBox</h1><p>Our provider choice will be VirtualBox. The <em>provider</em> describes the software in charge of creating then managing the virtual machines comissioned by Vagrant. The two major providers are VirtualBox and VMware, VirtualBox is free and open source, whereas VMware is not. </p>
<p><a href="https://www.virtualbox.org/wiki/Linux_Downloads" target="_blank" rel="external">Find the correct installation procedure for your flavour of Linux here.</a></p>
<p>On Ubuntu you would add this line to the bottom of your <code>sources.list</code> file:</p>
<p><code>deb http://download.virtualbox.org/virtualbox/debian xenial contrib</code></p>
<p>Replacing <code>xenial</code> for your own distributions release codename. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>You can find this codename if you don’t already know it by running this command; back on the prompt. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release <span class="_">-a</span></span><br></pre></td></tr></table></figure>
<p>For Debian 8 (“Jessie”) and Ubuntu 16.04 (“Xenial”) or later distributions. Download and add the repositories PGP key. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<p>Update the apt-get package database and install the <code>virtualbox</code> packages. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install virtualbox</span><br></pre></td></tr></table></figure>
<p>VirtualBox is now installed and ready to use. </p>
<hr>
<h1 id="2-–-Install-Vagrant"><a href="#2-–-Install-Vagrant" class="headerlink" title="2 – Install Vagrant"></a>2 – Install Vagrant</h1><p><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">Find the correct binary for your version of Linux, then download it with the URL and Wget.</a></p>
<p>Here’s the <code>wget</code> command and correct URL for downloading the latest version of Vagrant on Debian (at the time of writing this) - yours may differ.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://releases.hashicorp.com/vagrant/2.1.1/vagrant_2.1.1_x86_64.deb ~</span><br></pre></td></tr></table></figure>
<p>To then install the binary as a package on the system, use:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -i vagrant_2.1.1_x86_64.deb</span><br></pre></td></tr></table></figure>
<p>You can remove the Vagrant <code>.deb</code> build file from your user’s home directory now, after it’s been installed. </p>
<hr>
<h2 id="3-–-Download-and-Use-a-Vagrant-Box"><a href="#3-–-Download-and-Use-a-Vagrant-Box" class="headerlink" title="3 – Download and Use a Vagrant Box"></a>3 – Download and Use a Vagrant Box</h2><p>Make a temporary test directory, and change into it, before continuing. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/vagrant-test &amp;&amp; <span class="built_in">cd</span> vagrant-test</span><br></pre></td></tr></table></figure>
<p>To test the install, you can download and run a basic Vagrant box as a VM by running the next set of commands.</p>
<p>So we’re clear, here’s a good definition of a what a Vagrant “box” actually is: </p>
<blockquote>
<p>“A package containing a representation of a virtual machine running a specific operating system. To be more simple, it is a base image of any Operating System or Kernel. It may be for a specific Provider.”</p>
</blockquote>
<p>The box is the image, and from this image a virtual machine (VM) is created on the localhost. </p>
<p>The basic Vagrant configuration for this VM will be based in one file, the <code>Vagrantfile</code>. </p>
<p>This file is placed in the <code>~/vagrant-test</code> directory via:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init ubuntu/xenial64</span><br></pre></td></tr></table></figure>
<p>There are a wide variety of different box types (various OS images) listed on <a href="https://atlas.hashicorp.com/boxes/search" target="_blank" rel="external">Hashi corp’s  Atlas index.</a></p>
<p>After issuing the next command Vagrant will start to download the box and attempt to create and run a VM through VirtualBox.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure>
<p>Here’s an example of what the progress output looks like for this:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">==&gt; default: Box <span class="string">'ubuntu/xenial64'</span> could not be found. Attempting to find and install...</span><br><span class="line">    default: Box Provider: virtualbox</span><br><span class="line">    default: Box Version: &gt;= 0</span><br><span class="line">==&gt; default: Loading metadata <span class="keyword">for</span> box <span class="string">'ubuntu/xenial64'</span></span><br><span class="line">    default: URL: https://atlas.hashicorp.com/ubuntu/xenial64</span><br><span class="line">==&gt; default: Adding box <span class="string">'ubuntu/xenial64'</span> (v2017.05.01) <span class="keyword">for</span> provider: virtualbox</span><br><span class="line">    default: Downloading: https://vagrantcloud.com/ogarcia/boxes/archlinux-x32/versions/2017.05.01/providers/virtualbox.box</span><br><span class="line">==&gt; default: Successfully added box <span class="string">'ubuntu/xenial64'</span> (v2017.05.01) <span class="keyword">for</span> <span class="string">'virtualbox'</span>!</span><br><span class="line">==&gt; default: Importing base box <span class="string">'ubuntu/xenial64'</span>...</span><br><span class="line">==&gt; default: Matching MAC address <span class="keyword">for</span> NAT networking...</span><br><span class="line">==&gt; default: Checking <span class="keyword">if</span> box <span class="string">'ubuntu/xenial64'</span> is up to date...</span><br><span class="line">==&gt; default: Setting the name of the VM: vagrant-testing_default_1494195673719_66642</span><br><span class="line">==&gt; default: Clearing any previously <span class="built_in">set</span> network interfaces...</span><br><span class="line">==&gt; default: Preparing network interfaces based on configuration...</span><br><span class="line">    default: Adapter 1: nat</span><br><span class="line">==&gt; default: Forwarding ports...</span><br><span class="line">    default: 22 (guest) =&gt; 2222 (host) (adapter 1)</span><br><span class="line">==&gt; default: Booting VM...</span><br><span class="line">==&gt; default: Waiting <span class="keyword">for</span> machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br><span class="line">    default: </span><br><span class="line">    default: Vagrant insecure key detected. Vagrant will automatically replace</span><br><span class="line">    default: this with a newly generated keypair <span class="keyword">for</span> better security.</span><br><span class="line">    default: </span><br><span class="line">    default: Inserting generated public key within guest...</span><br><span class="line">    default: Removing insecure key from the guest <span class="keyword">if</span> it<span class="string">'s present...</span><br><span class="line">    default: Key inserted! Disconnecting and reconnecting using new SSH key...</span><br><span class="line">==&gt; default: Machine booted and ready!</span><br><span class="line">==&gt; default: Checking for guest additions in VM...</span><br><span class="line">    default: The guest additions on this VM do not match the installed version of</span><br><span class="line">    default: VirtualBox! In most cases this is fine, but in rare cases it can</span><br><span class="line">    default: prevent things such as shared folders from working properly. If you see</span><br><span class="line">    default: shared folder errors, please make sure the guest additions within the</span><br><span class="line">    default: virtual machine match the version of VirtualBox you have installed on</span><br><span class="line">    default: your host and reload your VM.</span><br><span class="line">    default: </span><br><span class="line">    default: Guest Additions Version: 5.1.22 r115126</span><br><span class="line">    default: VirtualBox Version: 5.0</span><br><span class="line">==&gt; default: Mounting shared folders...</span><br><span class="line">    default: /vagrant =&gt; /home/scarlz/vagrant-testing</span></span><br></pre></td></tr></table></figure>
<p>You can get an error message here relating to CPU architecture if you use a box that isn’t intended for your host’s operating system.</p>
<p>For example, the first image here requires a 64-bit host operating system, and then the second is for a 32-bit version. The “host” here refers to the machine you installed Vagrant on.</p>
<ul>
<li><a href="https://atlas.hashicorp.com/ubuntu/boxes/xenial64" target="_blank" rel="external">https://atlas.hashicorp.com/ubuntu/boxes/xenial64</a></li>
<li><a href="https://atlas.hashicorp.com/ubuntu/boxes/trusty32" target="_blank" rel="external">https://atlas.hashicorp.com/ubuntu/boxes/trusty32</a></li>
</ul>
<p>In my example we used the first box, a 64-bit system. </p>
<p>Also if you are running Vagrant itself in a virtual machine (using a hypervisor). Then you’ll need to ensure your hypervisor has “VT-x/AMD-V enabled”.</p>
<p>To enable this you’ll have to do something along the lines of:</p>
<ol>
<li>Power off the host virtual machine.</li>
<li>Edit the individual virtual machine’s settings.</li>
<li>Go to the CPU/processors section.</li>
<li>Enable “VT-x/AMD-V” /  “Virtualise Intel VR-x/EPT and AMD-V/RVI”</li>
<li>Then power on the virtual machine again.</li>
<li>Re-run <code>vagrant up</code> in your Vagrant testing directory.</li>
</ol>
<p>Here is what the setting looks like when using VMware Workstation as your hypervisor.</p>
<p><img src="https://i.gyazo.com/2f12d720498b753e09eb79f6f31117c9.png" alt="Vmware CPU Section Image"></p>
<hr>
<h1 id="4-–-Connect-to-a-Running-VM"><a href="#4-–-Connect-to-a-Running-VM" class="headerlink" title="4 – Connect to a Running VM"></a>4 – Connect to a Running VM</h1><p>Once a box is installed and configured to run in a VM (like in step 2), you connect to the VM through an SSH tunnel created by Vagrant. </p>
<p>To connect to the newly running VM with Vagrant use:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure>
<p>The prompt now shows you are connected to your new VM!</p>
<figure class="highlight bash"><figcaption><span>prompt example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu-xenial:~$</span><br></pre></td></tr></table></figure>
<p>Type <code>exit</code> or use <code>CTRL + D</code> to leave the VM’s command line and return to your host. </p>
<hr>
<h1 id="5-–-Vagrant-Sub-commands"><a href="#5-–-Vagrant-Sub-commands" class="headerlink" title="5 – Vagrant Sub-commands"></a>5 – Vagrant Sub-commands</h1><p>These are the commands you’ll find yourself using when working with Vagrant. They use subsets of subcommands - which may seem confusing at first glance. The first is <code>box</code> and has several susbets. Not all however have them.</p>
<h2 id="box"><a href="#box" class="headerlink" title="box"></a><a href="https://www.vagrantup.com/docs/cli/box.html" target="_blank" rel="external">box</a></h2><p>List all the boxes you currently have installed on the host. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box list</span><br></pre></td></tr></table></figure>
<p>Remove an already existing box from Vagrant. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box remove ubuntu/xenial64</span><br></pre></td></tr></table></figure>
<p>Check updates for all box images on your system. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box update</span><br></pre></td></tr></table></figure>
<p>Many of these commands can have the box named appended to them. In order to single them out. </p>
<h2 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a><a href="https://www.vagrantup.com/docs/cli/destroy.html" target="_blank" rel="external">destroy</a></h2><p>The Vagrant documentation sums this command up pretty well:</p>
<blockquote>
<p>“This command stops the running machine Vagrant is managing and destroys all resources that were created during the machine creation process. After running this command, your computer should be left at a clean state, as if you never created the guest machine in the first place.”</p>
</blockquote>
<p>Use it to destroy your created virual machines e.g.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant destroy ubuntu/xenial64</span><br></pre></td></tr></table></figure>
<h2 id="halt"><a href="#halt" class="headerlink" title="halt"></a><a href="https://www.vagrantup.com/docs/cli/halt.html" target="_blank" rel="external">halt</a></h2><p>This command shuts down the running virtual machine Vagrant is currently managing; you can add a machine name/ID to target specific VM’s</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant halt</span><br></pre></td></tr></table></figure>
<h2 id="reload"><a href="#reload" class="headerlink" title="reload"></a><a href="https://www.vagrantup.com/docs/cli/reload.html" target="_blank" rel="external">reload</a></h2><p>This is the same as a <code>vagrant halt</code> but restarts the VM after halting - like with <code>vagrant up</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant reload</span><br></pre></td></tr></table></figure>
<h2 id="port"><a href="#port" class="headerlink" title="port"></a><a href="https://www.vagrantup.com/docs/cli/port.html" target="_blank" rel="external">port</a></h2><p>This allows you to list all the Vagrant guest ports that are mapped to the host ports. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant port</span><br></pre></td></tr></table></figure>
<h2 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh_config"></a><a href="https://www.vagrantup.com/docs/cli/ssh_config.html" target="_blank" rel="external">ssh_config</a></h2><p>Useful for displaying the output of the Vagrant host side SSH configuration file. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh-config</span><br></pre></td></tr></table></figure>
<p>Returns:</p>
<figure class="highlight bash"><figcaption><span>Example Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host default</span><br><span class="line">  HostName 127.0.0.1</span><br><span class="line">  User ubuntu</span><br><span class="line">  Port 2222</span><br><span class="line">  UserKnownHostsFile /dev/null</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">  PasswordAuthentication no</span><br><span class="line">  IdentityFile /home/scarlz/vagrant-ubuntu-test/.vagrant/machines/default/virtualbox/private_key</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">  LogLevel FATAL</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="6-–-Miscellaneous"><a href="#6-–-Miscellaneous" class="headerlink" title="6 – Miscellaneous"></a>6 – Miscellaneous</h2><p>Should there ever be any SSH connection issues to a VM. The connection log can be seen by appending <code>--debug</code> to the command. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh --debug</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> This <code>--debug</code> flag can be added onto most Vagrant commands to see the internal operations being carried out. </p>
</blockquote>
<p>Checking the status of the current Vagrant virtual machine is possible by entering:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant status</span><br></pre></td></tr></table></figure>
<p>A global version also exists.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant global-status</span><br></pre></td></tr></table></figure>
<p>Adding the <code>--prune</code> flag updates the cache for this - thereby removing any old, dead entries from the output. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant global-status --prune</span><br></pre></td></tr></table></figure>
<p>Looking back to the <code>Vagrantfile</code> configuration. We can see that there are different options on offer to configure the resultant VM(s). </p>
<p>One to highlight is the VM name that is assigned to both the provider (VirtualBox) and internal Vagrant machine “name”. </p>
<p>This is the code to explicitly define it in both instances, if you ever want to:</p>
<figure class="highlight bash"><figcaption><span>Vagrantfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(VAGRANTFILE_API_VERSION) <span class="keyword">do</span> |config|</span><br><span class="line"></span><br><span class="line"> config.vm.define <span class="string">"ubuntu_test_vm"</span> <span class="keyword">do</span> |vmname|</span><br><span class="line"> end</span><br><span class="line">  </span><br><span class="line"> config.vm.provider :virtualbox <span class="keyword">do</span> |vb|</span><br><span class="line">     vb.name = <span class="string">"ubuntu_test_vm"</span></span><br><span class="line"> end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>Line 3 determines the <code>&quot;name&quot;</code> listed when issuing: <code>vagrant global-status</code></p>
<p>Whilst line 5/6 ensures VirtualBox names and displays the VM properly in its GUI. </p>
<p><img src="https://i.imgur.com/CrSEOo4.png" alt="VirtualBox Ubuntu VM Image"></p>
<p><a href="https://www.vagrantup.com/docs/vagrantfile/" target="_blank" rel="external">How the Vagrantfile works in terms of configuration is described in detail here.</a></p>
<hr>
<h2 id="7-–-Autocompletion"><a href="#7-–-Autocompletion" class="headerlink" title="7 – Autocompletion"></a>7 – Autocompletion</h2><p>A nice addition to Vagrant is shell auto completion (Bash shell) for when typing in the above commands.  An up to date (at the time of writing this) repo which provides this is located here: </p>
<blockquote>
<p><a href="https://github.com/brbsix/vagrant-bash-completion" target="_blank" rel="external">https://github.com/brbsix/vagrant-bash-completion</a></p>
</blockquote>
<p>This is a fork of <a href="https://github.com/kura/vagrant-bash-completion" target="_blank" rel="external">Kura’s old repo</a>; thanks go to him for maintaining this up until now. Here’s the provided “easiest” method of downloading this functionality to your Linux/Unix host system. </p>
<p><code>wget</code> the script file in the above repo. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -q https://raw.github.com/brbsix/vagrant-bash-completion/master/vagrant-bash-completion/etc/bash_completion.d/vagrant</span><br></pre></td></tr></table></figure>
<p>Add the newly downloaded file to the system Bash completion directory - whilst modifying the file’s permissions. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo install -m 0644 vagrant /etc/bash_completion.d/</span><br></pre></td></tr></table></figure>
<p>Now either close and re-open your terminal, or <code>source</code> in the new <code>/etc/bash_completion.d/vagrant</code> bash completion file. To get the new auto-completion working. </p>
<hr>
<h1 id="8-–-Further-Reading"><a href="#8-–-Further-Reading" class="headerlink" title="8 – Further Reading"></a>8 – Further Reading</h1><p>Erika Heidi has recently revisited and updated her great in-depth book dedicated to Vagrant. For a full run down of Vagrant and how to add configuration management tools into the mix. I’d highly recommend this book. </p>
<p><img src="https://i.imgur.com/0kT5WIB.png" alt="Cookbook - Frontcover"></p>
<blockquote>
<p><a href="https://leanpub.com/vagrantcookbook" target="_blank" rel="external">https://leanpub.com/vagrantcookbook</a></p>
</blockquote>
<p>There’s an accompanying blog post from February 2017 that she’s put together on recent Vagrant usage and trends. It’s quite short and worth reading if you’re interested.</p>
<blockquote>
<p><a href="http://www.erikaheidi.com/blog/vagrant-usage-research-2017/" target="_blank" rel="external">http://www.erikaheidi.com/blog/vagrant-usage-research-2017/</a></p>
</blockquote>
<p>The infographic (which I’ll leave here) is the main takeaway from the post:</p>
<p><img src="http://www.erikaheidi.com/files/2017-02/vagrant-research-2017.png" alt="The State of Vagrant Infographic"></p>
<hr>
<p>Vagrant is a slightly ageing software in the sense that many prefer more recent tools like Docker. It does however still have its uses and is quite well adopted these days, so it’s more than worth understanding at least the basics.</p>
<p>Enjoy your time with Vagrant.  </p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/17175696/running-vagrant-inside-vmware-vm" target="_blank" rel="external">Stack Overflow - Running Vagrant Inside VMWare VM</a> – As mentioned in step 2. </li>
<li><a href="https://stackoverflow.com/questions/22922891/vagrant-ssh-authentication-failure" target="_blank" rel="external">Stack Overflow - Vagrant ssh authentication failure</a> – An issue that seems to occur with the official Vagrant Ubuntu images. </li>
<li><a href="https://stackoverflow.com/questions/17845637/how-to-change-vagrant-default-machine-name" target="_blank" rel="external">Stack Overflow - How to change Vagrant ‘default’ machine name?</a> – Complex but comprehensive thread for this. </li>
<li><a href="https://stackoverflow.com/questions/24440142/removing-list-of-vms-in-vagrant-cache" target="_blank" rel="external">Stack Overflow - Removing list of vms in vagrant cache</a> – For when the status output is not accurate/updating. </li>
<li><a href="https://github.com/mitchellh/vagrant/issues/5186" target="_blank" rel="external">“Warning: Authentication failure. Retrying…”</a> – A very detailed long-term GitHub thread detailing the aforementioned issue. </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/mw4s7ic.png&quot; alt=&quot;Vagrant Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Despite its age and familiarity to most nowadays I couldn’t find a straight forward post on how to install and get started using Vagrant. So here’s my notes on doing so in blog post format. Be aware that this is well trodden ground and the Vagrant documentation on their website has a similar set of steps and content. The official site, if not this will get you where you need to be when it comes to getting started with Vagrant. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vagrantup.com/intro/getting-started/index.html&quot;&gt;Official Vagrant Website - Getting Started&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ubuntu" scheme="http://www.tricksofthetrades.net/tags/Ubuntu/"/>
    
      <category term="Virtualisation" scheme="http://www.tricksofthetrades.net/tags/Virtualisation/"/>
    
      <category term="Vagrant" scheme="http://www.tricksofthetrades.net/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title>Ansible - Playbook Concepts (4)</title>
    <link href="http://www.tricksofthetrades.net/2017/04/10/ansible-playbooks/"/>
    <id>http://www.tricksofthetrades.net/2017/04/10/ansible-playbooks/</id>
    <published>2017-04-09T23:00:00.000Z</published>
    <updated>2017-08-29T18:22:31.985Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/9HBs9cy.png" alt="Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Playbooks are written in YAML like the configuration files and are the basis for Ansible’s configuration management and en-masse multi-machine deployment. </p>
<p>These are very powerful not only for declaring server configurations but also to orchestrate steps of any manual ordered process, even when the different steps must bounce back and forth between sets of machines in any order, as playbooks can launch tasks synchronously or asynchronously as required.</p>
<p>While it’s suitable to use the <code>/usr/bin/ansible</code> program for ad-hoc commands and tasks. Playbooks are better kept in source control and used to push out larger configurations, or assure the configurations of your remote systems are still in check. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Playbook-Examples"><a href="#1-–-Playbook-Examples" class="headerlink" title="1 – Playbook Examples"></a>1 – Playbook Examples</h1><p>Here are some initial examples of Ansible playbooks. A playbook by definition is composed of one or more <em>plays</em> in a list.</p>
<p>The goal of each play is to map a group of hosts to some well defined role, through actions within the play Ansible calls tasks. Put simply though, a task is nothing more than a call to a preset Ansible <a href="http://www.tricksofthetrades.net/2017/03/20/ansible-adhoc-modules/">module</a>. </p>
<p>By composing a playbook of multiple ‘plays’, it is possible to orchestrate multi-machine deployments. Running certain steps on all machines in the “webservers” group, then certain steps on the “databases” server group, and then more commands back on the “webservers” group, etc. </p>
<p>The first snippet and playbook sets up Apache web server on hosts in the <code>webservers</code> group. Notice the variables declared, remote user in use, and handlers towards the end. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    http_port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    max_clients:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">at</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">version</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=httpd</span> <span class="string">state=latest</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">write</span> <span class="string">the</span> <span class="string">apache</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    template:</span> <span class="string">src=/srv/httpd.j2</span> <span class="string">dest=/etc/httpd.conf</span></span><br><span class="line"><span class="attr">    notify:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span> <span class="string">(and</span> <span class="string">enable</span> <span class="string">it</span> <span class="string">at</span> <span class="string">boot)</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure>
<p>This second example uses tasks that have really long parameters, and modules that take many parameters. When this is the case you can break tasks items over multiple lines to improve the playbook readability and structure. Breaking up tasks is achieved by using YAML dictionaries to supply the modules with their <em>key=value</em> arguments.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    http_port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    max_clients:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">at</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">version</span></span><br><span class="line"><span class="attr">    yum:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">latest</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">write</span> <span class="string">the</span> <span class="string">apache</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    template:</span></span><br><span class="line"><span class="attr">      src:</span> <span class="string">/srv/httpd.j2</span></span><br><span class="line"><span class="attr">      dest:</span> <span class="string">/etc/httpd.conf</span></span><br><span class="line"><span class="attr">    notify:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line"><span class="attr">    service:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">started</span></span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">      service:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">        state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure>
<p>This final example contains not just one but two plays. The first targets the <code>webservers</code> host group and the second targets the <code>databases</code> host group. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">at</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">version</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=httpd</span> <span class="string">state=latest</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">write</span> <span class="string">the</span> <span class="string">apache</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    template:</span> <span class="string">src=/srv/httpd.j2</span> <span class="string">dest=/etc/httpd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">databases</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">postgresql</span> <span class="string">is</span> <span class="string">at</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">version</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=postgresql</span> <span class="string">state=latest</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">that</span> <span class="string">postgresql</span> <span class="string">is</span> <span class="string">started</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=postgresql</span> <span class="string">state=started</span></span><br></pre></td></tr></table></figure>
<p>See the <a href="https://github.com/ansible/ansible-examples" target="_blank" rel="external">ansible/ansible-examples</a> GitHub repository for some fully fledged and properly structured Playbook configuration examples. </p>
<hr>
<h1 id="2-–-Playbook-Hosts-and-Users"><a href="#2-–-Playbook-Hosts-and-Users" class="headerlink" title="2 – Playbook Hosts and Users"></a>2 – Playbook Hosts and Users</h1><p>For each “play” in a playbook, you get to choose the servers/hosts in your infrastructure you want to target, and which remote Linux user to complete the steps in the play as (remember the steps are called tasks).</p>
<p>The <code>hosts</code> line at the start of a play is a list of one or more groups, or if needed a <a href="http://docs.ansible.com/ansible/intro_patterns.html" target="_blank" rel="external">host pattern</a>. The <code>remote_user</code> holds the name of the target Linux/Unix user account.</p>
<p>For example:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>Remote users can also be set per task instead of just for the entire play. Such as in this example where the task <code>test connection</code> uses a different user to the overall play. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">test</span> <span class="string">connection</span></span><br><span class="line"><span class="attr">      ping:</span></span><br><span class="line"><span class="attr">      remote_user:</span> <span class="string">scarlz</span></span><br></pre></td></tr></table></figure>
<p>The <code>become</code> and <code>become_method</code> items allow a change of privileges from within the SSH user’s session. This is useful for using shell programs like <code>sudo</code> for tasks that need <a href="http://docs.ansible.com/ansible/become.html" target="_blank" rel="external">higher privileges</a>.</p>
<p>Like here: </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">scarlz</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">    - service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span></span><br><span class="line"><span class="attr">      become:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">      become_method:</span> <span class="string">sudo</span></span><br></pre></td></tr></table></figure>
<p>In these cases you must provide the necessary password using <code>--ask-become-pass</code> when running the playbook itself with <code>ansible-playbook</code> from the command line - covered later on. </p>
<p>Using <code>become_user</code> similarly allows a change of user from within the play’s SSH user shell session. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">scarlz</span></span><br><span class="line"><span class="attr">  become:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">  become_user:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>
<p>Let’s look more at the tasks themselves and what they can do. </p>
<hr>
<h1 id="3-–-Playbook-Tasks"><a href="#3-–-Playbook-Tasks" class="headerlink" title="3 – Playbook Tasks"></a>3 – Playbook Tasks</h1><p>As seen each play contains its own list of tasks. Tasks are executed in order, one at a time, against all machines matched by the host group or pattern. So keep in mind that all hosts are going to receive and process the same task directives issued. </p>
<p>Also when running a playbook, any hosts that end up with failed tasks are taken out of the rotation for the entire playbook run. If things fail, simply correct the playbook file (or host connectivity issue) and rerun it.</p>
<p>As seen in the first section of this post, the goal of each task is to execute a module, with set variables passed to that module if needed. </p>
<p>Here is an omitted example:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    http_port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    max_clients:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">make</span> <span class="string">sure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span></span><br></pre></td></tr></table></figure>
<p>Importantly though module use should also be “idempotent”. That is to say, when running a module multiple times in a sequence, it should have the same end result as if you had run it only once. One way to achieve this state of idem-potency in playbooks is to have a module check whether its desired final state has already been achieved, and if that state has been achieved, to instead exit without performing any actions. </p>
<p>So if all the modules a playbook uses are idempotent, then the playbook itself is likely to be idempotent too (overall), so re-running the playbook multiple times should be safe and not create any issues.</p>
<blockquote>
<p><strong>Note:</strong> The <code>command</code> and <code>shell</code> modules will typically rerun the same command issued again, which is fine if the command is something that does not change the outcome of its initial execution, when run multiple times. There is also a “creates” flag available here which can be used to make these two modules idempotent. </p>
</blockquote>
<p>Furthermore every task should have a <code>name</code>, which is included in the output from running the playbook, and serves as more of a description than a moniker. Due to this It is useful to provide good descriptions for each task step. </p>
<blockquote>
<p><strong>Note:</strong> If a <code>name</code> is not provided, the string fed to ‘action’ will be used for output.</p>
</blockquote>
<p>As with most modules, the <code>service</code> module takes arguments in the key=value format.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">make</span> <span class="string">sure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span></span><br></pre></td></tr></table></figure>
<p>The <code>command</code> and <code>shell</code> modules are the only modules that take a list of arguments and don’t use the key=value form as normal. </p>
<p>This makes them work in the same way as you would expect them to on the command line e.g. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">disable</span> <span class="string">selinux</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">/sbin/setenforce</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>The <code>command</code> and <code>shell</code> module care about return codes, so if you have a command where the successful exit code is not zero, you can alter it to this:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">run</span> <span class="string">this</span> <span class="string">command</span> <span class="string">and</span> <span class="string">ignore</span> <span class="string">the</span> <span class="string">result</span></span><br><span class="line"><span class="attr">    shell:</span> <span class="string">/usr/bin/somecommand</span> <span class="string">||</span> <span class="string">/bin/true</span></span><br></pre></td></tr></table></figure>
<p>If the action line of the module is getting too long, you can break it on a space character and indent any continued lines to improve readability. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Copy</span> <span class="string">ansible</span> <span class="string">inventory</span> <span class="string">file</span> <span class="string">to</span> <span class="string">client</span></span><br><span class="line"><span class="attr">    copy:</span> <span class="string">src=/etc/ansible/hosts</span> <span class="string">dest=/etc/ansible/hosts</span></span><br><span class="line">            <span class="string">owner=root</span> <span class="string">group=root</span> <span class="string">mode=0644</span></span><br></pre></td></tr></table></figure>
<p>Variables declared can be explicitly used in task action lines, not just in <em>templates</em> (templates not covered yet). </p>
<p>The variable is called using the word <code>vhost</code> inside of the curly braces, in the example below:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    vhost:</span> <span class="string">blog-site.conf</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">a</span> <span class="string">virtual</span> <span class="string">host</span> <span class="string">file</span> <span class="string">for</span> <span class="string">&#123;&#123;</span> <span class="string">vhost</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    template:</span> <span class="string">src=somefile.j2</span> <span class="string">dest=/etc/httpd/conf.d/&#123;&#123;</span> <span class="string">vhost</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>To carry on the concept and practice introduced here of idem-potency in Ansible. The next section talks about <em>handlers</em>.</p>
<hr>
<h1 id="4-–-Playbook-Handlers"><a href="#4-–-Playbook-Handlers" class="headerlink" title="4 – Playbook Handlers"></a>4 – Playbook Handlers</h1><p>Modules should be idempotent as described in the last section, so they can relay back whether they have made a change on the remote system or not. Playbooks have the ability to recognise these changes and also have a basic event system that can be used to respond to change. </p>
<p><code>notify</code> actions are triggered at the end of each block of tasks in a play, and will only be triggered once. Even if notified and triggered by multiple different tasks. For instance, multiple resources may indicate that Apache needs to be restarted because they have changed a config file, but Apache will only be restarted once to avoid multiple unnecessary restarts.</p>
<p>Here’s an example of restarting two services in a task when the contents of a file change, but only if the file changes. The items listed in the notify section of the task are called handlers.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">template</span> <span class="string">configuration</span> <span class="string">file</span></span><br><span class="line"><span class="attr">  template:</span> <span class="string">src=template.j2</span> <span class="string">dest=/etc/foo.conf</span></span><br><span class="line"><span class="attr">  notify:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">restart</span> <span class="string">memcached</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">restart</span> <span class="string">apache</span></span><br></pre></td></tr></table></figure>
<p>Handlers are lists of tasks (not really any different from regular tasks) that are referenced by a globally unique name, and are notified by notifiers. If a handler is never referenced/notified it will not run. As inferred earlier, regardless of how many tasks notify a handler, it will run only once, and after all of the tasks complete in a particular play.</p>
<p>Here’s an example of a <code>handlers</code> section with some defined tasks:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">handlers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">memcached</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">name=memcached</span> <span class="string">state=restarted</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">name=apache</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="5-–-Running-Playbooks"><a href="#5-–-Running-Playbooks" class="headerlink" title="5 – Running Playbooks"></a>5 – Running Playbooks</h1><p>Now that you’ve learned much of the groundwork for playbook syntax, we should look at how to run a completed playbook. </p>
<p>To run a playbook use the <code>anisble-playbook</code> command followed by the path to the playbook file. In this scenario it’s in the current working directory and named <code>playbook.yml</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook playbook.yml <span class="_">-f</span> 10</span><br></pre></td></tr></table></figure>
<p>The <code>-f 10</code> specifies the usage of 10 simultaneous Ansible processes at once. </p>
<p>When executing a playbook there will always be a summary of the nodes/hosts that were targeted and how they fared with the instructions. General failures and fatal unreachable attempts by the playbook execution are kept separate in the “counts”.</p>
<p>The <code>--verbose</code> flag tagged onto the <code>ansible-playbook</code> command results in a more detailed account of the results of a playbook run. Furthermore the <code>--list-hosts</code> flag shows which hosts are to be affected by a playbook before you run it. </p>
<p>It’s possible to invert the architecture of Ansible, forcing nodes/hosts check in to a central location instead of pushing configuration out externally, by using the <code>ansible-pull</code> script. </p>
<p>Run the help option to see details on this if interested.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-pull --help</span><br></pre></td></tr></table></figure>
<p>As an aside, some say that Ansible playbook output is vastly upgraded if the <code>cowsay</code> package is installed on your system. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian / Ubuntu</span></span><br><span class="line">$ sudo apt-get install cowsay </span><br><span class="line"><span class="comment"># Arch Linux</span></span><br><span class="line">$ sudo pacman -S cowsay</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="7-–-Ansible-Templating"><a href="#7-–-Ansible-Templating" class="headerlink" title="7 – Ansible Templating"></a>7 – Ansible Templating</h1><p>Templates in Ansible are constructed using the Jinja2 Python templating language, and reside in their own files. They are capable of referencing variables from outside sources, such as from within the playbook using the template and the outer Ansible file inventory e.g. a <code>main.yml</code> file within an upper <code>/vars</code> directory.</p>
<p>Templates are typically useful for setting up configuration files, to make them and other files more versatile or reusable among playbooks. They can have any file name but the <code>.tpl</code> or <code>.j2</code> extensions are common. </p>
<p>Below is a template example for setting up an Apache virtual host. It uses a variable for setting up the document root on each Ansible host:</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">    <span class="attribute">ServerAdmin</span> webmaster@localhost</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> &#123;&#123; doc_root &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">&lt;Directory &#123;&#123; doc_root &#125;&#125;&gt;</span></span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<p>The inbuilt module <code>template:</code> is used to apply a template file in a task. For example, if you named a template file <code>vhost.tpl</code> and you placed it inside the same directory as your playbook, this is how you would make use of the template to replace the default Apache virtual host, on your Ansible hosts:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Alter</span> <span class="string">the</span> <span class="string">default</span> <span class="string">Apache</span> <span class="string">virtual</span> <span class="string">host</span></span><br><span class="line"><span class="attr">  template:</span> <span class="string">src=vhost.tpl</span> <span class="string">dest=/etc/apache2/sites-available/000-default.conf</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="8-–-Roles-in-Playbooks"><a href="#8-–-Roles-in-Playbooks" class="headerlink" title="8 – Roles in Playbooks"></a>8 – Roles in Playbooks</h1><p>Roles work best for more complex playbooks that have many multiple but related tasks. Each role contains only the relevant data and information needed to carry out said tasks. As there are usually multiple stages to a task or set of tasks, playbooks can get very lengthy and congested with all their operations. So confining tasks to roles helps alleviate this problem. </p>
<p>As an example, a playbook that installs Nginx, likely involves adding the stable package repository, then installing the package itself, as well as setting up all the configuration for the web server. The final configuration step no doubt requires extra data such as variables, files, dynamic templates, and more. These are bet kept in their own role’s area.</p>
<p>The file-system for a role looks like the below, where <code>rolename</code> is the root directory, and the options are the subsequent directory areas for each piece of information. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">rolename</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">files</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">handlers</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">meta</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">templates</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">tasks</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">vars</span></span><br></pre></td></tr></table></figure>
<p>Within each of the individual directory areas above, Ansible will search for a <code>main.yml</code> file automatically. Any every piece of configuration for the role in question is contained within these locations. </p>
<hr>
<p>After understanding how each of these different concepts work together to create a playbook. You can go on to make your own from scratch, from other examples, or by converting your older setup scripts. </p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Ansible posts can be found on the Trades page.</a></p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="http://docs.ansible.com/ansible/playbooks_intro.html" target="_blank" rel="external">Official Ansible Documentation - Intro to Playbooks</a> – Most of the base content for this post was garnered from here.</li>
<li><a href="https://www.digitalocean.com/community/tutorials/configuration-management-101-writing-ansible-playbooks" target="_blank" rel="external">Digital Ocean - Configuration Management 101: Writing Ansible Playbooks</a> – Some of the basic playbook examples and ideas are taken from this.</li>
<li><a href="https://serversforhackers.com/an-ansible-tutorial" target="_blank" rel="external">Servers for Hackers - An Ansible Tutorial</a> – Shows a great real world example for creating an Nginx playbook; among other things.</li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9HBs9cy.png&quot; alt=&quot;Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Playbooks are written in YAML like the configuration files and are the basis for Ansible’s configuration management and en-masse multi-machine deployment. &lt;/p&gt;
&lt;p&gt;These are very powerful not only for declaring server configurations but also to orchestrate steps of any manual ordered process, even when the different steps must bounce back and forth between sets of machines in any order, as playbooks can launch tasks synchronously or asynchronously as required.&lt;/p&gt;
&lt;p&gt;While it’s suitable to use the &lt;code&gt;/usr/bin/ansible&lt;/code&gt; program for ad-hoc commands and tasks. Playbooks are better kept in source control and used to push out larger configurations, or assure the configurations of your remote systems are still in check. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="CM" scheme="http://www.tricksofthetrades.net/tags/CM/"/>
    
      <category term="Python" scheme="http://www.tricksofthetrades.net/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ansible - Ad Hoc Commands and Modules (3)</title>
    <link href="http://www.tricksofthetrades.net/2017/03/20/ansible-adhoc-modules/"/>
    <id>http://www.tricksofthetrades.net/2017/03/20/ansible-adhoc-modules/</id>
    <published>2017-03-20T00:00:00.000Z</published>
    <updated>2017-09-25T18:42:40.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/9HBs9cy.png" alt="Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Several ad hoc commands were shown in the previous post but no real detail was given as to what they can fully offer. These <em>ad hoc</em> commands are often cited as being a good starter point for learning what’s possible with Ansible; without having to dive straight into writing a playbook. Most of them incorporate the use of a <em>module</em> into their structure, so this post introduces modules too. Both from the point of view of an ad hoc command, and within the context of a task. Towards the end, the “special” Ansible module types are shown. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Ad-Hoc-Commands"><a href="#1-–-Ad-Hoc-Commands" class="headerlink" title="1 – Ad Hoc Commands"></a>1 – Ad Hoc Commands</h1><p>Sometimes you may not need nor want to write a fully fledged playbook for simple operations. Either way the concepts here for these commands port directly over to the playbook language for when you do begin writing them later on. These due to their impromptu nature and use,. </p>
<p>In their simplest form these commands are shell commands performed in parallel to each host by Ansible. </p>
<p>Here <code>coreservers</code> is the group name that contains several hosts and the ad hoc command <code>-a</code> we are running on them is <code>/sbin/reboot</code> using <code>10</code> Ansible forks. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers <span class="_">-a</span> <span class="string">"/sbin/reboot"</span> <span class="_">-f</span> 10 -b -K</span><br></pre></td></tr></table></figure>
<p>The <code>-f 10</code> in the above specifies the usage of 10 simultaneous processes to use (10 hosts at a time). You can also set this as an assumed default in the configuration file to avoid setting it here. The default is set to 5, which is lacking and conservative, so feel free to increase this value to a more optimal number. </p>
<p>Ansible defaults to running from your current user account (or from any hosts variables). To change this pass in the <code>-u</code> option. Where <code>scarlz</code> is the username you want to run the command as. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers <span class="_">-a</span> <span class="string">"/usr/bin/foo"</span> -u scarlz</span><br></pre></td></tr></table></figure>
<p>When not calling raw programs on the node through Ansible, modules are the main choice for carrying out operations. </p>
<p>In general the <code>-m</code> option denotes a named module. Here is an example of the <code>shell</code> module that is used to issue precise commands on the Ansible node. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -u scarlz -m shell <span class="_">-a</span> <span class="string">'echo $TERM'</span></span><br></pre></td></tr></table></figure>
<p>There are a whole back-catalogue of these inbuilt modules for you to make use of. </p>
<hr>
<h1 id="2-–-Modules"><a href="#2-–-Modules" class="headerlink" title="2 – Modules"></a>2 – Modules</h1><p>Modules contain the actions or functionality we want to implement and run. Some commonly used modules are apt/yum, copy, ec2, file, service, template, and user. Like shown in the previous section, modules can be used in ad-hoc commands as well as “tasks”.  </p>
<h2 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h2><p>This command transfers a “hosts” file directly to all servers in the “coreservers” group, using SCP and the <code>copy</code> module:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m copy <span class="_">-a</span> <span class="string">"src=/etc/hosts dest=/tmp/hosts"</span> -b -K</span><br></pre></td></tr></table></figure>
<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>The <code>file</code> module provides the ability to change system ownership and permissions on remote files. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m file <span class="_">-a</span> <span class="string">"dest=/var/www/index.html mode=755 owner=scarlz group=www"</span> -b -K</span><br></pre></td></tr></table></figure>
<p>To create directories with <code>file</code>, like when using the <code>mkdir -p</code> command in Linux, add the “directory” <code>state-directory</code> option.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m file <span class="_">-a</span> <span class="string">"dest=/var/www/new-vhost-dir mode=755 owner=scarlz group=www state=directory"</span> -b -K</span><br></pre></td></tr></table></figure>
<p>Delete directories recursively, and delete files through <code>file</code> with the <code>state=absent</code> option.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m file <span class="_">-a</span> <span class="string">"dest=/path/to/delete state=absent"</span></span><br></pre></td></tr></table></figure>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>This module is referred to when you need to interact with the OS system services. Inclusive of  BSD init, OpenRC, SysV, Solaris SMF, systemd, and upstart.</p>
<p>As an example of how this could work, this starts Nginx via systemd:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m service <span class="_">-a</span> <span class="string">"name=nginx.service state=started"</span> -b -K</span><br></pre></td></tr></table></figure>
<p>Changing the state option changes the result - this is to restart:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m service <span class="_">-a</span> <span class="string">"name=nginx.service state=restarted"</span> -b -K</span><br></pre></td></tr></table></figure>
<p>The value of “state” must be one of either: running, started, stopped, restarted, or reloaded.</p>
<h2 id="Users-and-Groups"><a href="#Users-and-Groups" class="headerlink" title="Users and Groups"></a>Users and Groups</h2><p>A module named the “user” module serves as an interface to creating, removing, and manipulating system user accounts. </p>
<p>Altering a user’s password only requires the username, in this next example this is <code>scarlz</code>, then the new password for the user which is substituted in to the <code>&lt;user-password&gt;</code> field.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m user <span class="_">-a</span> <span class="string">"name=scarlz password=&lt;user-password&gt;"</span></span><br></pre></td></tr></table></figure>
<p>Removing the user account completely, once again needs the username (<code>scarlz</code> in my case) as well as the value <code>absent</code> for the <code>state</code> option. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -m user <span class="_">-a</span> <span class="string">"name=scarlz state=absent"</span> -b -K</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Practical-Ad-Hoc-Module-Example"><a href="#Practical-Ad-Hoc-Module-Example" class="headerlink" title="Practical Ad Hoc Module Example"></a>Practical Ad Hoc Module Example</h2><p>The first command updates the Apt package index - similar to running the usual <code>apt-get update</code> command. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -b -K -m apt <span class="_">-a</span> update_cache=yes</span><br></pre></td></tr></table></figure>
<p>Continuing on from before, upgrading the system packages (like with <code>apt-get upgrade</code>) uses: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -b -K -m apt <span class="_">-a</span> upgrade=yes</span><br></pre></td></tr></table></figure>
<p>Performing a <code>dist-upgrade</code> uses the <code>full</code> switch instead of just “yes”.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible coreservers -b -K -m apt <span class="_">-a</span> upgrade=full</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Module-Index"><a href="#Module-Index" class="headerlink" title="Module Index"></a>Module Index</h2><p><a href="http://docs.ansible.com/ansible/modules_by_category.html" target="_blank" rel="external">Here’s a page from the official Ansible documentation</a> that acts as a catalogue for all the registered inbuilt modules available. There are many many modules, to cater for all specific needs. </p>
<hr>
<h1 id="3-–-Modules-in-Tasks"><a href="#3-–-Modules-in-Tasks" class="headerlink" title="3 – Modules in Tasks"></a>3 – Modules in Tasks</h1><p>Here are some examples of using the modules in a task (like you’d find in an Ansible playbook). </p>
<p>The file module (most shown before) creates a new directory to be used for caching purposes. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: add cache directory</span><br><span class="line">  file: path=/opt/cache state=directory</span><br></pre></td></tr></table></figure>
<p>In more detail this time, the <code>apt</code> module handles packages for Ubuntu/Debian OS. The state option here designates that the install of Nginx should be implemented via apt-get, but the state value could also be replaced with <code>latest</code> (to update the package) or <code>absent</code> (to remove the package) instead. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: install nginx</span><br><span class="line">  yum name=nginx state=present</span><br></pre></td></tr></table></figure>
<p>This one’s pretty straight forward, and is the “task” equivalent of the ad hoc command from earlier. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: start nginx</span><br><span class="line">  service: name=nginx enabled=yes state=started</span><br></pre></td></tr></table></figure>
<p>One thing to notice here is with the <code>name:</code>  field. Tasks can be defined as anything you want here but should be descriptive. Tasks are simple and declarative, they aim to pass the correct arguments to the module calls, to achieve what is needed. </p>
<hr>
<h1 id="4-–-Special-Modules"><a href="#4-–-Special-Modules" class="headerlink" title="4 – Special Modules"></a>4 – Special Modules</h1><p>There are several modules that fall into their own category, that exist to provide special core use cases. The code examples here are in the form of a task you’d find within a playbook. </p>
<ul>
<li><code>command</code> module – Used for executing simple commands on remote nodes. (first example shown in step one). </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: Run the <span class="built_in">command</span> <span class="keyword">if</span> the specified file does not exist.</span><br><span class="line">  <span class="built_in">command</span>: /usr/bin/make_database.sh arg1 arg2 creates=/path/to/database</span><br></pre></td></tr></table></figure>
<ul>
<li><code>shell</code> module – Similar to the command module but allows the use of redirection, variables, and further operators. The <code>shell</code> module was also used in the first step. </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: Execute the <span class="built_in">command</span> <span class="keyword">in</span> remote shell; stdout goes to the specified file on the remote.</span><br><span class="line">  shell: somescript.sh &gt;&gt; somelog.txt</span><br></pre></td></tr></table></figure>
<ul>
<li><code>script</code> – Let’s you run a local script on a remote node - <strong>after transferring it.</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- script: /some/<span class="built_in">local</span>/script.sh --some-arguments 1234</span><br></pre></td></tr></table></figure>
<ul>
<li><code>raw</code> – Executes a low-down and dirty SSH command. Mainly used for installing Python versions onto hosts that do not already have it. </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: Bootstrap a legacy python 2.4 host</span><br><span class="line">  raw: yum -y install python-simplejson</span><br></pre></td></tr></table></figure>
<p>The examples uses Yum package manager, so is in the context of an enterprise Linux OS. </p>
<hr>
<p>With a basic understanding of how modules work within both ad hoc commands and tasks. It’s easy to now see how the bulk of an Ansible playbooks actions are laid out. </p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Ansible posts can be found on the Trades page.</a> </p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="http://docs.ansible.com/ansible/intro_adhoc.html" target="_blank" rel="external">Official Ansible Documentation - Introduction To Ad-Hoc Commands</a> – Has the bulk of the information contained in this post. </li>
<li><a href="https://serversforhackers.com/an-ansible-tutorial" target="_blank" rel="external">“Servers for Hackers” - An Ansible Tutorial</a> – Some context for some of the commands and the use of the options. </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9HBs9cy.png&quot; alt=&quot;Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Several ad hoc commands were shown in the previous post but no real detail was given as to what they can fully offer. These &lt;em&gt;ad hoc&lt;/em&gt; commands are often cited as being a good starter point for learning what’s possible with Ansible; without having to dive straight into writing a playbook. Most of them incorporate the use of a &lt;em&gt;module&lt;/em&gt; into their structure, so this post introduces modules too. Both from the point of view of an ad hoc command, and within the context of a task. Towards the end, the “special” Ansible module types are shown. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="CM" scheme="http://www.tricksofthetrades.net/tags/CM/"/>
    
      <category term="Python" scheme="http://www.tricksofthetrades.net/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Installing and Using UFW (Uncomplicated Firewall)</title>
    <link href="http://www.tricksofthetrades.net/2017/02/14/installing-using-ufw/"/>
    <id>http://www.tricksofthetrades.net/2017/02/14/installing-using-ufw/</id>
    <published>2017-02-14T00:00:00.000Z</published>
    <updated>2017-05-26T17:54:37.555Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/000yMhS.png" alt="Firewall Image"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>UFW is a popular and convenient firewall configuration tool originating from Ubuntu distributions. It’s a more accessible way of using the <code>iptables</code> program. Which with some of its complexities can be more cumbersome or confusing for newcomers to learn. In reality UFW works as a wrapper for iptables, so is not a firewall in its own right but the iptables firewall in a simpler form. It serves both IPv4 and IPv6 host-based traffic.</p>
<p>In this post are commands containing options/arguments that contain two words and look like this: <code>comment ssh</code>. These extra parts add a comment to the firewall rules generated. If you are using a version of UFW priot to <code>0.35</code> you may have to remove these two extra pieces to avoid errors. Please bear this in mind when you come to using these types of commands later on should you receive errors.  </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Install-UFW"><a href="#1-–-Install-UFW" class="headerlink" title="1 – Install UFW"></a>1 – Install UFW</h1><p>Using your systems package manager is a straight forward and easy way of obtaining UFW. Here are two examples for Arch Linux and Debian/Ubuntu. </p>
<h2 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h2><p>On Arch with Pacman it’s simply:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S ufw</span><br></pre></td></tr></table></figure>
<p>Then enable it on boot through systemd using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> ufw</span><br><span class="line">$ sudo systemctl start ufw</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Uncomplicated_Firewall" target="_blank" rel="external">Arch Wiki - Uncomplicated Firewall</a></p>
</blockquote>
<h2 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian / Ubuntu"></a>Debian / Ubuntu</h2><p>UFW comes as part of most Ubuntu based distributions so you might already have it on your system, but to download the package on either Debian or Ubuntu use:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ufw</span><br></pre></td></tr></table></figure>
<p>To check the status of the program and confirm installation.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status verbose</span><br></pre></td></tr></table></figure>
<p>The output returned if installed successfully should be:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Status: inactive</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="2-–-Enable-Default-Rules"><a href="#2-–-Enable-Default-Rules" class="headerlink" title="2 – Enable Default Rules"></a>2 – Enable Default Rules</h1><p>As with several other firewall solutions, the standard practice is to block every possible incoming connection and allow any possible outgoing connections. Then open/block individual services and ports where necessary afterwards. </p>
<p>So deny all incoming connections. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw default deny incoming</span><br></pre></td></tr></table></figure>
<p>And allow all outgoing connections. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw default allow outgoing</span><br></pre></td></tr></table></figure>
<p>Remember that the firewall itself is still not active yet. All we have done so far is add these two overall base rules.  </p>
<hr>
<h1 id="3-–-Adding-Rules"><a href="#3-–-Adding-Rules" class="headerlink" title="3 – Adding Rules"></a>3 – Adding Rules</h1><p>There are two primary styles available for adding rules - standard rule inputs and alias style inputs. </p>
<p>Here’s how to enable SSH connections to the server, using one of the built-in alias style inputs UFW provides.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow ssh comment ssh</span><br></pre></td></tr></table></figure>
<p>This opens the default SSH TCP port - port number <code>22</code>.  Without this port open, SSH connections to your server would be blocked. Potentially making it inaccessible remotely.  </p>
<p>Here’s the same rule again that opens the default SSH port, but using the standard rule input syntax.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow 22/tcp comment ssh</span><br></pre></td></tr></table></figure>
<p>Anyone who does not use the default port number <code>22</code> for SSH and has altered it manually on their server, must use this standard rule syntax, and change the number in the command <code>22</code> to their chosen custom SSH port number. </p>
<p>Usually there is no need to restart UFW for newly added/removed rules to take effect. The effect of an action is applied immediately. </p>
<h2 id="Further-Methods"><a href="#Further-Methods" class="headerlink" title="Further Methods"></a>Further Methods</h2><p>Specific IP addresses may be utilised in rules too. The next example (as suggested by the syntax) allows all traffic incoming access from the provided address. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow from 192.168.255.255</span><br></pre></td></tr></table></figure>
<p>Port ranges are opened using a colon <code>:</code> and the number ranges you wish to use. The port type is given as <code>/tcp</code> or <code>/udp</code> appearing in the same manner as before. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow 3452:3478/tcp</span><br><span class="line">$ sudo ufw allow 3452:3478/udp</span><br></pre></td></tr></table></figure>
<p>Although the default rules we applied in step two automatically block every network connection, you can still block individual items with the firewall if you wish. Such as with a different blanket rule setup. </p>
<p>The <code>deny</code> command is what blocks specific port numbers, IP addresses, or port ranges when passed. </p>
<p>This would block the default SSH port if in some scenario it was required. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw deny ssh comment ssh</span><br></pre></td></tr></table></figure>
<p>To deny FTP traffic using the standard rule input syntax you can use:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw deny 21/tcp comment ssh</span><br></pre></td></tr></table></figure>
<p>Blocking a target IP address(s) is the same as allowing but again uses the <code>deny</code> option instead. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw deny from 192.168.254.254</span><br></pre></td></tr></table></figure>
<p>Lastly blocking entire ranges with <code>deny</code> is just as possible:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw deny 3278:3282/tcp</span><br><span class="line">$ sudo ufw deny 3278:3282/udp</span><br></pre></td></tr></table></figure>
<p>Blocking/denying entire subnets is also possible by using the IP address and mask (CIDR notation).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw deny 15.15.15.0/26</span><br></pre></td></tr></table></figure>
<p>Lastly here, blocking via the host machines network interface/hardware is possible e.g. <code>eth0</code> or whatever it is registered as. No examples for this will be shown here however. Simply note that it is possible. </p>
<hr>
<h1 id="4-–-Commonly-Applied-Rules"><a href="#4-–-Commonly-Applied-Rules" class="headerlink" title="4 – Commonly Applied Rules"></a>4 – Commonly Applied Rules</h1><p>Continuing on with the primary styles available for adding rules, the standard rule inputs and alias style inputs. Here are some common rules you might want to add to the firewall either now, or at some point in the future. </p>
<p>These two allow traffic on port <code>80</code> - the standard web server port. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow http comment http</span><br><span class="line">$ sudo ufw allow 80/tcp comment http</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Remember only one of the commands is required from these code blocks. Either the alias version (first line) or the standard input version (second line).</p>
</blockquote>
<p>The same goes for the port assigned to encrypted traffic on web servers, port <code>443</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow https comment https</span><br><span class="line">$ sudo ufw allow 443/tcp comment https</span><br></pre></td></tr></table></figure>
<p>Always use <code>sftp</code> instead of <code>ftp</code> when transferring files on the command line. The choice of commands to allow traffic on the default <code>sftp</code> port is:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow sftp comment sftp</span><br><span class="line">$ sudo ufw allow 115/tcp comment sftp</span><br></pre></td></tr></table></figure>
<p>When working with LDAP (Lightweight Directory Access Protocol) the alias command is best suited as it saves you having to open up both the TCP <strong>and</strong> UDP ports with two commands, so open up port <code>389</code> on both using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow ldap comment ldap</span><br></pre></td></tr></table></figure>
<p>For SMTP traffic there’s:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow smtp comment smtp</span><br><span class="line">$ sudo ufw allow 25 comment smtp</span><br></pre></td></tr></table></figure>
<p>And for IMAP you’d enter:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow imap comment imap</span><br><span class="line">$ sudo ufw allow 143 comment imap</span><br></pre></td></tr></table></figure>
<p>Since UFW reads from the <code>/etc/services</code> file you can add any of the service names listed in there.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo less /etc/services</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Ping or ICMP reply should be enabled already by UFW. Meaning the server can be pinged even when the firewall is active. See <a href="http://askubuntu.com/a/10314" target="_blank" rel="external">http://askubuntu.com/a/10314</a></p>
</blockquote>
<p>Check this <a href="https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands" target="_blank" rel="external">Digital Ocean article</a> for even more specific rules to add to your servers UFW config. </p>
<hr>
<h1 id="5-–-Enabling-and-Disabling-UFW"><a href="#5-–-Enabling-and-Disabling-UFW" class="headerlink" title="5 – Enabling and Disabling UFW"></a>5 – Enabling and Disabling UFW</h1><p>Once the rules are all added and ready for use, the final step is to activate the firewall. </p>
<p>This is easily done by issuing the command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
<p>After entering the <code>sudo</code> password and confirming any prompts, you receive the message:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Firewall is active and enabled on system startup</span><br></pre></td></tr></table></figure>
<p>From here onward the rules are applied and working as entered. </p>
<p>To see the entire rules and status of the firewall now it’s running enter the command from the start again.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status verbose</span><br></pre></td></tr></table></figure>
<p>Should you ever need to reload the firewall, use the <code>reload</code> option. Although this will probably be a rare occasion as remember rules are applied instantly upon entering.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw reload</span><br></pre></td></tr></table></figure>
<p>More commonly the entire firewall can be <code>disabled</code> with one command.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>
<p>Your rules and configuration is not list when the firewall is disabled, only inactive until you <code>enable</code> them again. To delete and remove rules see the next section. </p>
<hr>
<h1 id="6-–-Deleting-Rules"><a href="#6-–-Deleting-Rules" class="headerlink" title="6 – Deleting Rules"></a>6 – Deleting Rules</h1><p>Removing rules using the syntax you’re now likely familiar with. All you need to do is use the <code>delete</code> option as part of your command structure. </p>
<p>For example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw delete allow ssh</span><br><span class="line">$ sudo ufw delete allow 22/tcp</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Once again remember only one of the commands is required from the above code block. Either the alias version (first line) or the standard input version (second line).</p>
</blockquote>
<p>A smart way to remove rules uses the <code>numbered</code> output command.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status numbered</span><br></pre></td></tr></table></figure>
<p>Here’s some example output:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">     To                         Action      From</span><br><span class="line">     --                         ------      ----</span><br><span class="line">[ 1] 22                         ALLOW IN    Anywhere                  </span><br><span class="line">[ 2] 21/tcp                     ALLOW IN    Anywhere                  </span><br><span class="line">[ 3] 80                         ALLOW IN    Anywhere                  </span><br><span class="line">[ 4] 443                        ALLOW IN    Anywhere                  </span><br><span class="line">[ 5] 22 (v6)                    ALLOW IN    Anywhere (v6)             </span><br><span class="line">[ 6] 21/tcp (v6)                ALLOW IN    Anywhere (v6)             </span><br><span class="line">[ 7] 80 (v6)                    ALLOW IN    Anywhere (v6)             </span><br><span class="line">[ 8] 443 (v6)                   ALLOW IN    Anywhere (v6)</span><br></pre></td></tr></table></figure>
<p>The number featured in the resultant output (on the left column) can be referenced to delete rules. </p>
<p>As in this next example, which deletes rule <code>4</code> from the firewall. </p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw delete 4</span><br></pre></td></tr></table></figure>
<p>Be aware that if you have IPv6 enabled - which is the case on many distributions now by default after installation - there is always an equivalent rule added for IPv6; whenever you add a rule. So you need to delete that corresponding rule also when using this method. In my example it would have been rule <code>8</code> which you can see in the output(s).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 8] 443 (v6)                   ALLOW IN    Anywhere (v6)</span><br></pre></td></tr></table></figure>
<p>If for some reason you want to redo the entire rule-set of the firewall. You can <code>reset</code> the whole of your current configuration with one command. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw reset</span><br></pre></td></tr></table></figure>
<p>Be careful using this of course. </p>
<hr>
<h1 id="7-–-Enabling-and-Disabling-Logging"><a href="#7-–-Enabling-and-Disabling-Logging" class="headerlink" title="7 – Enabling and Disabling Logging"></a>7 – Enabling and Disabling Logging</h1><p>If you want to use logging for the firewall you must enable it to do so. </p>
<p>To enable logging use:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw logging on</span><br></pre></td></tr></table></figure>
<p>The location of the log file may differ but in general here’s the place to start looking.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ls /var/<span class="built_in">log</span>/ufw</span><br></pre></td></tr></table></figure>
<p>For information on how to interpret log entries in UFW, read through this section <a href="https://help.ubuntu.com/community/UFW#Interpreting_Log_Entries" target="_blank" rel="external">here</a>. </p>
<p>To disable logging if needed you can use:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw logging off</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="8-–-Miscellaneous"><a href="#8-–-Miscellaneous" class="headerlink" title="8 – Miscellaneous"></a>8 – Miscellaneous</h1><p>Rule comments were introduced as of February 2016 but you will require at least version <code>0.35</code> of UFW to be able to use them. </p>
<p>To use IPv6 with UFW you need to ensure you have it enabled in the configuration file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/default/ufw</span><br></pre></td></tr></table></figure>
<p>Change the the value of <code>IPV6</code> to equal <code>yes</code> in this file if it is set to “no”. </p>
<figure class="highlight bash"><figcaption><span>/etc/default/ufw excerpt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPV6=yes</span><br></pre></td></tr></table></figure>
<p>Save and leave the file. </p>
<p>Reloading the firewall here might be a wise step if you already had it running before doing this (the command for reloading is given in an earlier step). After this the IPv6 rules alongside the regular IPv4 rules should be active and added to the firewall. </p>
<p>Lastly here’s several aliases you might want to incorporate into your <code>.bashrc</code> or <code>.alias</code> file to make things slightly quicker. </p>
<figure class="highlight bash"><figcaption><span>~/.alias</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ufw</span></span><br><span class="line"><span class="built_in">alias</span> ufw=<span class="string">'sudo ufw'</span></span><br><span class="line"><span class="built_in">alias</span> ufwstatver=<span class="string">'sudo ufw status verbose'</span></span><br><span class="line"><span class="built_in">alias</span> ufwstatnum=<span class="string">'sudo ufw status numbered'</span></span><br></pre></td></tr></table></figure>
<hr>
<p>This post in its entirety covers most of the information required when it comes to getting to know UFW. Some of the external links also provide a vast amount of information should it be needed. </p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-16-04" target="_blank" rel="external">Digital Ocean - How To Set Up a Firewall with UFW on Ubuntu 16.04</a> – There are several of these articles on DO and this is one I found the most useful for this post. </li>
<li><a href="https://wiki.ubuntu.com/UncomplicatedFirewall" target="_blank" rel="external">Ubuntu Wiki - UncomplicatedFirewall</a> – This page contains all the feature release and their versions. Alongside links to many different server guides.  </li>
<li><a href="https://launchpad.net/ufw" target="_blank" rel="external">Launchpad - UFW</a> – The project is hosted here with all development details included. </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/000yMhS.png&quot; alt=&quot;Firewall Image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;UFW is a popular and convenient firewall configuration tool originating from Ubuntu distributions. It’s a more accessible way of using the &lt;code&gt;iptables&lt;/code&gt; program. Which with some of its complexities can be more cumbersome or confusing for newcomers to learn. In reality UFW works as a wrapper for iptables, so is not a firewall in its own right but the iptables firewall in a simpler form. It serves both IPv4 and IPv6 host-based traffic.&lt;/p&gt;
&lt;p&gt;In this post are commands containing options/arguments that contain two words and look like this: &lt;code&gt;comment ssh&lt;/code&gt;. These extra parts add a comment to the firewall rules generated. If you are using a version of UFW priot to &lt;code&gt;0.35&lt;/code&gt; you may have to remove these two extra pieces to avoid errors. Please bear this in mind when you come to using these types of commands later on should you receive errors.  &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Firewall" scheme="http://www.tricksofthetrades.net/tags/Firewall/"/>
    
      <category term="Networking" scheme="http://www.tricksofthetrades.net/tags/Networking/"/>
    
      <category term="IP" scheme="http://www.tricksofthetrades.net/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>Ansible - Inventory Concepts (2)</title>
    <link href="http://www.tricksofthetrades.net/2016/06/27/ansible-inventory-concepts/"/>
    <id>http://www.tricksofthetrades.net/2016/06/27/ansible-inventory-concepts/</id>
    <published>2016-06-26T23:00:00.000Z</published>
    <updated>2017-08-29T18:19:46.099Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/9HBs9cy.png" alt="Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>After outlining the initial installation and setup process in <a href="http://www.tricksofthetrades.net/2016/02/10/ansible-installing-running/">Ansible - Installing and Running (1)</a> I’m continuing in this post with a more precise look at how to handle the main hosts file. Specifically how to lay it out and add host variables or group variables to the mix. Dynamic inventory assets and development/production inventory layouts are not covered here and only alluded to or linked to. </p>
<p>Lastly splitting up the variable types and their definitions into their own YAML files is briefly introduced in the final step, and works best for more complex network hierarchies. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Hosts-Inventory-File"><a href="#1-–-Hosts-Inventory-File" class="headerlink" title="1 –  Hosts Inventory File"></a>1 –  Hosts Inventory File</h1><p>As shown in “Ansible - Installing and Running (1)” Ansible operates by working simultaneously with multiple hosts in your infrastructure. It’s preferred way of doing this is to allocate hosts into different groups inside of the inventory file - <code>/etc/ansible/hosts</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls /etc/ansible/</span><br><span class="line"></span><br><span class="line">ansible.cfg  hosts  hosts.orig  roles</span><br></pre></td></tr></table></figure>
<p>This file is completely configurable and can be expanded or broken up into multiple inventory files.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<p>There’s a special form of inventory in Ansible known as <em>dynamic inventory</em> that refers to inventory files or asserts that get pulled down from the cloud, or other server side sources. This is not covered in this post however. </p>
<hr>
<h1 id="2-–-Hosts-and-Groups"><a href="#2-–-Hosts-and-Groups" class="headerlink" title="2 – Hosts and Groups"></a>2 – Hosts and Groups</h1><p>As seen in the first post, the INI style formatting for an Ansible hosts file looks similar to this:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[webservers]</span></span><br><span class="line"><span class="string">webremote.one.ip.address</span></span><br><span class="line"><span class="string">webremote.two.ip.address</span></span><br><span class="line"><span class="string">webremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers]</span></span><br><span class="line"><span class="string">dbremote.one.ip.address</span></span><br><span class="line"><span class="string">dbremote.two.ip.address</span></span><br><span class="line"><span class="string">dbremote.three.ip.address</span></span><br></pre></td></tr></table></figure>
<p>Square brackets <code>[ ]</code> contain a group name which is used to decide what systems you are controlling at what times and for what purpose. This makes it possible to apply actions to specific nodes/hosts as and when necessary. </p>
<p>Also systems (nodes/hosts) can be attributed under more than one group if needed, so in the snippet above one of the example nodes could be both a web server <strong>and</strong> a database server, added to both group entries in the file.</p>
<p>The hostnames can also be domain names instead of raw IP addresses if preferred, and when adding a large numbers of hosts if the domain names follow a similar numerical pattern, you can use ranges of numbers instead of adding them all individually. </p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[webservers]</span></span><br><span class="line"><span class="string">www[01:50].example.com</span></span><br></pre></td></tr></table></figure>
<p>Lastly hosts that run on non-standard SSH ports i.e. not <code>22</code> must have the their custom SSH port numbers inserted after the hostname separated by a colon.</p>
<p>For example:</p>
<p><code>webremote.one.ip.address:3675</code></p>
<p>Or instead defined through host/group variables (see next step). </p>
<hr>
<h1 id="3-–-Host-and-Group-Variables"><a href="#3-–-Host-and-Group-Variables" class="headerlink" title="3 – Host and Group Variables"></a>3 – Host and Group Variables</h1><p>Variables in the inventory file(s) are set on a host basis or group basis. There are many of these inbuilt variables on offer to the user when constructing the file. </p>
<p>Here is an example of two host variables, that explicitly tell Ansible to use SSH as the connection type, with a set username:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[webservers]</span></span><br><span class="line"><span class="string">webremote.one.ip.address</span> <span class="string">ansible_connection=ssh</span> <span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">webremote.two.ip.address</span> <span class="string">ansible_connection=ssh</span> <span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">webremote.three.ip.address</span> <span class="string">ansible_connection=ssh</span> <span class="string">ansible_user=username</span> </span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers]</span></span><br><span class="line"><span class="string">dbremote.one.ip.address</span> <span class="string">ansible_connection=ssh</span> <span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">dbremote.two.ip.address</span> <span class="string">ansible_connection=ssh</span> <span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">dbremote.three.ip.address</span> <span class="string">ansible_connection=ssh</span> <span class="string">ansible_user=username</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> <code>username</code> would be replaced by the actual Ansible user on these hosts in the above.</p>
</blockquote>
<p>In the first post on Ansible I laid out these host variables and the file formatting differently, by using:</p>
<ul>
<li>An “empty” name for the hosts - <code>server-name-1</code></li>
<li>A host variable that then gives this name an IP address to refer to - <code>ansible_host=remote.one.ip.address</code></li>
<li>Another host variable with the specific username like in the previous example - <code>ansible_user=username</code></li>
<li>Then a final host variable that holds the custom SSH port to use when connecting to this host - <code>ansible_port=3980</code></li>
</ul>
<p>Here is what the layout looked like for this file:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[servers]</span></span><br><span class="line"><span class="string">server-name-1</span> <span class="string">ansible_host=remote.one.ip.address</span> <span class="string">ansible_user=username</span> <span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">server-name-2</span> <span class="string">ansible_host=remote.one.ip.address</span> <span class="string">ansible_user=username</span> <span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">server-name-3</span> <span class="string">ansible_host=remote.one.ip.address</span> <span class="string">ansible_user=username</span> <span class="string">ansible_port=3980</span></span><br></pre></td></tr></table></figure>
<p>Group variables allow extra options and settings like in the above to be applied to an entire group at once. Instead of having to set the same variables for each host when the value of the variables is the same. </p>
<p>These are defined by creating a new set of square brackets <code>[ ]</code> that contain the group name you wish to apply the variables to, followed by a <em>tag</em> that consists of a <code>:</code> and the term <code>vars</code> .</p>
<p>When put together using a group named “webservers” this makes - <code>[webservers:vars]</code> </p>
<p>The variables you want to apply to the group are then listed on separate lines - an example of all of this is shown in the below code snippet:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[webservers]</span></span><br><span class="line"><span class="string">webremote.one.ip.address</span></span><br><span class="line"><span class="string">webremote.two.ip.address</span></span><br><span class="line"><span class="string">webremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[webservers:vars]</span></span><br><span class="line"><span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">ntp_server=ntp.example.com</span></span><br><span class="line"><span class="string">proxy=proxy.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers]</span></span><br><span class="line"><span class="string">dbremote.one.ip.address</span></span><br><span class="line"><span class="string">dbremote.two.ip.address</span></span><br><span class="line"><span class="string">dbremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers:vars]</span></span><br><span class="line"><span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">ntp_server=ntp.example.com</span></span><br><span class="line"><span class="string">proxy=proxy.example.com</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="4-–-Groups-of-Groups"><a href="#4-–-Groups-of-Groups" class="headerlink" title="4 – Groups of Groups"></a>4 – Groups of Groups</h1><p>There’s a further way of making “groups out of groups” by using the <code>:children</code> tag. These can have group variables applied to them too by using the same method in the last step. To do this extra grouping, a new group name is created then suffixed with the <code>:children</code> tag which will contain the original groups defined.</p>
<p>Such as here:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[webservers-one]</span></span><br><span class="line"><span class="string">webremote.one.ip.address</span></span><br><span class="line"><span class="string">webremote.two.ip.address</span></span><br><span class="line"><span class="string">webremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers-one]</span></span><br><span class="line"><span class="string">dbremote.one.ip.address</span></span><br><span class="line"><span class="string">dbremote.two.ip.address</span></span><br><span class="line"><span class="string">dbremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[cluster-one:children]</span></span><br><span class="line"><span class="string">webservers-one</span></span><br><span class="line"><span class="string">dbservers-two</span></span><br></pre></td></tr></table></figure>
<p>To add group variables to this new group of a group, the new name is added to yet another group with the standard <code>:vars</code> tag.</p>
<p>Like at the bottom of this code snippet:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[webservers-one]</span></span><br><span class="line"><span class="string">webremote.one.ip.address</span></span><br><span class="line"><span class="string">webremote.two.ip.address</span></span><br><span class="line"><span class="string">webremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers-one]</span></span><br><span class="line"><span class="string">dbremote.one.ip.address</span></span><br><span class="line"><span class="string">dbremote.two.ip.address</span></span><br><span class="line"><span class="string">dbremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[cluster-one:children]</span></span><br><span class="line"><span class="string">webservers-one</span></span><br><span class="line"><span class="string">dbservers-two</span></span><br><span class="line"></span><br><span class="line"><span class="string">[cluster-one:vars]</span></span><br><span class="line"><span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">ntp_server=ntp.example.com</span></span><br><span class="line"><span class="string">proxy=proxy.example.com</span></span><br></pre></td></tr></table></figure>
<p>The concept of grouping groups into more groups can theoretically go on indefinitely. Another level of grouping is added below to demonstrate:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[webservers-one]</span></span><br><span class="line"><span class="string">webremote.one.ip.address</span></span><br><span class="line"><span class="string">webremote.two.ip.address</span></span><br><span class="line"><span class="string">webremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers-one]</span></span><br><span class="line"><span class="string">dbremote.one.ip.address</span></span><br><span class="line"><span class="string">dbremote.two.ip.address</span></span><br><span class="line"><span class="string">dbremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[cluster-one:children]</span></span><br><span class="line"><span class="string">webservers-one</span></span><br><span class="line"><span class="string">dbservers-two</span></span><br><span class="line"></span><br><span class="line"><span class="string">[cluster-one:vars]</span></span><br><span class="line"><span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">ntp_server=ntp.example.com</span></span><br><span class="line"><span class="string">proxy=proxy.example.com</span></span><br><span class="line"><span class="string">[webservers-two]</span></span><br><span class="line"></span><br><span class="line"><span class="string">webremote.one.ip.address</span></span><br><span class="line"><span class="string">webremote.two.ip.address</span></span><br><span class="line"><span class="string">webremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[dbservers-two]</span></span><br><span class="line"><span class="string">dbremote.one.ip.address</span></span><br><span class="line"><span class="string">dbremote.two.ip.address</span></span><br><span class="line"><span class="string">dbremote.three.ip.address</span></span><br><span class="line"></span><br><span class="line"><span class="string">[cluster-two:children]</span></span><br><span class="line"><span class="string">webservers-two</span></span><br><span class="line"><span class="string">dbservers-two</span></span><br><span class="line"></span><br><span class="line"><span class="string">[cluster-two:vars]</span></span><br><span class="line"><span class="string">ansible_user=username</span> </span><br><span class="line"><span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">ntp_server=ntp.example.com</span></span><br><span class="line"><span class="string">proxy=proxy.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">[all-clusters:children]</span></span><br><span class="line"><span class="string">cluster-one</span></span><br><span class="line"><span class="string">cluster-two</span></span><br></pre></td></tr></table></figure>
<p>More realistically this could be seen in terms of grouping local data-centre hosts into regions and then into a country wide group. </p>
<hr>
<h1 id="5-–-Multiple-Inventory-Files"><a href="#5-–-Multiple-Inventory-Files" class="headerlink" title="5 – Multiple Inventory Files"></a>5 – Multiple Inventory Files</h1><p>The singular <code>/etc/ansible/hosts</code> file is fine for smaller more contained network setups, but the preferred practice in Ansible is not to store variables in the main <code>hosts</code> inventory file. At least when dealing with larger more complex layouts of hosts, or bigger networks. </p>
<p>Host and group variables ideally when handling large scale setups should be stored in individual files. Files that are relative to the main inventory file.</p>
<p>As an example any group variables defined in the below file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible/group_vars/webservers.yml</span><br></pre></td></tr></table></figure>
<p>Will apply to any hosts located in the <code>webservers</code> group. These variable files are written in YAML.</p>
<p>Similarly any host variables defined in:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible/host_vars/server-name-1.yml</span><br></pre></td></tr></table></figure>
<p>Are applied to the host named <code>server-name-1</code> from the original <code>hosts</code> file. </p>
<p>Further segmentation and organisation of the host/inventory files is followed but not covered in this post, see <a href="http://rosstuck.com/multistage-environments-with-ansible/" target="_blank" rel="external">Multistage Environments with Ansible</a> for more information on how this is done.</p>
<hr>
<p>A future third post on Ansible will describe the <em>modules</em> in place that can be run as part of a playbook, or as ad-hoc based commands. </p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Ansible posts can be found on the Trades page.</a></p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="http://docs.ansible.com/ansible/intro_inventory.html" target="_blank" rel="external">Official Ansible Documentation - Inventory</a> – The concepts on this page are what I based most of this blosg post on. </li>
<li><a href="http://docs.ansible.com/ansible/playbooks_best_practices.html" target="_blank" rel="external">Official Ansible Documentation - Best Practices: Content Organisation</a> – Not as relevant but </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9HBs9cy.png&quot; alt=&quot;Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;After outlining the initial installation and setup process in &lt;a href=&quot;http://www.tricksofthetrades.net/2016/02/10/ansible-installing-running/&quot;&gt;Ansible - Installing and Running (1)&lt;/a&gt; I’m continuing in this post with a more precise look at how to handle the main hosts file. Specifically how to lay it out and add host variables or group variables to the mix. Dynamic inventory assets and development/production inventory layouts are not covered here and only alluded to or linked to. &lt;/p&gt;
&lt;p&gt;Lastly splitting up the variable types and their definitions into their own YAML files is briefly introduced in the final step, and works best for more complex network hierarchies. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="CM" scheme="http://www.tricksofthetrades.net/tags/CM/"/>
    
      <category term="Python" scheme="http://www.tricksofthetrades.net/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Debian 8 (Jessie) VPS Basic Checklist</title>
    <link href="http://www.tricksofthetrades.net/2016/06/13/debian8-vps-checklist/"/>
    <id>http://www.tricksofthetrades.net/2016/06/13/debian8-vps-checklist/</id>
    <published>2016-06-12T23:00:00.000Z</published>
    <updated>2018-05-18T15:17:54.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/JXNdLSN.png" alt="VPS Image"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Here are some base guidelines I follow when setting up a new VPS manually without configuration management. These steps if anything make the system more secure overall and provide a good starting point from which you can setup the services/software’s required for the purpose of the VPS. </p>
<p>All of these steps in this post are from the context of a <em>droplet</em> (VPS) hosted by <a href="https://m.do.co/c/e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> using the Debian 8.5 x64 kernel images they use as of the above date. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Setup-VPS-User-Account"><a href="#1-–-Setup-VPS-User-Account" class="headerlink" title="1 – Setup VPS User Account"></a>1 – Setup VPS User Account</h1><p>Initial root access for this section is assumed. Adding a registered SSH public key to the droplet creation on Digital Ocean gives pass-wordless root access to the VPS. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@your.vps.ip.address</span><br></pre></td></tr></table></figure>
<p>Install the <code>sudo</code> package manually as this is not included with Digital Ocean’s Debian 8 image.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install sudo</span><br></pre></td></tr></table></figure>
<p>Add your new Linux user to the system. Whenever you see <code>scarlz</code> here in commands it should be replaced with your own preferred username, and substituted in from throughout. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adduser scarlz</span><br></pre></td></tr></table></figure>
<p>Add the newly created user to the <code>sudo</code> elevation privileges group.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adduser scarlz sudo</span><br></pre></td></tr></table></figure>
<p>You can also add the user to the <code>adm</code> group which grants read access to system log files if you think this would be useful. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adduser scarlz adm</span><br></pre></td></tr></table></figure>
<p>Exit the root SSH session. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="2-–-Copy-Client-Public-SSH-Key"><a href="#2-–-Copy-Client-Public-SSH-Key" class="headerlink" title="2 – Copy Client Public SSH Key"></a>2 – Copy Client Public SSH Key</h1><p>Install your public key to the new user added in the previous step. </p>
<p>Do this by running the <code>ssh-copy-id</code> command, supplying it with the the username and IP address of the VPS. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id scarlz@your.vps.ip.address</span><br></pre></td></tr></table></figure>
<p>The public key (after authentication) will be added to the remote user’s <code>~/.ssh/authorized_keys</code> file. </p>
<p>As long as the client has the private key tied to the public key just registered, it can be used to log into the VPS. </p>
<hr>
<h1 id="3-–-Update-and-Install-System-Packages"><a href="#3-–-Update-and-Install-System-Packages" class="headerlink" title="3 – Update and Install System Packages"></a>3 – Update and Install System Packages</h1><p>SSH back into the VPS as the new user you created previously, which should work without requiring authentication details thanks to the previous step. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh scarlz@your.vps.ip.address</span><br></pre></td></tr></table></figure>
<p>Run this command to ensure the system’s packages are up to date. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="4-–-Default-SSH-Port-and-Root-Access"><a href="#4-–-Default-SSH-Port-and-Root-Access" class="headerlink" title="4 – Default SSH Port and Root Access"></a>4 – Default SSH Port and Root Access</h1><p>This step removes the assumption any port scanning makes on what port number the SSH service is running on. The default is <code>22</code> so these processes will check for that first and foremost. Changing this number to an ephemeral port can help to reduce the number of attempted malicious login attempts that are made. However there are several finer points as to why you might not want to do this, so decide if this seems worthwhile or not before doing it (see the next link). </p>
<blockquote>
<p><strong>Note:</strong> <a href="http://security.stackexchange.com/questions/32308/should-i-change-the-default-ssh-port-on-linux-servers" target="_blank" rel="external">Should I change the default SSH port on linux servers?</a></p>
</blockquote>
<p>All I  would say is don’t get into the habit of doing this for other service’s port numbers. If you choose not to do this then Fail2ban (which we install later) will be enough in its place. </p>
<p>Disabling password authentication for the root user account and relying on the registered SSH key can also put a stop to attempted root logins from unwanted hosts. </p>
<p>Change the VPS’s default SSH port &amp; disable root login via passwords in the system wide SSH config file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>Change the <code>Port 22</code> entry to any number between <code>1025</code> and <code>65536</code> respectively, if you have decided you want to do this.  </p>
<p>For example:</p>
<figure class="highlight bash"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 3267</span><br></pre></td></tr></table></figure>
<p>Change the <code>PermitRootLogin yes</code> entry to <code>PermitRootLogin without-password</code> instead,</p>
<p>This as mentioned before means only users with public SSH keys registered in the root authorised keys file can log in as root itself. </p>
<figure class="highlight bash"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin without-password</span><br></pre></td></tr></table></figure>
<p>Restart SSH so the changes take effect.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service ssh restart</span><br></pre></td></tr></table></figure>
<p>When accessing the VPS via SSH in the future, you must now append the correct port number to the command e.g.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh scarlz@your.vps.ip.address -p 3267</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="5-–-Automatic-Security-Upgrades"><a href="#5-–-Automatic-Security-Upgrades" class="headerlink" title="5 – Automatic Security Upgrades"></a>5 – Automatic Security Upgrades</h1><p>Using a package named <code>unattended-upgrades</code> it’s possible to have updates done by the package manager automatically at set intervals. It is advised to only enable security updating and not the normal package upgrading as this could potentially cause problems with conflicts or unwanted changes. </p>
<p>Install the package to begin with.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install unattended-upgrades</span><br></pre></td></tr></table></figure>
<p>Open/create the <code>10periodic</code> configuration file for this package using your preferred text editor.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/apt/apt.conf.d/10periodic</span><br></pre></td></tr></table></figure>
<p>Add in the lines found in the below code snippet:</p>
<figure class="highlight bash"><figcaption><span>/etc/apt/apt.conf.d/10periodic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">APT::Periodic::Update-Package-Lists <span class="string">"1"</span>;</span><br><span class="line">APT::Periodic::Download-Upgradeable-Packages <span class="string">"1"</span>;</span><br><span class="line">APT::Periodic::AutocleanInterval <span class="string">"7"</span>;</span><br><span class="line">APT::Periodic::Unattended-Upgrade <span class="string">"1"</span>;</span><br></pre></td></tr></table></figure>
<p>Save your additions and exit the file. </p>
<p>Now open up another configuration file named <code>50unattended-upgrades</code> for changes.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/apt/apt.conf.d/50unattended-upgrades</span><br></pre></td></tr></table></figure>
<p>Enable security updates only by adding the line - <code>&quot;origin=Debian,codename=${distro_codename},label=Debian-Security&quot;;</code> to the correct location, as shown in the next code snippet on line 17:</p>
<figure class="highlight bash"><figcaption><span>/etc/apt/apt.conf.d/50unattended-upgrades</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Unattended-Upgrade::Origins-Pattern &#123;</span><br><span class="line">        // Codename based matching:</span><br><span class="line">        // This will follow the migration of a release through different</span><br><span class="line">        // archives (e.g. from testing to stable and later oldstable).</span><br><span class="line">//      <span class="string">"o=Debian,n=jessie"</span>;</span><br><span class="line">//      <span class="string">"o=Debian,n=jessie-updates"</span>;</span><br><span class="line">//      <span class="string">"o=Debian,n=jessie-proposed-updates"</span>;</span><br><span class="line">//      <span class="string">"o=Debian,n=jessie,l=Debian-Security"</span>;</span><br><span class="line"></span><br><span class="line">        // Archive or Suite based matching:</span><br><span class="line">        // Note that this will silently match a different release after</span><br><span class="line">        // migration to the specified archive (e.g. testing becomes the</span><br><span class="line">        // new stable).</span><br><span class="line">//      <span class="string">"o=Debian,a=stable"</span>;</span><br><span class="line">//      <span class="string">"o=Debian,a=stable-updates"</span>;</span><br><span class="line">//      <span class="string">"o=Debian,a=proposed-updates"</span>;</span><br><span class="line">        <span class="string">"origin=Debian,codename=<span class="variable">$&#123;distro_codename&#125;</span>,label=Debian-Security"</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Further down in the file add an email address thatcan receive the update reports and uncomment the line itself: </p>
<figure class="highlight bash"><figcaption><span>/etc/apt/apt.conf.d/50unattended-upgrades</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Send email to this address <span class="keyword">for</span> problems or packages upgrades</span><br><span class="line">// If empty or <span class="built_in">unset</span> <span class="keyword">then</span> no email is sent, make sure that you</span><br><span class="line">// have a working mail setup on your system. A package that provides</span><br><span class="line">// <span class="string">'mailx'</span> must be installed. E.g. <span class="string">"user@example.com"</span></span><br><span class="line">Unattended-Upgrade::Mail <span class="string">"user@email-domain.com"</span>;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="6-–-Setup-Dotfiles-Optional"><a href="#6-–-Setup-Dotfiles-Optional" class="headerlink" title="6 – Setup Dotfiles (Optional)"></a>6 – Setup Dotfiles (Optional)</h1><p>Most administrators or developers will have their own customised <em>dotfiles</em> they use to personalise the server and make tasks easier, or introduce extra functionality to the system. Here is where I would setup my own using Git and GitHub.   </p>
<p>It is unlikely that you’ll want to carry out the commands in this step as these instructions are for my own dotfiles, so only really relevant to me. </p>
<p><strong>Replace this step with installing and setting up your own equivalent dotfiles!</strong></p>
<blockquote>
<p><a href="https://github.com/5car1z/dotfiles" target="_blank" rel="external">https://github.com/5car1z/dotfiles</a></p>
</blockquote>
<p>Install Git via the system package manager. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>
<p>Clone your dotfiles repository onto the system.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/5car1z/dotfiles.git </span><br><span class="line">$ <span class="built_in">cd</span> ~/dotfiles</span><br></pre></td></tr></table></figure>
<p>Run the two install scripts that add more packages (all the good stuff) and create the necessary symlinks using GNU Stow. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./install-debian-ubuntu-dotfile-dependencies.sh</span><br><span class="line">$ ./stow-dotfiles.sh</span><br></pre></td></tr></table></figure>
<p>If there’s any submodule problems update them to their latest remote versions with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update_submodules</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="7-–-Install-Software-Packages"><a href="#7-–-Install-Software-Packages" class="headerlink" title="7 – Install Software Packages"></a>7 – Install Software Packages</h1><p>Any outstanding or super essential packages that haven’t been brought in by the “dotfiles” step should be considered before moving on. What these are will be known only to you though as everybody’s preferences and needs are different. </p>
<p>Here are several examples however. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git vim curl cowsay fortune-mod jq vim tmux ranger</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="8-–-Install-and-Run-UFW"><a href="#8-–-Install-and-Run-UFW" class="headerlink" title="8 – Install and Run UFW"></a>8 – Install and Run UFW</h1><p>UFW stands for “Uncomplicated Firewall” and is more concise easier to understand alternative to older firewall implementations like <a href="http://www.tricksofthetrades.net/2015/05/18/iptables-ipv4/">iptables</a>.  </p>
<p>Install on Debian 8 like any other package simply using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ufw</span><br></pre></td></tr></table></figure>
<p>Like with other firewalls of this elk it’s common practice to put in place a blanket set of ingress/egress rules then add the exceptions to services and ports on top afterwards. </p>
<p>Make the default overall action for any incoming traffic to be blocked and denied. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw default deny incoming</span><br></pre></td></tr></table></figure>
<p>Then make the default overall action for outgoing traffic to be permissible and allowed. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw default allow outgoing</span><br></pre></td></tr></table></figure>
<p>From here, any services you wish to allow that are received by the VPS can be added as an exception. See a separate post that covers the key areas of UFW in itself for information on how to do this. </p>
<blockquote>
<p><a href="http://www.tricksofthetrades.net/2017/02/14/installing-using-ufw/">Full UFW Guide</a></p>
</blockquote>
<p>To continue here, open the SSH port number you chose earlier on by replacing the number <code>3267</code> with your own number, in the following command.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow 3267/tcp</span><br></pre></td></tr></table></figure>
<p>Lastly after all the extra rules you need, enable the firewall so the configuration becomes active. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="9-–-Install-and-Run-Fail2ban"><a href="#9-–-Install-and-Run-Fail2ban" class="headerlink" title="9 – Install and Run Fail2ban"></a>9 – Install and Run Fail2ban</h1><p>This application permanently stops any excessive failed attempts (brute forcing) at connecting to the VPS - it achieves this by banning the offending source IP. This is configurable over various services on the system and not just SSH. </p>
<p>Install it as done before with the system package manager. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install fail2ban sendmail</span><br></pre></td></tr></table></figure>
<p>Sendmail can also be used by Fail2ban when sending out notification messages for bans that have occurred, so this is useful to install alongside it. Unless you want to configure it to use a different mail service. </p>
<p>Create a <code>.local</code> version of the configuration file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sed <span class="string">'s/^banaction = .*/banaction = ufw/'</span> /etc/fail2ban/jail.conf &gt; /etc/fail2ban/jail.local</span><br></pre></td></tr></table></figure>
<p>Start the service and ensure it’s running by using the command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service fail2ban start</span><br></pre></td></tr></table></figure>
<p>A more detailed rundown of the configuration involved with Fail2ban is covered in a separate post to this one. </p>
<blockquote>
<p><a href="https://www.tricksofthetrades.net/2018/05/18/fail2ban-installing-bionic/">Full Fail2ban Guide</a></p>
</blockquote>
<hr>
<p>This is a pretty straightforward post, all things considered. Remember that a persons needs for configuring a VPS will be tailored to their own requirements, criteria, and preferences. So these steps are good general outline but mainly the ones I personally follow - other people’s will be different, according to their needs. </p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-8" target="_blank" rel="external">Digital Ocean - Initial Server Setup with Debian 8</a> – Partial inspiration for this post. </li>
<li><a href="https://www.reddit.com/r/netsec/comments/4o7wpo/my_first_10_minutes_on_a_server/" target="_blank" rel="external">Reddit Thread - My First 10 Minutes On a Server</a> – Reddit thread that links to an article on best security practives to follow when setting up a VPS/server. </li>
<li><a href="https://wiki.debian.org/UnattendedUpgrades" target="_blank" rel="external">Debian Wiki - Unattended Upgrades</a> – Helpful explanation and information on how to use the configuration files. </li>
<li><a href="https://www.digitalocean.com/community/questions/what-is-your-server-security-check-list" target="_blank" rel="external">Digital Ocean - What is your server security check list?</a> – November 29, 2016 Question Thread.</li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JXNdLSN.png&quot; alt=&quot;VPS Image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Here are some base guidelines I follow when setting up a new VPS manually without configuration management. These steps if anything make the system more secure overall and provide a good starting point from which you can setup the services/software’s required for the purpose of the VPS. &lt;/p&gt;
&lt;p&gt;All of these steps in this post are from the context of a &lt;em&gt;droplet&lt;/em&gt; (VPS) hosted by &lt;a href=&quot;https://m.do.co/c/e91058dbfc7b&quot;&gt;Digital Ocean&lt;/a&gt; using the Debian 8.5 x64 kernel images they use as of the above date. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Debian" scheme="http://www.tricksofthetrades.net/tags/Debian/"/>
    
      <category term="Jessie" scheme="http://www.tricksofthetrades.net/tags/Jessie/"/>
    
      <category term="VPS" scheme="http://www.tricksofthetrades.net/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Docker - Building Images and Docker Hub (5)</title>
    <link href="http://www.tricksofthetrades.net/2016/05/18/docker-images-hub/"/>
    <id>http://www.tricksofthetrades.net/2016/05/18/docker-images-hub/</id>
    <published>2016-05-17T23:00:00.000Z</published>
    <updated>2017-08-29T18:10:12.086Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/poo8Rai.png" alt="Docker Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Docker images can be thought of as blueprints and house the software or files required to run your application inside of a container. So far in these Docker posts all container images have been pulled from an online source and no real interaction with the images themselves has been explored. </p>
<p>However in this post we’re taking a very simple Python Flask application and going through the process of <em>dockerising</em> it. Which in non-jargon terms means we are configuring and creating our own custom Docker image, to then run it in a container like any other image. This usually also involves uploading it to Docker Hub for others to pull down and use, so is covered in the guide. </p>
<p>The <a href="http://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/">Docker - Data Volumes and Data Containers (4)</a> post that comes before this one is mostly unrelated so not really a requirement for this post, but still worth checking out overall. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Clone-the-Repository"><a href="#1-–-Clone-the-Repository" class="headerlink" title="1 –  Clone the Repository"></a>1 –  Clone the Repository</h1><p>The example application used in this post is named “Flaskr” and serves as a very simple messaging board. It allows a user to sign in/out, add new written entries to the message board displayed, and does all this using SQLite as the database backend. </p>
<p>Clone this example application and its code locally. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/5car1z/docker-flaskr.git ~/docker-flaskr</span><br></pre></td></tr></table></figure>
<p>Change your working directory to the new repository.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/docker-flaskr</span><br></pre></td></tr></table></figure>
<p>Take a quick glance at the files using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br></pre></td></tr></table></figure>
<p>Which returns: </p>
<figure class="highlight bash"><figcaption><span>Output </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flaskr.py  flaskr_settings  README  requirements.txt  schema.sql  static  templates  test_flaskr.py</span><br></pre></td></tr></table></figure>
<p>Then move onto the next step. </p>
<hr>
<h1 id="2-–-Configure-the-Application"><a href="#2-–-Configure-the-Application" class="headerlink" title="2 –  Configure the Application"></a>2 –  Configure the Application</h1><p>Most Flask or Python projects contain a file that holds circumstantial configuration values. These settings differ from user to user and when running the application in development/production environments. To run our Flaskr application and build a successful Docker image later on, we must set the values in this file beforehand.  </p>
<p>Open the <code>flaskr_settings</code> file with your preferred text editor.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim flaskr_settings</span><br></pre></td></tr></table></figure>
<p>The first two lines containing the database file location and debug status should remain as they are. There is no need to change these for this scenario. </p>
<figure class="highlight bash"><figcaption><span>flaskr_settings</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configuration</span></span><br><span class="line">DATABASE = <span class="string">'flaskr.db'</span></span><br><span class="line">DEBUG = False</span><br></pre></td></tr></table></figure>
<p>Generating a secret key for the third line here is easiest using a Python console.</p>
<figure class="highlight bash"><figcaption><span>flaskr_settings</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = <span class="string">''</span></span><br></pre></td></tr></table></figure>
<p>Back on the command line outside of the editor run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br></pre></td></tr></table></figure>
<p>Import the OS module. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure>
<p>Run the associated OS function for generating a string of random bytes (urandom). </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.urandom(<span class="number">24</span>)</span><br></pre></td></tr></table></figure>
<p>A 24 byte value is returned as output for use as the secret key in the <code>flaskr_settings</code> file. The key value shown here is for demonstration purposes only. </p>
<figure class="highlight python"><figcaption><span>Example Key Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'\xebqD\x0f\xf3\xcf\xaa\x9e]%\x86\xd7\x11h\x8f\xa3\xa6\xbb=\xf7m\xf2&#123;\xfd'</span></span><br></pre></td></tr></table></figure>
<p>Copy your own secret key value into the third line of the <code>flaskr_settings</code> file - you can exit the Python console by pressing <code>CTRL</code> + <code>D</code> once the key has been retained. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim flaskr_settings</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>flaskr_settings</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = <span class="string">'\xebqD\x0f\xf3\xcf\xaa\x9e]%\x86\xd7\x11h\x8f\xa3\xa6\xbb=\xf7m\xf2&#123;\xfd'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Only one set of enclosing apostrophes are required: <code>&#39;&#39;</code> </p>
</blockquote>
<p>On the last two lines of the configuration file provide a username and password. These details are used for authentication when logging into the app after it is up and running. </p>
<p>Add in your own values. </p>
<figure class="highlight python"><figcaption><span>flaskr_settings</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USERNAME = <span class="string">'username'</span></span><br><span class="line">PASSWORD = <span class="string">'password'</span></span><br></pre></td></tr></table></figure>
<p>Save your changes to the <code>flaskr_settings</code> file before continuing, and exit the file. </p>
<p>My example entries and file look like this when completed:</p>
<figure class="highlight python"><figcaption><span>flaskr_settings</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configuration</span></span><br><span class="line">DATABASE = <span class="string">'flaskr.db'</span></span><br><span class="line">DEBUG = <span class="keyword">False</span></span><br><span class="line">SECRET_KEY = <span class="string">'\xebqD\x0f\xf3\xcf\xaa\x9e]%\x86\xd7\x11h\x8f\xa3\xa6\xbb=\xf7m\xf2&#123;\xfd'</span></span><br><span class="line">USERNAME = <span class="string">'scarlz'</span></span><br><span class="line">PASSWORD = <span class="string">'password'</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="3-–-Create-the-Dockerfile"><a href="#3-–-Create-the-Dockerfile" class="headerlink" title="3 –  Create the Dockerfile"></a>3 –  Create the Dockerfile</h1><p>The build process and configuration parameters for our eventual Docker image get defined in a new file named the “Dockerfile”. </p>
<p>Create the new Dockerfile using your text editor again, and place each of the upcoming actions on its own separate line. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim Dockerfile</span><br></pre></td></tr></table></figure>
<p>Tell Docker to use the official Python 2.7 image as a base for our own custom image, on the first line.</p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM python:2.7</span><br></pre></td></tr></table></figure>
<p>Define an environment variable that tells Flaskr the name of the configuration file we completed earlier.</p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV FLASKR_SETTINGS flaskr_settings</span><br></pre></td></tr></table></figure>
<p>Add the <code>requirements.txt</code> file to the file-system of the image we are creating. </p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD requirements.txt /tmp/requirements.txt</span><br></pre></td></tr></table></figure>
<p>Install the Flaskr application dependencies onto this image - sourced in from the “requirements” file. </p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN pip install -r /tmp/requirements.txt</span><br></pre></td></tr></table></figure>
<p>Add the current working directory <code>.</code> of the project and its contents to a new directory on the image’s file-system. </p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD . /flask-application</span><br></pre></td></tr></table></figure>
<p>Set the image’s file-system current working directory to the one we are creating. </p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /flask-application</span><br></pre></td></tr></table></figure>
<p>Open port <code>5000</code> on the container so we can map it to a host port later. </p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 5000</span><br></pre></td></tr></table></figure>
<p>Run the Flaskr app on this image, once the container is launched by the user.  </p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"python"</span>, <span class="string">"flaskr.py"</span>, <span class="string">"--host"</span>, <span class="string">"0.0.0.0"</span>, <span class="string">"--port"</span>, <span class="string">"5000"</span>]</span><br></pre></td></tr></table></figure>
<p>The Dockerfile in full:</p>
<figure class="highlight bash"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM python:2.7</span><br><span class="line">ENV FLASKR_SETTINGS flaskr_settings</span><br><span class="line">ADD requirements.txt /tmp/requirements.txt</span><br><span class="line">RUN pip install -r /tmp/requirements.txt</span><br><span class="line">ADD . /flaskr-application</span><br><span class="line">WORKDIR /flaskr-application</span><br><span class="line">EXPOSE 5000</span><br><span class="line">CMD [<span class="string">"python"</span>, <span class="string">"flaskr.py"</span>, <span class="string">"--host"</span>, <span class="string">"0.0.0.0"</span>, <span class="string">"--port"</span>, <span class="string">"5000"</span>]</span><br></pre></td></tr></table></figure>
<p>Make sure your own file’s contents matches the above, and then save the changes. </p>
<hr>
<h1 id="4-–-Build-and-Run-the-Image"><a href="#4-–-Build-and-Run-the-Image" class="headerlink" title="4 – Build and Run the Image"></a>4 – Build and Run the Image</h1><p>Using Docker (which you should already <a href="http://www.tricksofthetrades.net/2015/12/23/installing-running-docker/">have installed</a>) we’re going to build the custom Flaskr image configured in the previous step. </p>
<p>When entering this next command be aware that ideally the parameters of <code>-t</code> need to be replaced with your own username and preferred image name. The details are used later on when registering the image externally. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build --no-cache -t scarlz/flaskr-application .</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> The <code>-t</code> option assigns a <em>tag</em> to the image used by Docker Hub or an image registry service. </p>
</blockquote>
<p>Give the build process a few minutes to download and carry out the necessary operations, noting its progress via the output. </p>
<p>If the Dockerfile was configured properly in the previous step you’ll get a final output similar to:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Successfully built c4e546ed282d</span><br></pre></td></tr></table></figure>
<p>Run the newly built Docker image in a daemonised container, mapping the internal container port <code>5000</code> to the host port <code>32775</code> so we can view the app locally. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name flaskr-container -p 32775:5000 <span class="_">-d</span> scarlz/flaskr-application</span><br></pre></td></tr></table></figure>
<p>Confirm the container has run and is running. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure>
<p>Running container details are returned:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">c3937994e66b        scarlz/flaskr-application   <span class="string">"python flaskr.py --h"</span>   3 seconds ago       Up 3 seconds        0.0.0.0:5000-&gt;32775/tcp   flaskr-container</span><br></pre></td></tr></table></figure>
<p>Preview the Flaskr app in your web browser by visiting:</p>
<p><code>http://0.0.0.0:32775</code></p>
<p><img src="http://i.imgur.com/sLe4eCC.png" alt="Flaskr Homepage Image"></p>
<p>Log in to the application with the authentication details from step 2 if you wish to test it out. </p>
<p><img src="http://i.imgur.com/wtTvZkZ.png" alt="Flaskr Internal Form Image"></p>
<hr>
<h2 id="5-–-Push-the-Image-to-Docker-Hub"><a href="#5-–-Push-the-Image-to-Docker-Hub" class="headerlink" title="5 – Push the Image to Docker Hub"></a>5 – Push the Image to Docker Hub</h2><p>Once images have been built and tested successfully you may want to make them accessible to others through a public or private Docker registry service. The official registry service open to all provided by Docker is known as <a href="https://hub.docker.com/" target="_blank" rel="external">“Docker Hub”</a>. </p>
<p>Create a free account by registering with the service at the previous link and then go back to the command line and login using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure>
<p>Enter the authentication details you used to sign up to the service as prompted. </p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Username: </span><br><span class="line">Password: </span><br><span class="line">Email: </span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>
<p>Now once successfully authenticated push the image you created earlier to Docker Hub by providing the “tag” name assigned to it. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push scarlz/flaskr-application:latest</span><br></pre></td></tr></table></figure>
<p>The <code>:latest</code> suffix ensures the most recently built version of the image is sent. </p>
<p>Successfully pushing the image will return an output akin to:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">77e39ee82117: Image successfully pushed</span><br></pre></td></tr></table></figure>
<p>You can see the example image I pushed to Docker Hub at: </p>
<p><a href="https://hub.docker.com/r/5car1z/flaskr-application" target="_blank" rel="external">https://hub.docker.com/r/5car1z/flaskr-application</a></p>
<p><img src="http://i.imgur.com/roVLQ0J.png" alt="Docker Hub - Flaskr"></p>
<hr>
<p>There are many more practices and nuances not covered here when it comes to building, tagging, and pushing to Docker registries. But hopefully this serves as a simple example of how the process can be carried out. Something to bear in mind perhaps is that Docker Hub has in the past been given bad press in terms of performance (most notably speed) although the service continues to improve as time goes on. it is also for these reasons or similar many use third party private registry platforms in its place e.g. <a href="">Portus</a></p>
<p>The next and final post in this series takes a glance briefly at some of the extra platforms/toolsets that form up more of the Docker eco-system.</p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Docker posts can be found on the Trades page.</a></p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://github.com/5car1z/docker-flaskr" target="_blank" rel="external">GitHub - Docker-Flaskr Repository</a> – Repository for this post cloned at the start.</li>
<li><a href="http://tiborsimko.org/docker-for-python-applications.html" target="_blank" rel="external">Tibor’s Musings - Using Docker for Developing Python Applications</a> – Basis of what goes on this blog post with adaption for Flaskr.</li>
<li><a href="">Official Docker Documentation - Build Your Own Images</a> – Probably best source for everything covered here. </li>
<li><a href="http://prakhar.me/docker-curriculum/" target="_blank" rel="external">Prakhar - Docker for Beginners</a> – Detailed guide on fundamentals of Docker, referred to partly for this post.</li>
<li><a href="https://community.nitrous.io/docs/creating-custom-docker-images" target="_blank" rel="external">Nitrous.io Documentation - Creating Custom Docker Images</a> – Specific to Nitrous development in parts but relevant overall. </li>
<li><a href="http://flask.readthedocs.io/en/latest/cli/#command-line-interface" target="_blank" rel="external">Flask Documentation - Command Line Interface</a> – Flask application CLI documentation page. </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/poo8Rai.png&quot; alt=&quot;Docker Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Docker images can be thought of as blueprints and house the software or files required to run your application inside of a container. So far in these Docker posts all container images have been pulled from an online source and no real interaction with the images themselves has been explored. &lt;/p&gt;
&lt;p&gt;However in this post we’re taking a very simple Python Flask application and going through the process of &lt;em&gt;dockerising&lt;/em&gt; it. Which in non-jargon terms means we are configuring and creating our own custom Docker image, to then run it in a container like any other image. This usually also involves uploading it to Docker Hub for others to pull down and use, so is covered in the guide. &lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/&quot;&gt;Docker - Data Volumes and Data Containers (4)&lt;/a&gt; post that comes before this one is mostly unrelated so not really a requirement for this post, but still worth checking out overall. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Docker" scheme="http://www.tricksofthetrades.net/tags/Docker/"/>
    
      <category term="Virtualisation" scheme="http://www.tricksofthetrades.net/tags/Virtualisation/"/>
    
      <category term="Containers" scheme="http://www.tricksofthetrades.net/tags/Containers/"/>
    
  </entry>
  
  <entry>
    <title>Git Version Control - Contributing to GitHub Projects (3)</title>
    <link href="http://www.tricksofthetrades.net/2016/04/26/github-flow/"/>
    <id>http://www.tricksofthetrades.net/2016/04/26/github-flow/</id>
    <published>2016-04-25T23:00:00.000Z</published>
    <updated>2017-08-29T20:07:50.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/HLLz1Wv.png" alt="Octocat!"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>GitHub is one of the most popular ways to contribute to open-source projects. Many major and minor organisations keep their open-source code-base hosted there, adopting the idea that anyone who follows the rules can have their own efforts put up for consideration. This post talks about said process, which if anything is referred to as “GitHub Flow”.   </p>
<p>This information as presented by GitHub is readily available in various forms within their <a href="https://guides.github.com/" target="_blank" rel="external">“GitHub Guides”</a> documentation. More specific links to these are listed at the end of the post. </p>
<blockquote>
<p><strong>“As of April 2016, GitHub reports having more than 14 million users and more than 35 million repositories, making it the largest host of source code in the world.”</strong></p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="Github-Flow"><a href="#Github-Flow" class="headerlink" title="Github Flow"></a>Github Flow</h1><p>Summarised, the general concept here in terms of public contributions is to:</p>
<ol>
<li>Fork, then create a suitable topic branch from master.</li>
<li>Make some commits to improve the project.</li>
<li>Push the branch to the forked GitHub project.</li>
<li>Open a Pull Request for merging on the original GitHub repo.</li>
<li>Discuss, and optionally continue committing.</li>
<li>The project owner then merges or closes the Pull Request.</li>
</ol>
<p>The upcoming sections cover these steps in more detail.</p>
<p>This PDF gives a loose impression of how the “flow” process would apply in the context of a formal team working on their project (i.e. the non public workflow): </p>
<object data="https://guides.github.com/pdfs/githubflow-online.pdf#" type="application/pdf" width="100%" height="900"><br><br><p>It appears your Web browser is not configured to display PDF files.<br>No worries, just <a href="https://guides.github.com/pdfs/githubflow-online.pdf" target="_blank" rel="external">click here to download the PDF file.</a></p><br><br></object>

<hr>
<h1 id="Public-Pull-Requests"><a href="#Public-Pull-Requests" class="headerlink" title="Public Pull Requests"></a>Public Pull Requests</h1><p>Outside of an internal team back in the public domain, we return to the steps summarised before. These are now covered in greater detail and do not mirror the steps above completely as these are laid out in a more practical manner. </p>
<h2 id="1-–-Fork-Repository"><a href="#1-–-Fork-Repository" class="headerlink" title="1 – Fork Repository"></a>1 – Fork Repository</h2><p><img src="https://i.gyazo.com/7776cde860e0215dacab1fd81d53894a.png" alt="Flow - Step 1"></p>
<p>The first step is to find the project on GitHub you want to contribute to, then read through any guidelines they may have in the <code>CONTRIBUTING</code> file, or similarly named. These guidelines are usually code conventions/syntax, feature requests, or nuances specific to the project. </p>
<p>Project’s often have wiki’s containing information along these lines too (especially the larger ones). This can be accessed from the top of the project page tabs, if it exists. </p>
<p>Once selected, the next step is to <em>fork</em> the repository by clicking the aptly named button. You must be signed into your GitHub account when doing this.</p>
<p>Here’s a picture of what the button looks like:</p>
<p><img src="https://git-scm.com/book/en/v2/book/06-github/images/forkbutton.png" alt="GitHub Fork Button"></p>
<p>After a few seconds, you’re taken to your own forked version of the repository. In which everything you do is now separate to the original project.</p>
<blockquote>
<p><a href="https://help.github.com/articles/fork-a-repo/" target="_blank" rel="external">Pro Git Book - Forking Projects</a></p>
</blockquote>
<hr>
<h2 id="2-–-Sync-Fork"><a href="#2-–-Sync-Fork" class="headerlink" title="2 – Sync Fork"></a>2 – Sync Fork</h2><p>Any updates or commits that get added to the original repository by the maintainers won’t be included in your fork, so they need to be retrieved and merged. This is so that when it comes to offering up your own changes, they’re in the context of the up to date target project. </p>
<p>This syncing may not be required right now, but once future commits are made to the <em>upstream</em> repository, you’ll need to pull them into your own fork so it’s kept up to date. </p>
<p>Clone your forked repository locally then add the original upstream repository as a remote.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure>
<p>Confirm success with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>
<p>Fetch the branches and their respective commits from the <code>upstream</code> repository. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream</span><br></pre></td></tr></table></figure>
<p>Ensure you’re on the <code>master</code> branch.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>
<p>Upstream commits to <code>master</code> are now stored in a local branch named <code>upstream/master</code> . </p>
<p>Merge the changes from <code>upstream/master</code> into your local <code>master</code> branch; this doesn’t automatically lose any of your own local changes.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge upstream/master</span><br></pre></td></tr></table></figure>
<p>Assuming there are no merge conflicts you are then safe to push these to your own fork’s remote repo.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>This completes the syncing process, but the merge will need to be carried out each time you want to update your own fork with the original repo’s new commits. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge upstream/master</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>A secondary method where you manually <code>pull</code> in the updates is also available, and the steps for it are described <a href="https://help.github.com/articles/merging-an-upstream-repository-into-your-fork/#platform-linux" target="_blank" rel="external">here</a>.</p>
<blockquote>
<p><a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/" target="_blank" rel="external">GitHub Help - Configuring a Remote For a Fork</a><br><a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">GitHub Help - Syncing a Fork</a></p>
</blockquote>
<hr>
<h2 id="3-–-Make-Changes-on-New-Branch"><a href="#3-–-Make-Changes-on-New-Branch" class="headerlink" title="3 – Make Changes on New Branch"></a>3 – Make Changes on New Branch</h2><p><img src="https://i.gyazo.com/0e84174ca44be84d385dd7c7055d79d2.png" alt="Flow - Step 2"></p>
<p>Creating a new branch based off of the master branch and then implementing your changes in there, is good practice when working on a project. It’s possible to make changes directly to the master branch, but even just for the sake of etiquette, avoid doing this. It also means you can push follow-up commits if you need to update the future pull request.</p>
<p>Your branch names should be descriptive (e.g. refactor-authentication, user-content-cache-key, make-retina-avatars) etc. </p>
<p>Create a new branch with <code>-b</code> and a suitable name.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b branch_name</span><br></pre></td></tr></table></figure>
<p>From here on you’re good to make the changes and improvements you need for your eventual Pull Request. </p>
<p>Remember to add, commit, and push your branch changes to the remote version of the fork once finished. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"message"</span></span><br><span class="line">$ git push origin branch_name</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="4-–-Create-Pull-Request"><a href="#4-–-Create-Pull-Request" class="headerlink" title="4 – Create Pull Request"></a>4 – Create Pull Request</h2><p><img src="https://i.gyazo.com/1e20c1f9ad9618972aa7e78fdbf85337.png" alt="Flow - Step 3"></p>
<p>Pull requests allow the original project’s maintainer(s) to compare your branch to their existing master branch, and decide whether or not to incorporate (merge) your changes.</p>
<p>You can open a Pull Request at any point during the development process, but ideally should be when you’re ready for someone to review your work. Using GitHub’s “@mention” system in your Pull Request message means you can target specific people or teams for feedback, as they’ll be individually notified. </p>
<p>Click the green “New Pull Request” button on your GitHub fork webpage, and you’ll see a screen that compares the two target repositories. Add as much detail as possible to the Pull Request description to make clear the changes.</p>
<p><img src="https://git-scm.com/book/en/v2/book/06-github/images/blink-03-pull-request-open.png" alt="Pro Git Book - Create Pull Request View"></p>
<p>When you hit “Create Pull Request” to confirm - the project owners of the original repo will get a notification that someone has suggested a new changes or features, and get access to the summary of the request. </p>
<blockquote>
<p><a href="https://help.github.com/articles/using-pull-requests/" target="_blank" rel="external">GitHub Help - Using Pull Requests</a></p>
</blockquote>
<hr>
<h2 id="5-–-Discuss-Changes"><a href="#5-–-Discuss-Changes" class="headerlink" title="5 – Discuss Changes"></a>5 – Discuss Changes</h2><p><img src="https://i.gyazo.com/48268c6e0a225557ac97ca1ca1714aee.png" alt="Flow - Step 4"></p>
<p>Pull Requests often initiate discussion about your proposed changes. This comes in the form of he maintainer or his team asking questions and suggesting further improvements. Other users on GitHub can see the Pull Request details too, and may chime in - the review process is not limited to just official project members.</p>
<blockquote>
<p><strong>“Pull Requests are designed to encourage and capture this type of conversation.”</strong></p>
</blockquote>
<p>If you are asked to make some changes to your Pull Request, simply add new commits to your dedicated branch locally and push them again. These get automatically placed into the existing Pull Request.</p>
<p>On a final note here user comments are written in Markdown, and you can embed images, emoji, use pre-formatted code blocks, and add other supported formatting. Remember the “@mention” system too. </p>
<hr>
<h2 id="6-–-Testing-Optional"><a href="#6-–-Testing-Optional" class="headerlink" title="6 – Testing (Optional)"></a>6 – Testing (Optional)</h2><p><img src="https://i.gyazo.com/01f4248fb138526a54c021a898a34069.png" alt="Flow - Step 5"></p>
<p>This is generally not something you have to worry about; unless you’ve been asked to include/run some unit tests in your changes. Most of the other “production” tests that verify whether your changes work in a live environment or not (TravisCI, Jenkins, etc), are run by the maintainer and performed automatically. </p>
<p>As long as these pass you’re fine. If the branch commits do causes issues you should amend your work as instructed by a maintainer - in the same manner as before. </p>
<hr>
<h2 id="7-–-Pull-Request-Merges-Closes"><a href="#7-–-Pull-Request-Merges-Closes" class="headerlink" title="7 – Pull Request Merges/Closes"></a>7 – Pull Request Merges/Closes</h2><p><img src="https://i.gyazo.com/098018f3096144cbc5bf434f98c4aff2.png" alt="Flow - Step 6"></p>
<p>Now that your changes have been approved, maybe iterated on, and tested to work in production, your Pull Request <strong>may</strong> get merged. </p>
<p>If your Pull Request gets merged by the end of it all  that’s great. If not there was probably good reason. Take any feedback you receive and don’t worry about it too much - it happens a lot. </p>
<p>If merged successfully however, the Pull Request is preserved and a record of the changes become a part of the project’s Git history.</p>
<hr>
<h1 id="Collaborator-Method"><a href="#Collaborator-Method" class="headerlink" title="Collaborator Method"></a>Collaborator Method</h1><p>There are despite all the above not just one but two methods of contributing to a project. When working as part of a team on GitHub or organisation, things become a bit easier and less informal. The PDF from the “Flow” section applies more here too, but not completely as a team could still be comprised of public users. </p>
<h2 id="1-–-Become-a-Collaborator"><a href="#1-–-Become-a-Collaborator" class="headerlink" title="1 – Become a Collaborator"></a>1 – Become a Collaborator</h2><p>Owners of a repository can add more users to work as “collaborators” for the project. Giving them read and write permissions to a repository.  Repositories owned by GitHub “organisations” have more controls over granting collaborators permissions. </p>
<p>In general though users can be added as collaborators under your repository’s “Settings” page, by clicking the “Collaborators &amp; teams” tab. Then entering the username you wish to add into the search field.</p>
<p><img src="https://help.github.com/assets/images/help/repository/repo-settings-collab-autofill.png" alt="Collaborators Search Field"></p>
<p>Giving them write privileges should they need them, and clicking the “Add collaborator” button to confirm.  </p>
<blockquote>
<p><a href="https://help.github.com/categories/managing-repository-collaborators/" target="_blank" rel="external">GitHub Help - Managing Repository Collaborators</a></p>
</blockquote>
<hr>
<h2 id="2-–-Clone-Repository"><a href="#2-–-Clone-Repository" class="headerlink" title="2 – Clone Repository"></a>2 – Clone Repository</h2><p>The targeted collaborator can now clone the repo to make changes and improvements to it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/username/repository-name.git</span><br></pre></td></tr></table></figure>
<p>Notice there is no need to fork the repository like previously as any changes committed and pushed will be instantly merged and approved into the remote version on GitHub. </p>
<hr>
<h2 id="3-–-Make-Changes"><a href="#3-–-Make-Changes" class="headerlink" title="3 – Make Changes"></a>3 – Make Changes</h2><p>As before make your changes in the same way (still abiding by the new branch workflow). </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b branch_name</span><br></pre></td></tr></table></figure>
<p>But remember if changing contents of the master branch, that these are merged instantly when pushed. Any errors/mistakes can be reverted or undone thanks to Git, but still be careful as the master branch is often used for live deployment setups and in conjunction with the automated CI tools mentioned earlier. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"messsage"</span></span><br><span class="line">$ git push origin branch_name</span><br></pre></td></tr></table></figure>
<p>Consider the next two options available to you after pushing. </p>
<hr>
<h2 id="Option-A-–-Merge-Changes"><a href="#Option-A-–-Merge-Changes" class="headerlink" title="Option A – Merge Changes"></a>Option A – Merge Changes</h2><p>There are two options on offer to you once you have your feature or fixes committed and pushed to the new remote branch. </p>
<p>If you’re confident the work can be merged into master, and happy to fix any merge conflicts yourself (and also have the permissions). Then you can merge the changes on the command line. </p>
<p>Before merging make sure you are on the master branch and it’s up to date locally. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>
<p>Merge the new target branch into master.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge branch_name</span><br></pre></td></tr></table></figure>
<p>Fix any merge conflicts and push the changes to the remote master branch on GitHub. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Option-B-–-Create-Pull-Request"><a href="#Option-B-–-Create-Pull-Request" class="headerlink" title="Option B – Create Pull Request"></a>Option B – Create Pull Request</h2><p>An alternative choice and one better suited to those who want approval or simply for other team members to first see their proposed merges - is to instead create a pull request that visualises the process, and shows up on GitHub. </p>
<p>After pushing the branch to GitHub’s remote repo, a new “Compare &amp; pull request” button appears on the project page:</p>
<p><img src="https://i.gyazo.com/2767fdac556f907d3bb77f0d8703415f.png" alt="Compare &amp; pull request Button"></p>
<p>If this is not present the usual “New pull request” button is available to compare the two branches, with the view to merging.  </p>
<p><img src="https://i.gyazo.com/cf3c19b47ab83c86bc88270b9ba57597.png" alt="New pull request Button"></p>
<p>Either way this new request can be commented on, verified, improved further and resolved of any merge conflicts before merging. Which can be done by someone else in the team who has the permissions or power of approval. All thorough GitHub like in the case of a regular public pull request. </p>
<p><img src="https://i.gyazo.com/84b2b2c365ee221affd3838d6bd551ab.png" alt="Merge pull request Button"></p>
<hr>
<h2 id="Protected-Branches"><a href="#Protected-Branches" class="headerlink" title="Protected Branches"></a>Protected Branches</h2><p>One last point worth mentioning that revolves around collaborators and teams is the concept of “Protected Branches”. This idea ensures that approved collaborators cannot make irrevocable changes to branches on repositories. This is intended to keep your project and pull requests organised and safe. </p>
<p>Specifically these administrator designated branches cannot be force pushed, cannot be deleted, and cannot have changes merged into them until required status checks have passed. </p>
<blockquote>
<p><a href="https://help.github.com/articles/about-protected-branches/" target="_blank" rel="external">GitHub Help - About Protected Branches</a><br><a href="https://help.github.com/articles/configuring-protected-branches/" target="_blank" rel="external">GitHub Help - Configuring Protected Branches</a></p>
</blockquote>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Git posts can be found on the Trades page.</a></p>
<hr>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://guides.github.com/activities/contributing-to-open-source/" target="_blank" rel="external">GitHub Guides - Contributing to Open Source on GitHub</a></li>
<li><a href="https://guides.github.com/introduction/flow/index.html" target="_blank" rel="external">GitHub Guides - Understanding the GitHub Flow</a></li>
<li><a href="https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project" target="_blank" rel="external">Pro Git Book - Contributing to a Project</a></li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/HLLz1Wv.png&quot; alt=&quot;Octocat!&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;GitHub is one of the most popular ways to contribute to open-source projects. Many major and minor organisations keep their open-source code-base hosted there, adopting the idea that anyone who follows the rules can have their own efforts put up for consideration. This post talks about said process, which if anything is referred to as “GitHub Flow”.   &lt;/p&gt;
&lt;p&gt;This information as presented by GitHub is readily available in various forms within their &lt;a href=&quot;https://guides.github.com/&quot;&gt;“GitHub Guides”&lt;/a&gt; documentation. More specific links to these are listed at the end of the post. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“As of April 2016, GitHub reports having more than 14 million users and more than 35 million repositories, making it the largest host of source code in the world.”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Git" scheme="http://www.tricksofthetrades.net/tags/Git/"/>
    
      <category term="VCS" scheme="http://www.tricksofthetrades.net/tags/VCS/"/>
    
      <category term="GitHub" scheme="http://www.tricksofthetrades.net/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Docker - Data Volumes and Data Containers (4)</title>
    <link href="http://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/"/>
    <id>http://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/</id>
    <published>2016-03-14T00:00:00.000Z</published>
    <updated>2017-11-02T20:47:20.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/poo8Rai.png" alt="Docker Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><blockquote>
<p><strong><a href="https://docs.docker.com/engine/admin/volumes/volumes/" target="_blank" rel="external">This blog post is becoming more and more outdated as time goes on, it would be better to consult the official Docker documentation for this kind of thing!</a></strong></p>
</blockquote>
<p>Docker containers are a lot more scalable and modular once they have the links in place that allow them to share data. How these links are created and arranged depends upon the arranger, who will choose either to create a file-system data volume or a dedicated data volume container. </p>
<p>This post works through these two common choices; data volumes and data volume containers. With consideration of the commands involved in backing up, restoring, and migrating said data volumes.</p>
<p>This is post four on Docker following on from <a href="http://www.tricksofthetrades.net/2016/01/27/docker-further-administration-networking/">Docker - Daemon Administration and Networking (3)</a>. Go back and read the latter half of that post to see how to network containers together so they can properly communicate back and forth - if you need to. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Creating-Data-Volumes"><a href="#1-–-Creating-Data-Volumes" class="headerlink" title="1 – Creating Data Volumes"></a>1 – Creating Data Volumes</h1><p>A “data volume” is a marked directory inside of a container that exists to hold persistent or commonly shared data. Assigning these volumes is done when creating a new container. </p>
<p>Any data already present as part of the Docker image in a targeted volume directory is carried forward into the new container and not lost. This however is not true when mounting a local host directory (covered later) as the data is temporarily covered by the new volume. </p>
<iframe width="1080" height="500" src="https://www.youtube.com/embed/e1yXmc7-mU4" frameborder="1" allowfullscreen><br></iframe> 

<p>You can add a data volume to a container using the <code>-v</code> flag in conjunction with the <code>create</code> or <code>run</code> command. You can use the -<code>v</code> multiple times to mount multiple data volumes.</p>
<p>This next command will create a data volume inside a new container in the <code>/webapp</code> directory. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> -P --name <span class="built_in">test</span>-container -v /webapp training/webapp python app.py</span><br></pre></td></tr></table></figure>
<p>Data volumes are very useful as once designated and created they can be shared and included as part of other containers. It’s also important to note that any changes to data volumes are not included when you update an image, but conversely data volumes will persist even if the container itself is deleted.</p>
<blockquote>
<p><strong>Note:</strong> The <code>VOLUME</code> instruction in a <code>Dockerfile</code> will add one or more new volumes to any containers created from the image.</p>
</blockquote>
<p>This preservation is due to the fact that data volumes are meant to persist independent of a container’s life cycle. In turn this also means Docker never <em>garbage collects</em> volumes that are no longer in use by a container. </p>
<hr>
<h1 id="2-–-Creating-Host-Data-Volumes"><a href="#2-–-Creating-Host-Data-Volumes" class="headerlink" title="2 – Creating Host Data Volumes"></a>2 – Creating Host Data Volumes</h1><p>You can instead mount a directory from your Docker daemon’s <strong>host</strong> into a container; you may have seen this used once or twice in the previous posts. </p>
<p>Mounting a host directory can be useful for testing. For example, you can mount source code inside a container. Then, change the source code and see its effect on the application in real time. The directory on the host must be specified as an absolute path and if the directory doesn’t exist Docker will automatically create it for you. </p>
<p>The next example command mounts the host directory <code>/src/webapp</code> into the container at the <code>/opt/webapp</code> directory. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> -P --name <span class="built_in">test</span>-container -v /src/webapp:/opt/webapp training/webapp python app.py</span><br></pre></td></tr></table></figure>
<p>Some internal rules and behaviours for this process are:</p>
<ul>
<li><p>The targeted container directory must always take an absolute full file-system path.</p>
</li>
<li><p>The host source directory can be either an absolute path or a name value. </p>
</li>
<li><p>If the targeted container path already exists inside the container’s image, the host directory mount overlays but does not remove the destination content. Once the mount is removed, the destination content is accessible again. </p>
</li>
</ul>
<p>Docker volumes default to mounting as both a dual read-write mode, but you can set them to mount as read-only if you like.</p>
<p>Here the same <code>/src/webapp</code> directory is linked again but the extra <code>:ro</code> option makes the mount read-only.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> It’s not possible to mount a host directory using a <code>Dockerfile</code> because by convention images should be portable and flexible, and a specific host directory might not be available on all potential hosts.</p>
</blockquote>
<hr>
<h1 id="3-–-Mounting-Individual-Host-Files"><a href="#3-–-Mounting-Individual-Host-Files" class="headerlink" title="3 – Mounting Individual Host Files"></a>3 – Mounting Individual Host Files</h1><p>The <code>-v</code> flag used so far can target a single file instead of entire directories from the host machine. This is done by mapping the specific file on each side of the container. </p>
<p>A great interactive example of this that creates a new container and drops you into a bash shell with your bash history from the host, is as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -v ~/.bash_history:/root/.bash_history ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
<p>Furthermore when you exit the container, the host version of the file will have the the commands typed from the inside of the container - written to the the <code>.bash_history</code> file. </p>
<hr>
<h1 id="4-–-Creating-Dedicated-Data-Volume-Containers"><a href="#4-–-Creating-Dedicated-Data-Volume-Containers" class="headerlink" title="4 – Creating Dedicated Data Volume Containers"></a>4 – Creating Dedicated Data Volume Containers</h1><p>A popular practice with Docker data sharing is to create a dedicated container that holds all of your persistent shareable data resources, mounting the data inside of it into other containers once created and setup. </p>
<p>This example taken from the Docker documentation uses the <code>postgres</code> SQL training image as a base for the data volume container. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker create -v /data-store --name data-store training/postgres /bin/<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> <code>/bin/true</code> - returns a <code>0</code> and does nothing if the command was successful. </p>
</blockquote>
<p>The <code>--volumes-from</code> flag is then used to mount the <code>/data-store</code> volume inside of other containers:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> --volumes-from data-store --name database-container-1 training/postgres</span><br></pre></td></tr></table></figure>
<p>This process is repeated for additional new containers:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> --volumes-from data-store --name database-container-2  training/postgres</span><br></pre></td></tr></table></figure>
<p>Be aware that you can use multiple <code>--volumes-from</code> flags in one command to combine data volumes from multiple other dedicated data containers. </p>
<p>An alternative idea is to mount the volumes from each subsequent container to the next, instead of the original dedicated container linking to new ones. </p>
<p>This forms a chain that would begin by using: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> --name database-container-3 --volumes-from database-container-2  training/postgres</span><br></pre></td></tr></table></figure>
<p>Remember that If you remove containers that mount volumes, the volume store and its data will not be deleted. Docker preserves it. </p>
<p>To fully delete a volume from the file-system you must run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm -v &lt;container name&gt;</span><br></pre></td></tr></table></figure>
<p>Where <code>&lt;container name&gt;</code> is “the last container with a reference to the volume.”</p>
<blockquote>
<p><strong>Note:</strong> There is no cautionary Docker warning provided when removing a container without  the <code>-v</code> option.  So if a container has volumes mounted the <code>-v</code> must be passed to fully remov them. </p>
</blockquote>
<h2 id="Dangling-Volumes"><a href="#Dangling-Volumes" class="headerlink" title="Dangling Volumes"></a>Dangling Volumes</h2><p>“Dangling volumes” refers to container volumes that are no longer referenced by a container.</p>
<p>Fortunately there is a command to list out all the stray volumes on a system.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls <span class="_">-f</span> dangling=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>To remove a volume that’s no longer needed use:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume rm &lt;volume name&gt;</span><br></pre></td></tr></table></figure>
<p>Where <code>&lt;volume name&gt;</code> is substituted for the dangling volume name shown in the previous <code>ls</code> output. </p>
<hr>
<h1 id="5-–-Backing-Up-and-Restoring-Data-Volumes"><a href="#5-–-Backing-Up-and-Restoring-Data-Volumes" class="headerlink" title="5 – Backing Up and Restoring Data Volumes"></a>5 – Backing Up and Restoring Data Volumes</h1><p>How are data volumes maintained when it comes to things like backups, restoration, and migration? Well here is one solution that takes care of these necessities by showing how you can achieve this with a dedicated data container. </p>
<p>To backup a volume:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --volumes-from data-container -v $(<span class="built_in">pwd</span>):/backup ubuntu tar cvf /backup/backup.tar /data-store</span><br></pre></td></tr></table></figure>
<p>Here’s how the previous command works:</p>
<ol>
<li>The <code>--volumes-from</code> flag creates a new nameless container that mounts the data volume inside <code>data-container</code> you wish to backup. </li>
<li>A localhost directory is mounted as <code>/backup</code> . Then <code>tar</code> archives the contents of the <code>/data-store</code> volume to a <code>backup.tar</code> file inside the local <code>/backup</code> directory. </li>
<li>The container will be <code>--rm</code> removed once it eventually ends and exits. </li>
</ol>
<p>We are left with a backup of the <code>/data-store</code> volume on the localhost. </p>
<p>From here you could restore the volume in whatever way you wish.</p>
<p>To restore into a new container run: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -v /data-store --name data-container-2 ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
<p>Then extract the backup file contents into the the new container’s data volume:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --volumes-from data-container-2 -v $(<span class="built_in">pwd</span>):/backup ubuntu bash -c <span class="string">"cd /data-store &amp;&amp; tar -xvf /backup/backup.tar"</span></span><br></pre></td></tr></table></figure>
<p>Now the new container is up and running with the files from the original <code>/data-store</code> volume. </p>
<hr>
<h1 id="6-–-Volume-and-Data-Container-Issues"><a href="#6-–-Volume-and-Data-Container-Issues" class="headerlink" title="6 – Volume and Data Container Issues"></a>6 – Volume and Data Container Issues</h1><ul>
<li><p><strong>Orphan Volumes</strong> – Referred to as dangling volumes earlier on. These are the leftover untracked volumes that aren’t removed from the system once a container is removed/deleted. </p>
</li>
<li><p><strong>Security</strong> – Other than the usual Unix file permissions and the ability to set read-only or read-write privileges. Docker volumes or data containers have no additional security placed on them. </p>
</li>
<li><p><strong>Data Integrity</strong> – Sharing data using volumes and data containers provides no level of data integrity protection. Data protection features are not yet built into Docker i.e. data snapshot, automatic data replication, automatic backups, etc. So data management has to be handled by the administrator or the container itself. </p>
</li>
<li><p><strong>External Storage</strong> –  The current design does not take into account the ability to use a Docker volume spanning from one host to another. They must be on the same host. </p>
</li>
</ul>
<hr>
<p>It seems like a large amount of information has been covered here but really only two ideas have been explored. That of singular data volumes and that of the preferred independent data container. There are also new updates to Docker on the horizon as always so some of the issues raised here are hopefully soon to be resolved. The next post on Docker covers building images using Dockerfiles, and likewise with Docker Compose. </p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Docker posts can be found on the Trades page.</a></p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://docs.docker.com/engine/userguide/dockervolumes/" target="_blank" rel="external">Official Docker Documentation – Manage Data in Containers</a> – Main source material used for this post. </li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-work-with-docker-data-volumes-on-ubuntu-14-04" target="_blank" rel="external">Digital Ocean - How To Work with Docker Data Volumes on Ubuntu 14.04</a> – Breaks down the topic further and has some Nginx logging volume mount examples. </li>
<li><a href="http://www.computerweekly.com/feature/Docker-storage-101-How-storage-works-in-Docker" target="_blank" rel="external">Docker storage 101: How storage works in Docker</a> – Article from April 2015 that goes over the general ideas and practices discussed here. </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/poo8Rai.png&quot; alt=&quot;Docker Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.docker.com/engine/admin/volumes/volumes/&quot;&gt;This blog post is becoming more and more outdated as time goes on, it would be better to consult the official Docker documentation for this kind of thing!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker containers are a lot more scalable and modular once they have the links in place that allow them to share data. How these links are created and arranged depends upon the arranger, who will choose either to create a file-system data volume or a dedicated data volume container. &lt;/p&gt;
&lt;p&gt;This post works through these two common choices; data volumes and data volume containers. With consideration of the commands involved in backing up, restoring, and migrating said data volumes.&lt;/p&gt;
&lt;p&gt;This is post four on Docker following on from &lt;a href=&quot;http://www.tricksofthetrades.net/2016/01/27/docker-further-administration-networking/&quot;&gt;Docker - Daemon Administration and Networking (3)&lt;/a&gt;. Go back and read the latter half of that post to see how to network containers together so they can properly communicate back and forth - if you need to. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Docker" scheme="http://www.tricksofthetrades.net/tags/Docker/"/>
    
      <category term="Virtualisation" scheme="http://www.tricksofthetrades.net/tags/Virtualisation/"/>
    
      <category term="Containers" scheme="http://www.tricksofthetrades.net/tags/Containers/"/>
    
  </entry>
  
  <entry>
    <title>BowTie Static Web Hosting Service</title>
    <link href="http://www.tricksofthetrades.net/2016/02/24/bowtie-static-site-service/"/>
    <id>http://www.tricksofthetrades.net/2016/02/24/bowtie-static-site-service/</id>
    <published>2016-02-24T00:00:00.000Z</published>
    <updated>2017-05-26T17:54:37.555Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/ZIQzKNY.png" alt="BowTie Banner Image"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Static sites continue to surge in popularity and show no sign of falling out of favour anytime soon. It’s only natural then that content management platforms centered around static websites make an appearance. Thus comes BowTie!</p>
<p><a href="https://bowtie.io/" target="_blank" rel="external">https://bowtie.io/</a></p>
<blockquote>
<p><strong>“BowTie is an enhanced static hosting environment that lets you deploy feature-rich static sites and applications without needing to build the same services over and over.”</strong></p>
</blockquote>
<p>In this post I’ll go through the bare-bones project creation after registering with the service. This will be just enough to get you introduced to BowTie and comes from the context of a client machine running Linux. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Introduction"><a href="#1-–-Introduction" class="headerlink" title="1 – Introduction"></a>1 – Introduction</h1><p>BowTie caters primarily to the technical users out there who host and run their own static sites as it gives free reign over the code and source files for all of its projects. That being said it’s very simple to get started with and beginners or newer users interested in static site development have a great tool at their disposal to begin learning from. </p>
<p>It also has the utility provided to hand over the control of a site and its contents to non-developers or everyday end-users, in the same way a CMS/Wordpress platform would.  </p>
<p>To deliver this service and solution BowTie provides private Git repos, domain and SSL configuration, policy controls, Stripe payment/subscription support, and the tried and tested Jekyll platform for all of its content generation. </p>
<hr>
<h1 id="2-–-Sign-Up"><a href="#2-–-Sign-Up" class="headerlink" title="2 – Sign Up"></a>2 – Sign Up</h1><p>Free trials are available to anyone interested. </p>
<p>Simply sign up to the BowTie service at the below link to begin your free trial: </p>
<blockquote>
<p><a href="https://bowtie.io/owners/sign_up" target="_blank" rel="external">https://bowtie.io/owners/sign_up</a></p>
</blockquote>
<p>The SSO (Single Sign On) option for authentication with a GitHub account is even quicker and gives the service a gateway to your assets there.  </p>
<p><img src="http://i.imgur.com/oTwBYGf.png" alt="BowTie Signup Form Image"></p>
<hr>
<h1 id="3-–-Project-Name-and-Template"><a href="#3-–-Project-Name-and-Template" class="headerlink" title="3 – Project Name and Template"></a>3 – Project Name and Template</h1><p>Once registered and logged in it’s time to create your first BowTie project.</p>
<p>Give the project a suitable name - this can be the domain name you want to use for hosting when you add the appropriate extension to the entry. Like in my example (pictured) a new domain for the name is not mandatory however.  </p>
<p><img src="http://i.imgur.com/vapa4aV.png" alt="Project Name Image"></p>
<p>The second selection is the type of template you want to use for this site/project and mainly dictates your starting site layout, components, and functionality you begin with. </p>
<p>There are quite a few options here to choose from, and the choice will depend upon your own needs and requirements. </p>
<p>For example purposes and simplicitys sake I’m selecting the “just a blog” option.</p>
<p><img src="http://i.imgur.com/8dUYPPE.png" alt="Template Selection Image"></p>
<hr>
<h1 id="4-–-Roll-Out-and-Dashboard"><a href="#4-–-Roll-Out-and-Dashboard" class="headerlink" title="4 – Roll Out and Dashboard"></a>4 – Roll Out and Dashboard</h1><p>After confirming the previous choice BowTie takes several minutes to generate and setup the project. Patience is key here but it doesn’t take too much time overall. </p>
<p><img src="http://i.imgur.com/36WseTX.png" alt="Progress Bars Image"></p>
<p>Click the green “Roll Out” button to launch the project dashboard:</p>
<p><img src="http://i.imgur.com/V9C4Vrp.png" alt="Project Dashboard Image"></p>
<hr>
<h1 id="5-–-Add-Public-SSH-Key-to-BowTie"><a href="#5-–-Add-Public-SSH-Key-to-BowTie" class="headerlink" title="5 – Add Public SSH Key to BowTie"></a>5 – Add Public SSH Key to BowTie</h1><p>From within the dashboard menus and sub-menus, locate the SSH key section pictured in the next screenshot.</p>
<p><img src="http://i.imgur.com/1NOVzKM.png" alt="Public Keys Form"></p>
<p>If you can’t find the page, use the URL below whilst logged in to BowTie to be taken to it. </p>
<blockquote>
<p><a href="https://bowtie.io/keys/new" target="_blank" rel="external">https://bowtie.io/keys/new</a></p>
</blockquote>
<p>Next locate your client machine’s public SSH key and copy the contents into the form on this “Keys” page. </p>
<p>On Linux systems SSH keys stored in <code>~/.ssh/</code> are easily copied to the system clipboard using xclip.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xclip -selection c -i ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>If you don’t have an SSH key you can generate one using the <code>ssh-keygen</code> program:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="6-–-Install-the-BowTie-Client"><a href="#6-–-Install-the-BowTie-Client" class="headerlink" title="6 – Install the BowTie Client"></a>6 – Install the BowTie Client</h1><p>Have Ruby (at least version 2.0) installed on your system. This is required for running and installing BowTie.</p>
<p>Details on how to install Ruby are located in full here:</p>
<blockquote>
<p><a href="https://www.ruby-lang.org/en/documentation/installation/" target="_blank" rel="external">https://www.ruby-lang.org/en/documentation/installation/</a></p>
</blockquote>
<p>Once Ruby is installed issue the command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install bowtie-io</span><br></pre></td></tr></table></figure>
<p>This installs the BowTie client we need. </p>
<hr>
<h1 id="7-–-Clone-Your-Project’s-Git-Repository"><a href="#7-–-Clone-Your-Project’s-Git-Repository" class="headerlink" title="7 – Clone Your Project’s Git Repository"></a>7 – Clone Your Project’s Git Repository</h1><p>With your Git SSH clone URL - which is found on the BowTie website project dashboard and looks similar to this:</p>
<p><img src="http://i.imgur.com/sFpmQcz.png" alt="BowTie Git Clone URL Image"></p>
<p>Clone the project’s Git repository onto your local file-system.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@git.bowtie.io:tricksofthetrades.git</span><br></pre></td></tr></table></figure>
<p>Remember this example is for my own project. You must substitute in <strong>your</strong> repo address from the BowTie dashboard when using the previous command. </p>
<hr>
<h1 id="8-–-Run-the-BowTie-Test-Server"><a href="#8-–-Run-the-BowTie-Test-Server" class="headerlink" title="8 – Run the BowTie Test Server"></a>8 – Run the BowTie Test Server</h1><p>Change the current working directory to the cloned repository from the previous step (yours will be named differently).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> tricksofthetrades</span><br></pre></td></tr></table></figure>
<p>Run the BowTie test server to generate and host the static HTML content.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bowtie serve</span><br></pre></td></tr></table></figure>
<p>If the build process succeeds a variation of the following output is returned:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Configuration file: /home/scarlz/tricksofthetrades/_config.yml</span><br><span class="line">            Source: /home/scarlz/tricksofthetrades</span><br><span class="line">       Destination: /home/scarlz/tricksofthetrades/_site</span><br><span class="line"> Incremental build: disabled. Enable with --incremental</span><br><span class="line">      Generating... </span><br><span class="line">                    <span class="keyword">done</span> <span class="keyword">in</span> 1.103 seconds.</span><br><span class="line"> Auto-regeneration: enabled <span class="keyword">for</span> <span class="string">'/home/scarlz/tricksofthetrades'</span></span><br><span class="line">Configuration file: /home/scarlz/tricksofthetrades/_config.yml</span><br><span class="line">Configuration file: /home/scarlz/tricksofthetrades/_config.yml</span><br><span class="line">[2016-02-22 17:58:51] INFO  WEBrick 1.3.1</span><br><span class="line">[2016-02-22 17:58:51] INFO  ruby 2.3.0 (2015-12-25) [i686-linux]</span><br><span class="line">[2016-02-22 17:58:51] INFO  WEBrick::HTTPServer<span class="comment">#start: pid=7149 port=4000</span></span><br></pre></td></tr></table></figure>
<p>In the event that the build process fails - any extra Jekyll gems you might need to successfully build and run the project are highlighted as dependencies in the error message. </p>
<p>These dependencies are installed simply by using the name of the gem with the Ruby command from earlier. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install &lt;dependency-name&gt;</span><br></pre></td></tr></table></figure>
<p>After the server runs successfully; visit the address below on your client machine’s web browser.  </p>
<blockquote>
<p><a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
</blockquote>
<p>You should at this address see the BowTie static webpages for the template style you chose at the beginning!</p>
<p><img src="http://i.imgur.com/Dy2bqdd.png" alt="Blog Template Page Image"></p>
<hr>
<h1 id="9-–-Read-the-Docs"><a href="#9-–-Read-the-Docs" class="headerlink" title="9 – Read the Docs"></a>9 – Read the Docs</h1><p>From here on out as a developer you’ll of course want to customise the site files in the local Git repo, and commit then push the changes. For those who aren’t sure what to do next take a look at the project dashboard again as well as some of the documentation in this step of the post.</p>
<p>It’s also from the project dashboard you can gain access to the live site hosted through BowTie. </p>
<p><img src="http://i.imgur.com/WV2hizc.png" alt="BowTie Live Project Button"></p>
<p>All in all the instructions in this post are pretty brief. To read a much more thorough walkthrough of this process consult the official post:</p>
<ul>
<li><a href="https://bowtie.io/help/getting-started-with-bowtie/" target="_blank" rel="external">https://bowtie.io/help/getting-started-with-bowtie/</a></li>
</ul>
<p>As mentioned the next step is to learn how to customise, refine, and re-design the site templates. So check this out:</p>
<ul>
<li><a href="https://bowtie.io/help/style-customize-bowtie-frontend/" target="_blank" rel="external">https://bowtie.io/help/style-customize-bowtie-frontend/</a></li>
</ul>
<p>Furthermore refer to these individual guides that show how to add content to the different types of projects on offer:</p>
<ul>
<li><a href="https://bowtie.io/examples/" target="_blank" rel="external">https://bowtie.io/examples/</a></li>
</ul>
<p>And for any other concerns look into the general BowTie documentation hosted at:</p>
<ul>
<li><a href="https://bowtie.io/docs/#what-is-8904-bowtie" target="_blank" rel="external">https://bowtie.io/docs/#what-is-8904-bowtie</a></li>
</ul>
<hr>
<p>The free trial lasts 14 days in total with the lowest tier payment plan currently costing a very cheap $5.00 a month; allowing one hosted project and access to all of the BowTie services.</p>
<p>The subsequent and higher tier pricing plans on offer are explained here:</p>
<blockquote>
<p><a href="https://bowtie.io/pricing/" target="_blank" rel="external">https://bowtie.io/pricing/</a></p>
</blockquote>
<p>Have fun designing and hosting your static sites! </p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://bowtie.io/support/" target="_blank" rel="external">BowTie’s Support Page</a> – Has FAQ’s and links to the Docs plus a Slack support channel link. </li>
<li><a href="https://bowtie.io/blog/" target="_blank" rel="external">BowTie’s Official Blog</a> – BowTie’s official news blog. </li>
<li><a href="https://github.com/bowtie-io/bowtie-io" target="_blank" rel="external">BowTie.io on GitHub</a> – Source for the Ruby client downloaded and organisation page.</li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ZIQzKNY.png&quot; alt=&quot;BowTie Banner Image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Static sites continue to surge in popularity and show no sign of falling out of favour anytime soon. It’s only natural then that content management platforms centered around static websites make an appearance. Thus comes BowTie!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bowtie.io/&quot;&gt;https://bowtie.io/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“BowTie is an enhanced static hosting environment that lets you deploy feature-rich static sites and applications without needing to build the same services over and over.”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post I’ll go through the bare-bones project creation after registering with the service. This will be just enough to get you introduced to BowTie and comes from the context of a client machine running Linux. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="HTML" scheme="http://www.tricksofthetrades.net/tags/HTML/"/>
    
      <category term="Static" scheme="http://www.tricksofthetrades.net/tags/Static/"/>
    
      <category term="Jekyll" scheme="http://www.tricksofthetrades.net/tags/Jekyll/"/>
    
  </entry>
  
  <entry>
    <title>Ansible - Installing and Running (1)</title>
    <link href="http://www.tricksofthetrades.net/2016/02/10/ansible-installing-running/"/>
    <id>http://www.tricksofthetrades.net/2016/02/10/ansible-installing-running/</id>
    <published>2016-02-10T00:00:00.000Z</published>
    <updated>2017-08-29T18:13:38.781Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/9HBs9cy.png" alt="Ansible Logo"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>Ansible is one of many configuration management tools but has its own unique set of differences. The platform aims to provide solutions for the entirety of a setup. With consideration for infrastructure provisioning, application deployment, and overall orchestration taken into account.  </p>
<p>Some of its features it uses to achieve this are agentless management, multi-node deployment, ad hoc task execution, module libraries, and use of higher level install scripts referred to as <em>playbooks</em>. Security and reliability is maintained throughout this with SSH as the transport protocol.  </p>
<p>Compared to to other CM tools the learning curve is also seen as much lower with Ansible, making it easier to understand and use from the outset. Only Python and a designated control machine are required for the actual installation. With all configuration for the “inventory” assets written in YAML to keep things simple and clean. </p>
<blockquote>
<p><a href="http://www.ansible.com/" target="_blank" rel="external">http://www.ansible.com/</a></p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="1-–-Control-Machine-Installation"><a href="#1-–-Control-Machine-Installation" class="headerlink" title="1 – Control Machine Installation"></a>1 – Control Machine Installation</h1><p>The host you want to use as the <em>control machine</em> for Ansible requires Python 2.6 or 2.7 installed. This control machine can be a desktop, laptop, or workstation etc as long it’s running a Linux based OS such as Debian/Ubuntu, Arch, CentOS, RHEL, OS X, or any version of BSD. </p>
<p>Windows as a platform is not currently supported for the control machine. </p>
<p>In this post the commands are shown for installing Ansible onto the control machine using system package managers, and for only a few of the many Linux distributions on offer.</p>
<h2 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h2><p><a href="https://wiki.archlinux.org/index.php/Ansible" target="_blank" rel="external">Ansible</a> has a Pacman package in the community repository.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S ansible</span><br></pre></td></tr></table></figure>
<p>The AUR also has a package build that pulls directly from GitHub called <code>ansible-git</code>. Any Aurum helper can be used to automatically build and install this, for example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yaourt -S ansible-git</span><br></pre></td></tr></table></figure>
<h2 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h2><p>Open up the Debian software sources file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>Add the following line to <code>/etc/apt/sources.list</code>:</p>
<p><code>deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main</code></p>
<p>Add the Ansible software repository key to the system; it’s the same source as the Ubuntu PPA. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367</span><br></pre></td></tr></table></figure>
<p>Update the package manager to verify the changes and then install Ansible itself:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ansible</span><br></pre></td></tr></table></figure>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>Install the common software properties package if you don’t already have it. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure>
<p>Add the official Ansible package repository to the system and update the package manager database. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-add-repository ppa:ansible/ansible</span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>
<p>Install Ansible from the newly added package repository.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ansible</span><br></pre></td></tr></table></figure>
<h2 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h2><p>Fedora users can install Ansible directly:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y update</span><br><span class="line">$ sudo yum -y install ansible</span><br></pre></td></tr></table></figure>
<h2 id="RHEL-CentOS"><a href="#RHEL-CentOS" class="headerlink" title="RHEL / CentOS"></a>RHEL / CentOS</h2><p><a href="http://fedoraproject.org/wiki/EPEL" target="_blank" rel="external">EPEL must be configured before trying to install Ansible on these systems.</a> </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y update</span><br><span class="line">$ sudo yum -y install ansible</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="2-–-Remote-Nodes-SSH-Setup"><a href="#2-–-Remote-Nodes-SSH-Setup" class="headerlink" title="2 – Remote Nodes SSH Setup"></a>2 – Remote Nodes SSH Setup</h1><p>On the remote nodes you want Ansible to interact with you need to register the control machine’s public SSH key. This is as Ansible uses SSH to communicate and operate by default. </p>
<p>To generate a new SSH key for the control machine use the next command on the control machine host:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh/ </span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"ansible-control-host"</span></span><br></pre></td></tr></table></figure>
<p>Then copy the new key across to the remote client nodes; changing the <code>-p</code> value for your own relevant SSH port number. Along with the usernames plus remote host IP addresses. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i ansible-control-host -p 3980 username@remote.one.ip.address</span><br><span class="line">$ ssh-copy-id -i ansible-control-host -p 3980 username@remote.two.ip.address</span><br><span class="line">$ ssh-copy-id -i ansible-control-host -p 3980 username@remote.three.ip.address</span><br></pre></td></tr></table></figure>
<p>Next open the main Ansible configuration file; which is explained more in a latter section. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure>
<p>Locate the lines that describe private key authentication (shown below) and remove the <code>#</code> symbol whilst adding in the path to the new private key we created.</p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if set, always use this private key file for authentication, same as</span></span><br><span class="line"><span class="comment"># if passing --private-key to ansible or ansible-playbook</span></span><br><span class="line">private_key_file = ~/.ssh/ansible-control-host</span><br></pre></td></tr></table></figure>
<p>Save and exit the file. </p>
<p>This forces Ansible to use this private key for all operations by default. An alternative to this would be to use the <code>ansible_ssh_private_key_file</code> variable in the <code>hosts</code> file explained later on. </p>
<p>Like with the control machine the remote nodes must have Python installed (2.4 or later) as a prerequisite to using Ansible with them. So any remote nodes that do not have Python already installed must be attended to before continuing. </p>
<hr>
<h1 id="3-–-Ansible-Hosts-File-Setup"><a href="#3-–-Ansible-Hosts-File-Setup" class="headerlink" title="3 – Ansible Hosts File Setup"></a>3 – Ansible Hosts File Setup</h1><iframe width="1080" height="500" src="https://www.youtube.com/embed/xew7CMkL7jY" frameborder="1" allowfullscreen><br></iframe>

<p>Continuing on with the control machine - backup the template Ansible hosts file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv /etc/ansible/hosts /etc/ansible/hosts.orig</span><br></pre></td></tr></table></figure>
<p>Begin writing to a new buffer to create a new “hosts” file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<p>Add the contents of the next code snippet into the hosts file, substituting in the IP addresses of your remotes in the process.</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[servers]</span></span><br><span class="line"><span class="string">remote.one.ip.address</span></span><br><span class="line"><span class="string">remote.two.ip.address</span></span><br><span class="line"><span class="string">remote.three.ip.address</span></span><br></pre></td></tr></table></figure>
<p>This configuration file is very flexible and can be expanded to use variables, aliases, and port numbers. Which is what we need to add to ensure the SSH connectivity. </p>
<blockquote>
<p><strong>Note:</strong> If your SSH port is the default port 22 on these remote nodes then you do not have to set this upcoming port variable.</p>
</blockquote>
<p>Expand the file by adding a hostname alias, host variable, user variable, and port number variable:</p>
<figure class="highlight yaml"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[servers]</span></span><br><span class="line"><span class="string">server-name-1</span> <span class="string">ansible_host=remote.one.ip.address</span> <span class="string">ansible_user=username</span> <span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">server-name-2</span> <span class="string">ansible_host=remote.two.ip.address</span> <span class="string">ansible_user=username</span> <span class="string">ansible_port=3980</span> </span><br><span class="line"><span class="string">server-name-3</span> <span class="string">ansible_host=remote.three.ip.address</span> <span class="string">ansible_user=username</span> <span class="string">ansible_port=3980</span></span><br></pre></td></tr></table></figure>
<p>Save the changes and exit the text editor. </p>
<p>As an extra option here, adding an <code>ansible_ssh_private_key_file=~/.ssh/ansible-control-host</code> variable to each host line is another possibility. Instead of what we set in the last step i.e. the default private key directive in Ansible’s main configuration file (<code>ansible.cfg</code>). </p>
<hr>
<h1 id="4-–-Test-Ansible-Connectivity"><a href="#4-–-Test-Ansible-Connectivity" class="headerlink" title="4 – Test Ansible Connectivity"></a>4 – Test Ansible Connectivity</h1><p>An Ansible module named “ping” is useful for testing the previous host file configuration we added.</p>
<p>Note that <code>all</code> can be replaced for a group name like <code>server</code> - which is taken from the example earlier to only select those hosts in that group. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping</span><br></pre></td></tr></table></figure>
<p>A successful hosts and SSH key configuration returns an output similar to:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">hostname1 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"invocation"</span>: &#123;</span><br><span class="line">        <span class="string">"module_args"</span>: &#123;</span><br><span class="line">            <span class="string">"data"</span>: null</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="string">"module_name"</span>: <span class="string">"ping"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hostname2 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"invocation"</span>: &#123;</span><br><span class="line">        <span class="string">"module_args"</span>: &#123;</span><br><span class="line">            <span class="string">"data"</span>: null</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="string">"module_name"</span>: <span class="string">"ping"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hostname3 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"invocation"</span>: &#123;</span><br><span class="line">        <span class="string">"module_args"</span>: &#123;</span><br><span class="line">            <span class="string">"data"</span>: null</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="string">"module_name"</span>: <span class="string">"ping"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Manual options are also sometimes added to these <em>ad hoc</em> Ansible commands. </p>
<p>Here <code>-u</code> selects a Linux user to issue the command as: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping -u &lt;username&gt;</span><br></pre></td></tr></table></figure>
<p>Furthermore the  <code>-b</code> option triggers the command to be run with <code>sudo</code> privileges: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping -u &lt;username&gt; -b</span><br></pre></td></tr></table></figure>
<p>This is all with the “ping” module example, but live commands are just as easy.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all <span class="_">-a</span> <span class="string">"/bin/echo hello world!"</span></span><br></pre></td></tr></table></figure>
<p>You can do this without invoking the program directly and use the <code>command</code> module with Ansible instead.</p>
<p>Return the “servers” group drive partitions using the <code>df</code> program: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible -m <span class="built_in">command</span> <span class="_">-a</span> <span class="string">"df -h"</span> servers</span><br></pre></td></tr></table></figure>
<p>Example output from one host:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hostname1 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Filesystem                 Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/disk/by-label/DOROOT   30G  6.1G   22G  22% /</span><br><span class="line">udev                        10M     0   10M   0% /dev</span><br><span class="line">tmpfs                      202M   25M  178M  13% /run</span><br><span class="line">tmpfs                      505M     0  505M   0% /dev/shm</span><br><span class="line">tmpfs                      5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs                      505M     0  505M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs                      101M     0  101M   0% /run/user/1001</span><br></pre></td></tr></table></figure>
<p>Checking disk space on multiple nodes has never been easier!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible -m <span class="built_in">command</span> <span class="_">-a</span> <span class="string">"free -h"</span> servers</span><br></pre></td></tr></table></figure>
<p>Example output from one host:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hostname2 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          1.0G       875M       134M        25M       187M       570M</span><br><span class="line">-/+ buffers/cache:       117M       892M</span><br><span class="line">Swap:         2.0G        32K       2.0G</span><br></pre></td></tr></table></figure>
<p>Query the system’s uptime of only one requested host using the assigned alias from the hosts file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible -m <span class="built_in">command</span> <span class="_">-a</span> <span class="string">"uptime -p"</span> hostname3</span><br></pre></td></tr></table></figure>
<p>Example output:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostname3 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">up 7 weeks, 1 day, 7 minutes</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="5-–-Ansible-Configuration-File"><a href="#5-–-Ansible-Configuration-File" class="headerlink" title="5 – Ansible Configuration File"></a>5 – Ansible Configuration File</h1><p>Custom changes to the Ansible install and how it behaves are made through the configuration files. </p>
<p>Changes in relation to configuration are processed and picked up in the the following order:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* ANSIBLE_CONFIG (an environment variable)</span><br><span class="line">* ansible.cfg (<span class="keyword">in</span> the current directory)</span><br><span class="line">* .ansible.cfg (<span class="keyword">in</span> the home directory)</span><br><span class="line">* .ansible.cdg (<span class="keyword">in</span> /etc/ansible/ansible.cfg)</span><br></pre></td></tr></table></figure>
<p>In this section we’re taking a quick look at the <code>ansible.cfg</code> file we modified slightly earlier. </p>
<p>There’s not much wrong with the default contents of the main <code>/etc/ansible.cfg</code> file, but you may need to delve into it at some point in the future. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure>
<p>Here are some cherry picked lines and directives from the file that may be of interest. Remember if/when setting these to remove the <code>#</code> symbol to uncomment. </p>
<p>To assign a different directory for a custom hosts file location. </p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#inventory = /etc/ansible/hosts</span></span><br></pre></td></tr></table></figure>
<p>This next line designates the number of parallel processes to generate when talking with remote hosts. The value will always depend upon your hardware capabilities and amount of remote nodes in play. </p>
<p>Higher fork values will help to complete actions across the nodes faster. Assuming you have the hardware needed. A common value is 50, rather than the default of 5. </p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#forks = 5</span></span><br></pre></td></tr></table></figure>
<p>To control whether an Ansible playbook prompts for a sudo password when sudoing - set this next directive to true. </p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ask_sudo_pass = True</span></span><br></pre></td></tr></table></figure>
<p>Similarly to set whether an Ansible playbook prompts for a password when run - set this next line to true.</p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ask_pass = True</span></span><br></pre></td></tr></table></figure>
<p>This sets the default SSH port for all system connections, be aware that any settings in the inventory (e.g. hosts file) will override this. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#remote_port = 22</span><br></pre></td></tr></table></figure>
<p>Set the time out value for SSH queries here on this line:</p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH timeout</span></span><br><span class="line"><span class="comment">#timeout = 10</span></span><br></pre></td></tr></table></figure>
<p>Enable playbook logging capability in the specified directory on these lines here: </p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># logging is off by default unless this path is defined</span></span><br><span class="line"><span class="comment"># if so defined, consider logrotate</span></span><br><span class="line"><span class="comment">#log_path = /var/log/ansible.log</span></span><br></pre></td></tr></table></figure>
<p>Who doesn’t like <code>cowsay</code> ?</p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># don't like cows?  that's unfortunate.</span></span><br><span class="line"><span class="comment"># set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1 </span></span><br><span class="line"><span class="comment">#nocows = 1</span></span><br></pre></td></tr></table></figure>
<p>The lines following these let you tweak and customise components of cowsay even further!</p>
<p>After which the remaining sections that have been omitted here contain more background areas of Ansible, should you need to examine or change them in the future.</p>
<figure class="highlight bash"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[privilege_escalation]</span><br><span class="line">&lt;...&gt;</span><br><span class="line">[paramiko_connection]</span><br><span class="line">&lt;...&gt;</span><br><span class="line">[ssh_connection]</span><br><span class="line">&lt;...&gt;</span><br><span class="line">[accelerate]</span><br><span class="line">&lt;...&gt;</span><br><span class="line">[selinux]</span><br><span class="line">&lt;...&gt;</span><br></pre></td></tr></table></figure>
<p>Any major changes or crucial updates to the configuration file syntax and formatting will likely be pushed to the GitHub development configuration file at:</p>
<blockquote>
<p><a href="https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg" target="_blank" rel="external">https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg</a></p>
</blockquote>
<p>Or shown in the official documentation. </p>
<hr>
<h1 id="7-–-Ansible-Temp-Directory-Permissions"><a href="#7-–-Ansible-Temp-Directory-Permissions" class="headerlink" title="7 – Ansible Temp Directory Permissions"></a>7 – Ansible Temp Directory Permissions</h1><p>Should the permissions and or ownership rights of the below directory become allocated to <em>root</em>, Ansible will not be able to write to this directory (and thereby fail to run).    </p>
<p><code>/home/$USER/.ansible/tmp/</code></p>
<p>Here’s how the permissions should look; substituted with your own Linux username.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwx------ 2 scarlz scarlz 4096 Jun 21 15:12 ./</span><br><span class="line">drwx------ 3 scarlz scarlz 4096 Jun 21 15:12 ../</span><br></pre></td></tr></table></figure>
<p>Simply make sure the user you are running Ansible as posseses sufficient permissions to utilise this directory. If this is not the case either alter the permissions with <code>chmod</code> / <code>chown</code> or failing that delete the directory then re-run Ansible.  </p>
<hr>
<iframe width="1080" height="500" src="https://www.youtube.com/embed/ZNB1at8mJWY" frameborder="1" allowfullscreen><br></iframe>

<p>What’s been covered in this post is the very basics of Ansible and only goes a short way towards demonstrating its ability as a configuration management tool. There are still a variety of pieces to fit into the puzzle such as modules, inventory items, and most importantly the playbooks. Which all make up and achieve the aims of the software described in the premable. </p>
<p>A future post on Ansible will look at more at the concept of “inventory”.</p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Ansible posts can be found on the Trades page.</a></p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="http://docs.ansible.com/ansible/intro_installation.html" target="_blank" rel="external">Official Ansible Documentation - Installation</a> – Extensive instructions for installing and building Ansible from source are located here. </li>
<li><a href="http://docs.ansible.com/ansible/intro_getting_started.html" target="_blank" rel="external">Official Ansible Documentation - Getting Started</a> – A few initial ad hoc commands and examples of them are described in brief here. </li>
<li><a href="http://docs.ansible.com/ansible/intro_configuration.html" target="_blank" rel="external">Official Ansible Documentation - Configuration File</a> – Anything and everything to do with the configuration file, good for referring back to.  </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9HBs9cy.png&quot; alt=&quot;Ansible Logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;Ansible is one of many configuration management tools but has its own unique set of differences. The platform aims to provide solutions for the entirety of a setup. With consideration for infrastructure provisioning, application deployment, and overall orchestration taken into account.  &lt;/p&gt;
&lt;p&gt;Some of its features it uses to achieve this are agentless management, multi-node deployment, ad hoc task execution, module libraries, and use of higher level install scripts referred to as &lt;em&gt;playbooks&lt;/em&gt;. Security and reliability is maintained throughout this with SSH as the transport protocol.  &lt;/p&gt;
&lt;p&gt;Compared to to other CM tools the learning curve is also seen as much lower with Ansible, making it easier to understand and use from the outset. Only Python and a designated control machine are required for the actual installation. With all configuration for the “inventory” assets written in YAML to keep things simple and clean. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ansible.com/&quot;&gt;http://www.ansible.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Ansible" scheme="http://www.tricksofthetrades.net/tags/Ansible/"/>
    
      <category term="CM" scheme="http://www.tricksofthetrades.net/tags/CM/"/>
    
      <category term="Python" scheme="http://www.tricksofthetrades.net/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Docker - Daemon Administration and Networking (3)</title>
    <link href="http://www.tricksofthetrades.net/2016/01/27/docker-further-administration-networking/"/>
    <id>http://www.tricksofthetrades.net/2016/01/27/docker-further-administration-networking/</id>
    <published>2016-01-27T00:00:00.000Z</published>
    <updated>2017-08-29T18:07:58.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/poo8Rai.png" alt="Docker Logo Image"></p>
<h1 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h1><p>This time we are beginning by centering around the Docker daemon and how it interacts with various process mangers from different platforms. Followed up by an introduction to networking in Docker that uses more of the Docker training images to link together and create a basic network of containers. Specifically a PostgreSQL database container and a Python webapp container.  </p>
<p>This is post three on Docker following on from <a href="http://www.tricksofthetrades.net/2016/01/07/docker-administration-applications/">Docker - Administration and Container Applications (2)</a>. If you’re looking for more generalised administration and basic example uses of the Docker Engine CLI then you may want to read that post instead. </p>
<a id="more"></a>
<hr>
<h1 id="1-–-Docker-Daemon-Administration"><a href="#1-–-Docker-Daemon-Administration" class="headerlink" title="1 – Docker Daemon Administration"></a>1 – Docker Daemon Administration</h1><p>The Docker daemon is the background service that handles running containers and all their states. </p>
<p>The starting and stopping of the Docker daemon is often configured through a process manager like systemd or Upstart. In a production environment this is very useful as you have a lot of customisable control over the behaviour of the daemon. </p>
<p>It can be run directly from the command line though instead of this:  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker daemon</span><br></pre></td></tr></table></figure>
<p>It listens on the Unix socket - <code>unix:///var/run/docker.sock</code> when active and running. </p>
<p>If you’re running the docker daemon directly like this you can append configuration options to the command.</p>
<p>An example of running the docker <a href="https://docs.docker.com/engine/reference/commandline/daemon/" target="_blank" rel="external">daemon</a> with configuration options is as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker daemon -D --tls=<span class="literal">true</span> --tlscert=/var/docker/server.pem --tlskey=/var/docker/serverkey.pem -H tcp://192.168.59.3:2376</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-D</code> <code>--debug=false</code>    – Enable or disable debug mode. </li>
<li><code>--tls=false</code> – Enable or disable TLS. </li>
<li><code>--tlscert=</code> – certificate location. </li>
<li><code>tlskey=</code> – key location. </li>
<li><code>-H</code> <code>--host=[]</code> – Daemon socket(s) to connect to.</li>
</ul>
<p>More options are on offer for the Docker daemon at the link before the last code block. </p>
<h2 id="Upstart"><a href="#Upstart" class="headerlink" title="Upstart"></a>Upstart</h2><p>The default Docker daemon Upstart job is found in <code>/etc/init/docker.conf</code> .</p>
<p>To check the status of the daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo status docker</span><br></pre></td></tr></table></figure>
<p>To start the Docker daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo start docker</span><br></pre></td></tr></table></figure>
<p>Stop the Docker daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo stop docker</span><br></pre></td></tr></table></figure>
<p>Or restart the daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo restart docker</span><br></pre></td></tr></table></figure>
<p>Logs for Upstart jobs are found in <code>/var/log/upstart</code> and are compressed when the daemon is not running. So run the daemon/container to read the active log file - <code>docker.log</code> via:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tail -fn 15 /var/<span class="built_in">log</span>/upstart/docker.log</span><br></pre></td></tr></table></figure>
<h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><p>Default unit files are stored in the subdirectories of <code>/usr/lib/systemd</code> and <code>/lib/systemd/system</code> . Custom user created unit files are kept in <code>/etc/systemd/system</code> .</p>
<p>To check the status of the daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status docker</span><br></pre></td></tr></table></figure>
<p>To start the Docker daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<p>Stop the Docker daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl stop docker</span><br></pre></td></tr></table></figure>
<p>Or restart the daemon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>To ensure the Docker daemon starts at boot:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker</span><br></pre></td></tr></table></figure>
<p>Logs for Docker are viewed in systemd with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -u docker</span><br></pre></td></tr></table></figure>
<p>A more in-depth look at systemd and Docker is kept here in the Docker docs:</p>
<blockquote>
<p><a href="https://docs.docker.com/engine/articles/systemd/" target="_blank" rel="external">Docker Documentation - systemd</a></p>
</blockquote>
<hr>
<h1 id="2-–-Process-Manager-Container-Automation"><a href="#2-–-Process-Manager-Container-Automation" class="headerlink" title="2 – Process Manager Container Automation"></a>2 – Process Manager Container Automation</h1><p><em>Restart policies</em> are an in-built Docker mechanism for restarting containers automatically when they exit. These must be set manually with the flag - <code>--restart=&quot;yes&quot;</code> and are also triggered when the Docker daemon starts up (like after a system reboot). Restart policies start linked containers in the correct order too. </p>
<p>If you have non-Docker processes that depend on Docker containers you can use a process manager like upstart, systemd or supervisor instead of these restart policies to replace this functionality. </p>
<p>This is what we will cover in this step.</p>
<blockquote>
<p><strong>Note:</strong> Be aware that process mangers will conflict with Docker restart policies if they are both in action So don’t run restart policies if you are using a process manager.</p>
</blockquote>
<p>For these examples assume that the container’s for each have already been created and are running Ghost with the name <code>--name=ghost-container</code> . </p>
<h2 id="Upstart-1"><a href="#Upstart-1" class="headerlink" title="Upstart"></a>Upstart</h2><figure class="highlight bash"><figcaption><span>/etc/init/ghost.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">description <span class="string">"Ghost Blogging Container"</span></span><br><span class="line">author <span class="string">"Scarlz"</span></span><br><span class="line">start on filesystem and started docker</span><br><span class="line">stop on runlevel [!2345]</span><br><span class="line">respawn</span><br><span class="line">script</span><br><span class="line">  /usr/bin/docker start <span class="_">-a</span> ghost-container</span><br><span class="line">end script</span><br></pre></td></tr></table></figure>
<p>Docker automatically attaches the process manager to the running container, or starts it if needed with this setup.</p>
<p>All signals from Docker are also forwarded so that the process manager can detect when a container stops, to correctly restart it.</p>
<p>If you need to pass options to the containers (such as <code>--env</code>) then you’ll need to use <code>docker run</code> rather than <code>docker start</code> in the job configuration.</p>
<p>For Example: </p>
<figure class="highlight bash"><figcaption><span>/etc/init/ghost.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script</span><br><span class="line">  /usr/bin/docker run --env foo=bar --name ghost-container ghost</span><br><span class="line">end script</span><br></pre></td></tr></table></figure>
<p>This differs as it creates a new container using the <code>ghost</code> image every time the service is started and takes into account the extra options. </p>
<h2 id="systemd-1"><a href="#systemd-1" class="headerlink" title="systemd"></a>systemd</h2><figure class="highlight bash"><figcaption><span>/etc/systemd/system/ghost</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Ghost Blogging Container</span><br><span class="line">Requires=docker.service</span><br><span class="line">After=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=always</span><br><span class="line">ExecStart=/usr/bin/docker start <span class="_">-a</span> ghost-container</span><br><span class="line">ExecStop=/usr/bin/docker stop -t 2 ghost-container</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=local.target</span><br></pre></td></tr></table></figure>
<p>Docker automatically attaches the process manager to the running container, or starts it if needed with this setup. </p>
<p>All signals from Docker are also forwarded so that the process manager can detect when a container stops, to correctly restart it.</p>
<p>If you need to pass options to the containers (such as <code>--env</code>), then you’ll need to use <code>docker run</code> rather than <code>docker start</code> in the job configuration.</p>
<p>For Example: </p>
<figure class="highlight bash"><figcaption><span>/etc/systemd/system/ghost</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/docker run --env foo=bar --name ghost-container ghost</span><br><span class="line">ExecStop=/usr/bin/docker stop -t 2 ghost-container ; /usr/bin/docker rm <span class="_">-f</span> ghost-container</span><br></pre></td></tr></table></figure>
<p>This differs as it creates a new container with the extra options every time the service is started, which stops and removes itself when the Docker service ends. </p>
<hr>
<h1 id="3-–-Docker-Networks"><a href="#3-–-Docker-Networks" class="headerlink" title="3 – Docker Networks"></a>3 – Docker Networks</h1><p>Network drivers allow containers to be linked together and networked. Docker comes with two default network drivers as part of the normal installation:</p>
<ul>
<li>The bridge driver.  </li>
<li>The overlay driver. </li>
</ul>
<p>These two drivers are replaceable with other third party drivers that perform more optimally in different situations. But for low end basic Docker use these given defaults are fine. </p>
<p>Docker also automatically includes three default networks with the base install:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network ls</span><br></pre></td></tr></table></figure>
<p>Listing them as:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID          NAME                DRIVER</span><br><span class="line">2d41f8bbf514        host                host                </span><br><span class="line">f9ee6308ecdd        bridge              bridge              </span><br><span class="line">49dab653f349        none                null</span><br></pre></td></tr></table></figure>
<p>The network named <code>bridge</code> is classed as a special network. Docker launches any and all containers in this network (unless told otherwise). </p>
<p>So if you currently you have containers running these will have been placed into the <code>bridge</code> network group. </p>
<p>Networks can be <a href="https://docs.docker.com/engine/reference/commandline/network_inspect/" target="_blank" rel="external">inspected</a> using the next command, where <code>bridge</code> is the network name to be inspected:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network inspect bridge</span><br></pre></td></tr></table></figure>
<p>The output shows any and all configured directives for the network:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"f9ee6308ecdd5dc5a588428469de1b7c475fdafdab49cfc33c1c3ac0bf0559ab"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.17.0.0/16"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"ff98b5ed01dd4323f0ce38af9b8cea2d49d0b1e194cf147a3a8f632278a11451"</span>: &#123;</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"b7c9fabcda00ccebd6523f76477b51eba00dd5d3f26940355139fff62d5576bb"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;</span><br><span class="line">            <span class="string">"com.docker.network.bridge.default_bridge"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_icc"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_ip_masquerade"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.host_binding_ipv4"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.name"</span>: <span class="string">"docker0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.driver.mtu"</span>: <span class="string">"1500"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>This <code>inspect</code> output changes as a network is altered and configured, how to do this is covered in later steps. </p>
<hr>
<h1 id="4-–-Creating-Docker-Networks"><a href="#4-–-Creating-Docker-Networks" class="headerlink" title="4 – Creating Docker Networks"></a>4 – Creating Docker Networks</h1><p>Networks are natural ways to isolate containers from other containers or other networks. The original default networks are not to be solely relied upon however. It’s better to create your own network groups.</p>
<p>Remember there are two default drivers and therefore two native network types; <code>bridge</code> and <code>overlay</code> . Bridge networks can only make use of one singular host to run the Docker Engine software. An overlay network differs in that it can incorporate multiple hosts into running the Docker software. </p>
<p>To make the simpler “bridge” type network we use the <code>create</code> option:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create <span class="_">-d</span> bridge &lt;new-network-name&gt;</span><br></pre></td></tr></table></figure>
<p>With this last command the <code>-d</code> (driver) and <code>bridge</code> option specifies the network type we want to create. With a new name for the network at the end of the command. </p>
<p>To see the new network after creation:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network ls</span><br></pre></td></tr></table></figure>
<p>Shown on the last line:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID          NAME                  DRIVER</span><br><span class="line">f9ee6308ecdd        bridge                bridge              </span><br><span class="line">49dab653f349        none                  null                </span><br><span class="line">2d41f8bbf514        host                  host                </span><br><span class="line">08f44ef7de28        <span class="built_in">test</span>-bridge-network   bridge</span><br></pre></td></tr></table></figure>
<p>Overlay networks are a much wider topic due to their inclusion of multiple hosts so aren’t covered in this post but the basic principles and where to start is mentioned in the link below:    </p>
<blockquote>
<p><a href="https://docs.docker.com/engine/userguide/networking/work-with-networks/" target="_blank" rel="external">Docker Documentation - Working with Network Commands</a></p>
</blockquote>
<hr>
<h1 id="5-–-Connecting-Containers-to-Networks"><a href="#5-–-Connecting-Containers-to-Networks" class="headerlink" title="5 – Connecting Containers to Networks"></a>5 – Connecting Containers to Networks</h1><p>Creating and using these networks allows container applications to to operate in unison and as securely as possible. Containers inside of networks can only interact with their counterparts and are isolated from the outsides of the network. Similar to VLAN segregation inside of a IP based network.    </p>
<p>Usually containers are added to a network when you first launch and run the container. We’ll follow the example from the Docker Documentation that uses a PostgreSQL database container and the Python webapp to demonstrate a simple network configuration. </p>
<p>First launch a container running the PostgreSQL database training image, and in the process add it to your custom made bridge network from the previous step. </p>
<p>To do this we must pass the <code>--net=</code> flag to the new container, and provide it with the name of our custom bridge network. Which in my example earlier was <code>test-bridge-network</code> :  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> --net=<span class="built_in">test</span>-bridge-network --name db training/postgres</span><br></pre></td></tr></table></figure>
<p>You can inspect this aptly named <code>db</code> container to see where exactly it is connected:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect --format=<span class="string">'&#123;&#123;json .NetworkSettings.Networks&#125;&#125;'</span> db</span><br></pre></td></tr></table></figure>
<p>This shows us the network details for the database container’s <code>test-bridge-network</code> connection:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"test-bridge-network"</span>:&#123;<span class="string">"EndpointID"</span>:<span class="string">"0008c8566542ef24e5e57d5911c8e33a79f0fcb91b1bbdd60d5cdec3217fb517"</span>,<span class="string">"Gateway"</span>:<span class="string">"172.18.0.1"</span>,<span class="string">"IPAddress"</span>:<span class="string">"172.18.0.2"</span>,<span class="string">"IPPrefixLen"</span>:16,<span class="string">"IPv6Gateway"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6Address"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6PrefixLen"</span>:0,<span class="string">"MacAddress"</span>:<span class="string">"02:42:ac:12:00:02"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>Next run the Python training web application in daemonised mode with out any extra options:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> --name python-webapp training/webapp python app.py</span><br></pre></td></tr></table></figure>
<p>Inspect the <code>python-webapp</code> container’s network connection in the same way as before: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect --format=<span class="string">'&#123;&#123;json .NetworkSettings.Networks&#125;&#125;'</span> python-webapp</span><br></pre></td></tr></table></figure>
<p>As expected this new container is running under the <strong>default</strong> bridge network, shown in the output of the last command:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"bridge"</span>:&#123;<span class="string">"EndpointID"</span>:<span class="string">"e5c7f1c8d097fdafc35b89d7bce576fe01a22709424643505d79abe394a59767"</span>,<span class="string">"Gateway"</span>:<span class="string">"172.17.0.1"</span>,<span class="string">"IPAddress"</span>:<span class="string">"172.17.0.2"</span>,<span class="string">"IPPrefixLen"</span>:16,<span class="string">"IPv6Gateway"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6Address"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6PrefixLen"</span>:0,<span class="string">"MacAddress"</span>:<span class="string">"02:42:ac:11:00:02"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>Docker lets us connect a container to as many networks as we like. More importantly for us we can also connect an already running container to a network. </p>
<p>Attach the running <code>python-webapp</code> container to the “test-bridge-network” like we need:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network connect test-bridge-network python-webapp</span><br></pre></td></tr></table></figure>
<p>To test the container connections to our custom network we can ping from one to the other.</p>
<p>Get the IP address of the <code>db</code> container:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect --format=<span class="string">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> db</span><br></pre></td></tr></table></figure>
<p>In my case this was:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.18.0.2</span><br></pre></td></tr></table></figure>
<p>Now we have the IP address open an interactive shell into the <code>python-webapp</code> container:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it python-webapp bash</span><br></pre></td></tr></table></figure>
<p>Attempt to ping the <code>db</code> container with the IP address from before, substituting <code>172.18.0.2</code>  for your address equivalent:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 10 172.18.0.2</span><br></pre></td></tr></table></figure>
<p>As long as you successfully connected both containers earlier on, the ping command will be successful:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="built_in">fc</span>0f73c129c0:/opt/webapp<span class="comment"># ping -c 10 db</span></span><br><span class="line">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=1 ttl=64 time=0.216 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=3 ttl=64 time=0.053 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=4 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=5 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=6 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=7 ttl=64 time=0.062 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=8 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=9 ttl=64 time=0.061 ms</span><br><span class="line">64 bytes from db (172.18.0.2): icmp_seq=10 ttl=64 time=0.063 ms</span><br><span class="line"></span><br><span class="line">--- db ping statistics ---</span><br><span class="line">10 packets transmitted, 10 received, 0% packet loss, time 8997ms</span><br><span class="line">rtt min/avg/max/mdev = 0.053/0.076/0.216/0.047 ms</span><br></pre></td></tr></table></figure>
<p>Conveniently container names work in the place of an IP address too in this scenario:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 10 db</span><br></pre></td></tr></table></figure>
<p>Press <code>CTRL</code> + <code>D</code> to exit the container prompt, or type in <code>exit</code> instead. </p>
<p>And with that we have two containers on the same user created network able to communicate with each other, and able to share data. Which is what we would be aiming for in the case of the PostgreSQL database and Python webapp.  </p>
<p>There’s more ways of sharing data between containers once they are connected through a network, but these are covered in the next post of the series. </p>
<hr>
<h1 id="6-–-Miscellaneous-Networking-Commands"><a href="#6-–-Miscellaneous-Networking-Commands" class="headerlink" title="6 – Miscellaneous Networking Commands"></a>6 – Miscellaneous Networking Commands</h1><p>Here are a few complimentary commands in relation to what has already been covered in this post.</p>
<p>At some point you are likely to need to remove a container from its network. This is done by using the <code>disconnect</code> command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network disconnect <span class="built_in">test</span>-bridge-network &lt;container-name&gt;</span><br></pre></td></tr></table></figure>
<p>Here <code>test-bridge-network</code> is the name of the network, followed by which container you want to remove from it. </p>
<p>When all the containers in a network are stopped or disconnected, you can remove networks themselves completely with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network rm <span class="built_in">test</span>-bridge-network</span><br></pre></td></tr></table></figure>
<p>Meaning the <code>test-bridge-network</code> is now deleted and absent from the list of existing networks:</p>
<figure class="highlight bash"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID          NAME                  DRIVER             </span><br><span class="line">2e38b3a44489        bridge                bridge              </span><br><span class="line">79d9d21edbec        none                  null                </span><br><span class="line">61371e641e1b        host                  host</span><br></pre></td></tr></table></figure>
<p>The output here is garnered from the <code>docker network ls</code> command. </p>
<hr>
<p>Networking in Docker begins here with these examples but goes a lot further than what we’ve covered. Data volumes, data containers, and mounting host volumes are described in the next post on Docker when it’s released. </p>
<p><a href="http://www.tricksofthetrades.net/trades/">Links to subsequent Docker posts can be found on the Trades page.</a></p>
<p><strong>More Information</strong></p>
<ul>
<li><a href="https://docs.docker.com/engine/articles/configuring/" target="_blank" rel="external">Docker Docs - Configuring and Running Docker on Various Distributions</a> – Covers the daemon setup and is the main source for the first few steps of this post.  </li>
<li><a href="https://docs.docker.com/engine/articles/host_integration/" target="_blank" rel="external">Docker Docs -Automatically Start Containers</a> – Is mostly step 2 and has the bases for the process manger uptime script examples. </li>
<li><a href="https://docs.docker.com/engine/userguide/networking/" target="_blank" rel="external">Docker Docs - Networking Containers</a> – Anything and everything networking wise in this post comes from this. </li>
</ul>
<blockquote>
<p>Easily deploy an SSD cloud server on <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">Digital Ocean</a> in 55 seconds. Sign up using my link and receive $10.00 in free credit: <a href="https://www.digitalocean.com/?refcode=e91058dbfc7b" target="_blank" rel="external">https://www.digitalocean.com/?refcode=e91058dbfc7b</a></p>
</blockquote>
<p>– Scarlz: <a href="https://twitter.com/5car1z" target="_blank" rel="external">@5car1z</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/poo8Rai.png&quot; alt=&quot;Docker Logo Image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h1&gt;&lt;p&gt;This time we are beginning by centering around the Docker daemon and how it interacts with various process mangers from different platforms. Followed up by an introduction to networking in Docker that uses more of the Docker training images to link together and create a basic network of containers. Specifically a PostgreSQL database container and a Python webapp container.  &lt;/p&gt;
&lt;p&gt;This is post three on Docker following on from &lt;a href=&quot;http://www.tricksofthetrades.net/2016/01/07/docker-administration-applications/&quot;&gt;Docker - Administration and Container Applications (2)&lt;/a&gt;. If you’re looking for more generalised administration and basic example uses of the Docker Engine CLI then you may want to read that post instead. &lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://www.tricksofthetrades.net/topics/Programming/"/>
    
    
      <category term="Docker" scheme="http://www.tricksofthetrades.net/tags/Docker/"/>
    
      <category term="Virtualisation" scheme="http://www.tricksofthetrades.net/tags/Virtualisation/"/>
    
      <category term="Containers" scheme="http://www.tricksofthetrades.net/tags/Containers/"/>
    
  </entry>
  
</feed>
